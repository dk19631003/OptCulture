package org.mq.optculture.business.loyalty;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.TreeMap;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.mq.marketer.campaign.beans.Contacts;
import org.mq.marketer.campaign.beans.ContactsLoyalty;
import org.mq.marketer.campaign.beans.EventTrigger;
import org.mq.marketer.campaign.beans.LoyaltyCardSet;
import org.mq.marketer.campaign.beans.LoyaltyCards;
import org.mq.marketer.campaign.beans.LoyaltyProgram;
import org.mq.marketer.campaign.beans.LoyaltyProgramExclusion;
import org.mq.marketer.campaign.beans.LoyaltyProgramTier;
import org.mq.marketer.campaign.beans.LoyaltyTransactionChild;
import org.mq.marketer.campaign.beans.LoyaltyTransactionExpiry;
import org.mq.marketer.campaign.beans.OTPGeneratedCodes;
import org.mq.marketer.campaign.beans.Users;
import org.mq.marketer.campaign.controller.service.EventTriggerEventsObservable;
import org.mq.marketer.campaign.controller.service.EventTriggerEventsObserver;
import org.mq.marketer.campaign.custom.MyCalendar;
import org.mq.marketer.campaign.dao.ContactsDao;
import org.mq.marketer.campaign.dao.ContactsLoyaltyDao;
import org.mq.marketer.campaign.dao.ContactsLoyaltyDaoForDML;
import org.mq.marketer.campaign.dao.CouponsDao;
import org.mq.marketer.campaign.dao.EventTriggerDao;
import org.mq.marketer.campaign.dao.POSMappingDao;
import org.mq.marketer.campaign.dao.RetailProSalesDao;
import org.mq.marketer.campaign.dao.UsersDao;
import org.mq.marketer.campaign.general.Constants;
import org.mq.marketer.campaign.general.PropertyUtil;
import org.mq.marketer.campaign.general.Utility;
import org.mq.optculture.business.helper.LoyaltyProgramHelper;
import org.mq.optculture.data.dao.LoyaltyCardSetDao;
import org.mq.optculture.data.dao.LoyaltyCardsDao;
import org.mq.optculture.data.dao.LoyaltyProgramDao;
import org.mq.optculture.data.dao.LoyaltyProgramExclusionDao;
import org.mq.optculture.data.dao.LoyaltyProgramTierDao;
import org.mq.optculture.data.dao.LoyaltyTransactionChildDao;
import org.mq.optculture.data.dao.LoyaltyTransactionExpiryDao;
import org.mq.optculture.data.dao.OTPGeneratedCodesDao;
import org.mq.optculture.exception.BaseServiceException;
import org.mq.optculture.model.BaseRequestObject;
import org.mq.optculture.model.BaseResponseObject;
import org.mq.optculture.model.ocloyalty.AdditionalInfo;
import org.mq.optculture.model.ocloyalty.OTPRedeemLimit;
import org.mq.optculture.model.ocloyalty.Amount;
import org.mq.optculture.model.ocloyalty.Balance;
import org.mq.optculture.model.ocloyalty.Customer;
import org.mq.optculture.model.ocloyalty.Discounts;
import org.mq.optculture.model.ocloyalty.HoldBalance;
import org.mq.optculture.model.ocloyalty.LoyaltyRedemptionRequest;
import org.mq.optculture.model.ocloyalty.LoyaltyRedemptionResponse;
import org.mq.optculture.model.ocloyalty.MatchedCustomer;
import org.mq.optculture.model.ocloyalty.MembershipResponse;
import org.mq.optculture.model.ocloyalty.Promotion;
import org.mq.optculture.model.ocloyalty.ResponseHeader;
import org.mq.optculture.model.ocloyalty.Status;
import org.mq.optculture.utils.OCConstants;
import org.mq.optculture.utils.OptCultureUtils;
import org.mq.optculture.utils.ServiceLocator;

import com.google.gson.Gson;

/**
 * == OC Loyalty Program == Loyalty redemption handler  
 *
 * @author Venkata Rathnam D
 *
 */
public class LoyaltyRedemptionOCServiceImpl implements LoyaltyRedemptionOCService{
	private static final Logger logger = LogManager.getLogger(Constants.SUBSCRIBER_LOGGER);
	/**
	 * BaseService Request called by rest service controller.
	 * @return BaseResponseObject
	 */
	@Override
	public BaseResponseObject processRequest(BaseRequestObject baseRequestObject)
			throws BaseServiceException {
		
		String serviceRequest = baseRequestObject.getAction();
		String requestJson = baseRequestObject.getJsonValue();
		Gson gson = new Gson();
		LoyaltyRedemptionResponse redemptionResponse = null;
		LoyaltyRedemptionRequest redemptionRequest = null;
		BaseResponseObject responseObject = null;
		String responseJson = null;
		
		if(requestJson == null || serviceRequest == null || !serviceRequest.equals(OCConstants.LOYALTY_SERVICE_ACTION_REDEMPTION)){
			redemptionResponse = new LoyaltyRedemptionResponse();
			
			Status status = new Status("101001", PropertyUtil.getErrorMessage(101001, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			redemptionResponse.setStatus(status);
			
			//Convert Object to JSON string
			responseJson = gson.toJson(redemptionResponse);
			responseObject = new BaseResponseObject();
			responseObject.setAction(serviceRequest);
			responseObject.setJsonValue(responseJson);
			return responseObject;
		}
		
		try{
			
			redemptionRequest = gson.fromJson(requestJson, LoyaltyRedemptionRequest.class);
			
		}catch(Exception e){
			
			Status status = new Status("101001", ""+PropertyUtil.getErrorMessage(101001, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			
			redemptionResponse = new LoyaltyRedemptionResponse();
			redemptionResponse.setStatus(status);
			responseJson = gson.toJson(redemptionResponse);
			
			responseObject = new BaseResponseObject();
			responseObject.setAction(serviceRequest);
			responseObject.setJsonValue(responseJson);
			logger.info("Exited baserequest due to invalid JSON ");
			return responseObject;
		}
		
		try{
			logger.info("POS issuance request...online mode ...");
			LoyaltyRedemptionOCService loyaltyRedemptionService = (LoyaltyRedemptionOCService) ServiceLocator.getInstance().getServiceByName(OCConstants.LOYALTY_REDEMPTION_OC_BUSINESS_SERVICE);
			redemptionResponse = loyaltyRedemptionService.processRedemptionRequest(redemptionRequest, OCConstants.LOYALTY_ONLINE_MODE, 
					baseRequestObject.getTransactionId(), baseRequestObject.getTransactionDate());
				responseJson = gson.toJson(redemptionResponse);
				
				responseObject = new BaseResponseObject();
				responseObject.setAction(serviceRequest);
				responseObject.setJsonValue(responseJson);
			}catch(Exception e){
				logger.error("Exception in loyalty issuance base service.",e);
				throw new BaseServiceException("Server Error.");
			}
			return responseObject;
		
	}
	/**
	 * Handles the complete process of Loyalty Redemption for either points or amount(USD).
	 * @return LoyaltyRedemptionResponse
	 */
	@Override
	public LoyaltyRedemptionResponse processRedemptionRequest(LoyaltyRedemptionRequest redemptionRequest, String mode, 
			String transactionId, String transactionDate)
			throws BaseServiceException {
		
		LoyaltyRedemptionResponse redemptionResponse = null;
		Status status = null;
		Users user = null;
		
		ResponseHeader responseHeader = new ResponseHeader();
		responseHeader.setRequestDate(redemptionRequest.getHeader().getRequestDate());
		responseHeader.setRequestId(redemptionRequest.getHeader().getRequestId());
		responseHeader.setTransactionDate(transactionDate);
		responseHeader.setTransactionId(transactionId);
		
		
		try{
			status = validateRedemptionJsonData(redemptionRequest);
			if(status != null && OCConstants.JSON_RESPONSE_FAILURE_MESSAGE.equals(status.getStatus())){
				redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
				return redemptionResponse;
			}
			
			status = validateEnteredValue(redemptionRequest.getAmount());
			if(status != null && OCConstants.JSON_RESPONSE_FAILURE_MESSAGE.equals(status.getStatus())){
				redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
				return redemptionResponse;
			}
			
			user = getUser(redemptionRequest.getUser().getUserName(), redemptionRequest.getUser().getOrganizationId(),
					redemptionRequest.getUser().getToken());
			if(user == null){
				status = new Status("101013", PropertyUtil.getErrorMessage(101013, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
				return redemptionResponse;
			}
			if(!user.isEnabled()){
				status = new Status("111558", PropertyUtil.getErrorMessage(111558, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
				return redemptionResponse;
			}
			if(user.getPackageExpiryDate().before(Calendar.getInstance())){
				status = new Status("111559", PropertyUtil.getErrorMessage(111559, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
				return redemptionResponse;
			}
			//if the user has loyalty type oc(changed during migrationsbtooc)
			if(OCConstants.LOYALTY_SERVICE_TYPE_OC.equals(user.getloyaltyServicetype())) {
				
				
				if(redemptionRequest.getHeader().getDocSID() == null || redemptionRequest.getHeader().getDocSID().trim().isEmpty()){
					status = new Status("111510", PropertyUtil.getErrorMessage(111510, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
					return redemptionResponse;
				}
				if(redemptionRequest.getHeader().getStoreNumber() == null || redemptionRequest.getHeader().getStoreNumber().length() <= 0){
					status = new Status("111501", PropertyUtil.getErrorMessage(111501, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
					return redemptionResponse;
				}
				
			}
			
			
			LoyaltyCards loyaltyCard = null;
			
			if(redemptionRequest.getMembership().getCardNumber() != null && redemptionRequest.getMembership().getCardNumber().length() > 0){
				
				logger.info("redemption by card number >>>");
				String cardNumber = "";
				String cardLong = null;
				
				/*if(redemptionRequest.getMembership().getCardNumber().trim().length() != 16){
					status = new Status("100107", PropertyUtil.getErrorMessage(100107, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
					return redemptionResponse;	
				}*/
				cardLong = OptCultureUtils.validateOCLtyCardNumber(redemptionRequest.getMembership().getCardNumber().trim());
				if(cardLong == null){
					String msg = PropertyUtil.getErrorMessage(100107, OCConstants.ERROR_LOYALTY_FLAG)+" "+redemptionRequest.getMembership().getCardNumber().trim()+".";
					status = new Status("100107", msg, OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
					return redemptionResponse;
				}
				cardNumber = ""+cardLong;
				redemptionRequest.getMembership().setCardNumber(cardNumber);
				
				loyaltyCard = findLoyaltyCardByUserId(cardNumber, user.getUserId());
				
				if(loyaltyCard == null){
					status = new Status("111505", PropertyUtil.getErrorMessage(111505, OCConstants.ERROR_LOYALTY_FLAG)+" "+cardNumber+".", OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
					return redemptionResponse;
				}
				
				if(OCConstants.LOYALTY_CARD_STATUS_INVENTORY.equalsIgnoreCase(loyaltyCard.getStatus())){
					status = new Status("111537", PropertyUtil.getErrorMessage(111537, OCConstants.ERROR_LOYALTY_FLAG)+" "+cardNumber+".", OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
					return redemptionResponse;
				}
				
				return cardBasedRedemption(redemptionRequest, loyaltyCard, responseHeader, user);
				
			}
			else if(redemptionRequest.getMembership().getPhoneNumber() != null 
					&& redemptionRequest.getMembership().getPhoneNumber().trim().length() > 0){
				
				String validStatus = LoyaltyProgramHelper.validateMembershipMobile(redemptionRequest.getMembership().getPhoneNumber().trim());
				if(OCConstants.LOYALTY_MEMBERSHIP_MOBILE_INVALID.equals(validStatus)){
					String msg = PropertyUtil.getErrorMessage(111554, OCConstants.ERROR_LOYALTY_FLAG)+" "+redemptionRequest.getMembership().getPhoneNumber().trim();
					status = new Status("111554", msg, OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
					return redemptionResponse;
				}
				
				ContactsLoyalty contactsLoyalty = findContactLoyaltyByMobile(redemptionRequest.getMembership().getPhoneNumber(), user.getUserId());
				
				if(contactsLoyalty == null){
					String msg = PropertyUtil.getErrorMessage(111519, OCConstants.ERROR_LOYALTY_FLAG)+" "+redemptionRequest.getMembership().getPhoneNumber().trim();
					status = new Status("111519", msg, OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
					return redemptionResponse;
				}
				
				return mobileBasedRedemption(redemptionRequest, contactsLoyalty, user, responseHeader, loyaltyCard);
				
			}
			else if(redemptionRequest.getCustomer().getPhone() != null 
					&& !redemptionRequest.getCustomer().getPhone().trim().isEmpty()){
				
				List<ContactsLoyalty> enrollList = findEnrollListByMobile(redemptionRequest.getCustomer().getPhone(), user.getUserId());
				
				if(enrollList == null){
					status = new Status("111524", PropertyUtil.getErrorMessage(111524, OCConstants.ERROR_LOYALTY_FLAG)+" "+redemptionRequest.getCustomer().getPhone().trim()+".", OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
					return redemptionResponse;
				}
				
				ContactsLoyalty contactsLoyalty = null;
				List<Contacts> dbContactList = null;
				Contacts dbContact = null;
				
				if(enrollList.size() > 1){
					logger.info("Found more than 1 enrollments");
					Contacts jsonContact = prepareContactFromJsonData(redemptionRequest.getCustomer(), user.getUserId());
					jsonContact.setUsers(user);
					dbContactList = findOCContact(jsonContact, user.getUserId());
					
					if(dbContactList == null){
						logger.info(" request contact not found in OC");
						
						List<MatchedCustomer> matchedCustomers = prepareMatchedCustomers(enrollList);
						
						status = new Status("111525", PropertyUtil.getErrorMessage(111525, OCConstants.ERROR_LOYALTY_FLAG)+" "+redemptionRequest.getCustomer().getPhone().trim()+".", OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
						redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, matchedCustomers, status);
						return redemptionResponse;
					}
					else if(dbContactList.size() == 1){
						logger.info("else case..enrollList ..."+enrollList.size());
						dbContact = dbContactList.get(0);
						logger.info("dbcontact cid == "+dbContact.getContactId());
						Iterator<ContactsLoyalty> iterList = enrollList.iterator();
						ContactsLoyalty loyalty = null;
						int count = 0;
						while(iterList.hasNext()){
							loyalty = iterList.next();
							logger.info(" enrollist cid.."+loyalty.getContact().getContactId());
							if(loyalty.getContact() != null && loyalty.getContact().getContactId() != null 
									&& loyalty.getContact().getContactId().longValue() == dbContact.getContactId().longValue()){
								if(contactsLoyalty == null)	contactsLoyalty = loyalty;
								count++;
								logger.info("loyalty found in more than one enrollment case...");
							}
						}
						if(count > 1){
							contactsLoyalty = null;
						}
						if(contactsLoyalty == null){
							
							List<MatchedCustomer> matchedCustomers = prepareMatchedCustomers(enrollList);
							
							status = new Status("111525", PropertyUtil.getErrorMessage(111525, OCConstants.ERROR_LOYALTY_FLAG)+" "+redemptionRequest.getCustomer().getPhone().trim()+".", OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
							redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, matchedCustomers, status);
							return redemptionResponse;
						}
					}
					else{
						List<MatchedCustomer> matchedCustomers = prepareMatchedCustomers(enrollList);

						status = new Status("111525", PropertyUtil.getErrorMessage(111525, OCConstants.ERROR_LOYALTY_FLAG)+" "+redemptionRequest.getCustomer().getPhone().trim()+".", OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
						redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, matchedCustomers, status);
						return redemptionResponse;
					}
					
				}
				else{
					logger.info("loyalty found in else case....");
					contactsLoyalty = enrollList.get(0);
				}
				logger.info("contactsLoyalty = "+contactsLoyalty);
				
				if(OCConstants.LOYALTY_MEMBERSHIP_TYPE_MOBILE.equals(contactsLoyalty.getMembershipType())){
					
					return mobileBasedRedemption(redemptionRequest, contactsLoyalty, user, responseHeader, loyaltyCard);
				}
				else if(OCConstants.LOYALTY_MEMBERSHIP_TYPE_CARD.equals(contactsLoyalty.getMembershipType())){
					
					loyaltyCard = findLoyaltyCardByUserId(""+contactsLoyalty.getCardNumber(), user.getUserId());
					return cardBasedRedemption(redemptionRequest, loyaltyCard, responseHeader, user);
				}
				else{
					logger.info("INVALID LOYALTY MEMBERSHIP CARD TYPE .... LOOKINTO THIS...");
				}
				
			}
			else{
				status = new Status("111523", PropertyUtil.getErrorMessage(111523, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
				return redemptionResponse;
			}

			
		}catch(Exception e){
			logger.error("Exception in loyalty Redemption service", e);
			throw new BaseServiceException("Loyalty Redemption Request Failed");
		}
		return redemptionResponse;
	}
	/**
	 * Validates all JSON Request parameters
	 * @param LoyaltyIssuanceRequestObject
	 * @return StatusInfo
	 * @throws Exception
	 */
	private Status validateRedemptionJsonData(LoyaltyRedemptionRequest redemptionRequest) throws Exception{
		
		Status status = null;
		
		if(redemptionRequest == null ){
			status = new Status(
					"101002", PropertyUtil.getErrorMessage(101002, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return status;
		}
		if(redemptionRequest.getUser() == null){
			status = new Status(
					"101011", PropertyUtil.getErrorMessage(101011, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return status;
		}
		if(redemptionRequest.getMembership() == null){
			status = new Status(
					"101004", PropertyUtil.getErrorMessage(101004, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return status;
		}
		if(redemptionRequest.getAmount() == null){
			status = new Status(
					"111534", PropertyUtil.getErrorMessage(111534, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return status;
		}
		if(redemptionRequest.getUser().getUserName() == null || redemptionRequest.getUser().getUserName().trim().length() <=0 || 
				redemptionRequest.getUser().getOrganizationId() == null || redemptionRequest.getUser().getOrganizationId().trim().length() <=0 || 
				redemptionRequest.getUser().getToken() == null || redemptionRequest.getUser().getToken().trim().length() <=0) {
			status = new Status("101012", PropertyUtil.getErrorMessage(101012, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return status;
		}
		
		if(redemptionRequest.getAmount().getEnteredValue() == null || redemptionRequest.getAmount().getEnteredValue().trim().isEmpty() ||
				redemptionRequest.getAmount().getValueCode() == null || redemptionRequest.getAmount().getValueCode().trim().isEmpty() ||
				!(redemptionRequest.getAmount().getValueCode().equals(OCConstants.LOYALTY_TYPE_CURRENCY) ||
						redemptionRequest.getAmount().getValueCode().equals(OCConstants.LOYALTY_TYPE_POINTS))){
			status = new Status("111526", PropertyUtil.getErrorMessage(111526, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return status;
		}
		
		
		
		if(redemptionRequest.getAmount().getValueCode().equals(OCConstants.LOYALTY_TYPE_POINTS) && 
				redemptionRequest.getAmount().getEnteredValue() != null && 
				!redemptionRequest.getAmount().getEnteredValue().trim().isEmpty()){   try{
				    int enteredValue = 0;
				    Double enteredValueDouble = Double.parseDouble(redemptionRequest.getAmount().getEnteredValue());
				    if(enteredValueDouble != null) {
				     
				     enteredValue = enteredValueDouble.intValue();
				    }
				   }catch(Exception e){
				    status = new Status("111526", PropertyUtil.getErrorMessage(111526, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				    return status;
				   }}
		
		if(redemptionRequest.getAmount().getValueCode().equals(OCConstants.LOYALTY_TYPE_CURRENCY) && 
				redemptionRequest.getAmount().getEnteredValue() != null && 
				!redemptionRequest.getAmount().getEnteredValue().trim().isEmpty()){
			try{
				Double enteredValue = Double.valueOf(redemptionRequest.getAmount().getEnteredValue());
			}catch(Exception e){
				status = new Status("111526", PropertyUtil.getErrorMessage(111526, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				return status;
			}
			
		}
		
		return status;
	}
		
	/**
	 * Saves contacts loyalty object in OptCulture database.
	 * 
	 * @param contactsLoyalty
	 * @param redemptionStatus
	 * @throws Exception
	 */
	private void saveContactsLoyalty(ContactsLoyalty contactsLoyalty) throws Exception {
		ContactsLoyaltyDaoForDML loyaltyDao = (ContactsLoyaltyDaoForDML)ServiceLocator.getInstance().getDAOForDMLByName(OCConstants.CONTACTS_LOYALTY_DAO_FOR_DML);
		loyaltyDao.saveOrUpdate(contactsLoyalty);
	}
	
	/**
	 * Fetches Users object from OC database
	 * 
	 * @param userName
	 * @param orgId
	 * @param userToken
	 * @return Users
	 * @throws Exception
	 */
	private Users getUser(String userName, String orgId, String userToken) throws Exception{
		
		String completeUserName = userName+Constants.USER_AND_ORG_SEPARATOR+orgId;
		UsersDao usersDao = (UsersDao)ServiceLocator.getInstance().getDAOByName(OCConstants.USERS_DAO);
		Users user = usersDao.findUserByToken(completeUserName, userToken);
		return user;
	}
	
	
	private LoyaltyRedemptionResponse prepareRedemptionResponse(ResponseHeader header, MembershipResponse accountResponse,
			List<Balance> balances, HoldBalance holdBalance, AdditionalInfo additionalInfo, List<MatchedCustomer> matchedCustomers, Status status) throws BaseServiceException {
		LoyaltyRedemptionResponse redemptionResponse = new LoyaltyRedemptionResponse();
		redemptionResponse.setHeader(header);
		
		if(accountResponse == null){
			accountResponse = new MembershipResponse();
			accountResponse.setCardNumber("");
			accountResponse.setCardPin("");
			accountResponse.setExpiry("");
			accountResponse.setPhoneNumber("");
			accountResponse.setTierLevel("");
			accountResponse.setTierName("");
		}
		if(balances == null){
			balances = new ArrayList<Balance>();
		}
		if(holdBalance == null){
			holdBalance = new HoldBalance();
			holdBalance.setActivationPeriod("");
			holdBalance.setCurrency("");
			holdBalance.setPoints("");
		}
		if(additionalInfo == null){
			additionalInfo = new AdditionalInfo();
			additionalInfo.setOtpEnabled("");
			/*OTPRedeemLimit otpRedeemLimit = new OTPRedeemLimit();
			otpRedeemLimit.setAmount("");
			otpRedeemLimit.setValueCode("");*/
			List<OTPRedeemLimit> otpRedeemLimitlist = new ArrayList<OTPRedeemLimit>();
			//otpRedeemLimitlist.add(otpRedeemLimit);
			additionalInfo.setOtpRedeemLimit(otpRedeemLimitlist);
			additionalInfo.setPointsEquivalentCurrency("");
			additionalInfo.setTotalRedeemableCurrency("");
		}
		if(matchedCustomers == null){
			matchedCustomers = new ArrayList<MatchedCustomer>();
		}
		
		redemptionResponse.setMembership(accountResponse);
		redemptionResponse.setBalances(balances);
		redemptionResponse.setHoldBalance(holdBalance);
		redemptionResponse.setAdditionalInfo(additionalInfo);
		redemptionResponse.setMatchedCustomers(matchedCustomers);
		redemptionResponse.setStatus(status);
		return redemptionResponse;
	}
	
	
	private LoyaltyCards findLoyaltyCardByUserId(String cardNumber, Long userId) throws Exception {
		
		LoyaltyCardsDao loyaltyCardDao = (LoyaltyCardsDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_CARDS_DAO);
		return loyaltyCardDao.findByCardNoAnduserId(cardNumber, userId);
		
	}
	
	private List<LoyaltyProgram> findActiveProgramList(Long userId) throws Exception {
		
		LoyaltyProgramDao loyaltyProgramDao = (LoyaltyProgramDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_PROGRAM_DAO);
		return loyaltyProgramDao.findProgramsBy(userId, OCConstants.LOYALTY_PROGRAM_STATUS_ACTIVE, OCConstants.LOYALTY_MEMBERSHIP_TYPE_CARD);
	}
	
	private List<LoyaltyCardSet> findActiveCardSets(String programIdStr) throws Exception {
		
		LoyaltyCardSetDao loyaltyCardSetDao = (LoyaltyCardSetDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_CARD_SET_DAO);
		return loyaltyCardSetDao.findByProgramIdStr(programIdStr, OCConstants.LOYALTY_CARDSET_STATUS_ACTIVE);
	}
	
	private ContactsLoyalty findContactLoyalty(String cardNumber, Long programId, Long userId) throws Exception {
		
		ContactsLoyaltyDao loyaltyDao = (ContactsLoyaltyDao)ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_LOYALTY_DAO);
		return loyaltyDao.findByProgram(cardNumber, programId, userId);
	}
	
	private LoyaltyCards findCardByCardNumber(String programIdStr, String cardSetIdStr, String cardNumber, Long userId) throws Exception {
		LoyaltyCardsDao loyaltyCardsDao = (LoyaltyCardsDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_CARDS_DAO);
		return loyaltyCardsDao.findCardByProgram(programIdStr, cardSetIdStr, cardNumber, userId);
	}
	
	private LoyaltyProgramTier getLoyaltyTier(Long tierId) throws Exception{
		
		LoyaltyProgramTierDao tierDao = (LoyaltyProgramTierDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_PROGRAM_TIER_DAO);
		return tierDao.getTierById(tierId);
		
	}
	
	private ContactsLoyalty findContactLoyaltyByMobile(String mobile, Long userId) throws Exception {
		
		ContactsLoyaltyDao loyaltyDao = (ContactsLoyaltyDao)ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_LOYALTY_DAO);
		return loyaltyDao.findMembershipByPhone(Long.valueOf(mobile), OCConstants.LOYALTY_MEMBERSHIP_TYPE_MOBILE, userId);
	}
	
	private LoyaltyProgram findMobileBasedProgram(Long userId) throws Exception {
		
		LoyaltyProgramDao loyaltyProgramDao = (LoyaltyProgramDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_PROGRAM_DAO);
		return loyaltyProgramDao.findMobileBasedProgram(userId);
	}
	
	private Contacts findCustomerByCid(Long cid, Long userId) throws Exception {
		
		ContactsDao contactDao = (ContactsDao)ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_DAO);
		return contactDao.findById(cid);
	}
	
	private Customer prepareCustomer(Contacts contact) throws Exception {
		
		Customer customer = new Customer();
		
		customer.setAddressLine1(contact.getAddressOne() == null ? "" : contact.getAddressOne());
		customer.setAddressLine2(contact.getAddressTwo() == null ? "" : contact.getAddressTwo());
		customer.setAnniversary(contact.getAnniversary() == null ? "" : ""+contact.getAnniversary());
		customer.setBirthday(contact.getBirthDay() == null ? "" : ""+contact.getBirthDay());
		customer.setCity(contact.getCity() == null ? "" : ""+contact.getCity());
		customer.setCountry(contact.getCountry() == null ? "" : ""+contact.getCountry());
		customer.setCustomerId(contact.getExternalId() == null ? "" : ""+contact.getExternalId());
		customer.setEmailAddress(contact.getEmailId() == null ? "" : ""+contact.getEmailId());
		customer.setFirstName(contact.getFirstName() == null ? "" : ""+contact.getFirstName());
		customer.setGender(contact.getGender() == null ? "" : ""+contact.getGender());
		customer.setLastName(contact.getLastName() == null ? "" : ""+contact.getLastName());
		customer.setPhone(contact.getMobilePhone() == null ? "" : ""+contact.getMobilePhone());
		customer.setPostal(contact.getZip() == null ? "" : ""+contact.getZip());
		customer.setState(contact.getState() == null ? "" : ""+contact.getState());
		
		return customer;
		
	}
	
	private LoyaltyProgram findActiveMobileProgram(Long programId) throws Exception {
		
	 LoyaltyProgramDao loyaltyProgramDao = (LoyaltyProgramDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_PROGRAM_DAO);
	 return loyaltyProgramDao.findById(programId);
	}
	
	private List<ContactsLoyalty> findEnrollListByMobile(String mobile, Long userId) throws Exception {
		
		ContactsLoyaltyDao loyaltyDao = (ContactsLoyaltyDao)ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_LOYALTY_DAO);
		return loyaltyDao.findMembershipByMobile(mobile, userId);
	}
	
	
	private Contacts prepareContactFromJsonData(Customer customerInfo, Long userId) throws Exception {
		
		logger.info("Entered prepareContactFromJsonData method >>>>>");
		Contacts inputContact = new Contacts();
		if(customerInfo.getCustomerId() != null && customerInfo.getCustomerId().trim().length() > 0) {
			inputContact.setExternalId(customerInfo.getCustomerId().trim());
			logger.info("customer id: "+customerInfo.getCustomerId());
		}
		if(customerInfo.getEmailAddress() != null && customerInfo.getEmailAddress().trim().length() > 0) {
			inputContact.setEmailId(customerInfo.getEmailAddress().trim());
			logger.info("email id: "+customerInfo.getEmailAddress());
		}
		if(customerInfo.getFirstName() != null && customerInfo.getFirstName().trim().length() > 0) {
			inputContact.setFirstName(customerInfo.getFirstName().trim());
		}
		if(customerInfo.getLastName() != null && customerInfo.getLastName().trim().length() > 0) {
			inputContact.setLastName(customerInfo.getLastName().trim());
		}
		if(customerInfo.getAddressLine1() != null && customerInfo.getAddressLine1().trim().length() > 0) {
			inputContact.setAddressOne(customerInfo.getAddressLine1().trim());
		}
		if(customerInfo.getAddressLine2() != null && customerInfo.getAddressLine2().trim().length() > 0) {
			inputContact.setAddressTwo(customerInfo.getAddressLine2().trim());
		}
		if(customerInfo.getCity() != null && customerInfo.getCity().trim().length() > 0) {
			inputContact.setCity(customerInfo.getCity().trim());
		}
		if(customerInfo.getState() != null && customerInfo.getState().trim().length() > 0) {
			inputContact.setState(customerInfo.getState().trim());
		}
		if(customerInfo.getCountry() != null && customerInfo.getCountry().trim().length() > 0) {
			inputContact.setCountry(customerInfo.getCountry().trim());
		}
		if(customerInfo.getPostal() != null && customerInfo.getPostal().trim().length() > 0) {
			inputContact.setZip(customerInfo.getPostal().trim());
		}
		if(customerInfo.getBirthday() != null && customerInfo.getBirthday().trim().length() > 0) {
			Calendar cal = MyCalendar.dateString2Calendar(customerInfo.getBirthday().trim());
			inputContact.setBirthDay(cal);
		}
		if(customerInfo.getAnniversary() != null && customerInfo.getAnniversary().trim().length() > 0) {
			Calendar cal = MyCalendar.dateString2Calendar(customerInfo.getAnniversary().trim());
			inputContact.setAnniversary(cal);
		}
		if(customerInfo.getGender() != null && customerInfo.getGender().trim().length() > 0) {
			inputContact.setGender(customerInfo.getGender().trim());
		}	
		if( customerInfo.getPhone() != null && customerInfo.getPhone().trim().length() > 0) {
			inputContact.setMobilePhone(customerInfo.getPhone());
			logger.info("phone= "+customerInfo.getPhone());
		}
		logger.info("Exited prepareContactFromJsonData method >>>>>");
		return inputContact;
	}
	
	private List<Contacts> findOCContact(Contacts jsonContact, Long userId) throws Exception {
		//logger.info("Entered findOCContact method >>>>");
		POSMappingDao posMappingDao = (POSMappingDao)ServiceLocator.getInstance().getDAOByName(OCConstants.POSMAPPING_DAO);
		ContactsDao contactsDao = (ContactsDao)ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_DAO);
		TreeMap<String, List<String>> priorMap =  Utility.getPriorityMap(userId, Constants.POS_MAPPING_TYPE_CONTACTS, posMappingDao);
		List<Contacts> dbContact = contactsDao.findMatchedContactListByUniqPriority(priorMap, jsonContact, userId);
		//logger.info("Exited findOCContact method >>>>");
		return dbContact;
	}
	
	private List<MatchedCustomer> prepareMatchedCustomers(List<ContactsLoyalty> enrollList) throws Exception {
		
		Contacts contact = null;
		ContactsDao contactsDao = (ContactsDao)ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_DAO);
		List<MatchedCustomer> matchedCustList = new ArrayList<MatchedCustomer>();
		MatchedCustomer matchedCustomer = null;
		
		for(ContactsLoyalty loyalty : enrollList){
			if(loyalty.getContact() != null && loyalty.getContact().getContactId() != null){
				contact = contactsDao.findById(loyalty.getContact().getContactId());
				if(contact != null){
					matchedCustomer = new MatchedCustomer();
					matchedCustomer.setMembershipNumber(""+loyalty.getCardNumber());
					matchedCustomer.setFirstName(contact.getFirstName() == null ? "" : contact.getFirstName().trim());
					matchedCustomer.setLastName(contact.getLastName() == null ? "" : contact.getLastName().trim());
					matchedCustList.add(matchedCustomer);
				}
			}
		}
		
		return matchedCustList;
		
	}
	
	private List<MatchedCustomer> prepareSuccessMatchedCustomers(List<ContactsLoyalty> enrollList) throws Exception {
		
		Contacts contact = null;
		ContactsDao contactsDao = (ContactsDao)ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_DAO);
		List<MatchedCustomer> matchedCustList = new ArrayList<MatchedCustomer>();
		MatchedCustomer matchedCustomer = null;
		
		for(ContactsLoyalty loyalty : enrollList){
			if(loyalty.getContact() != null && loyalty.getContact().getContactId() != null){
				contact = contactsDao.findById(loyalty.getContact().getContactId());
				if(contact != null){
					matchedCustomer = new MatchedCustomer();
					matchedCustomer.setMembershipNumber(""+loyalty.getCardNumber());
					matchedCustomer.setFirstName(contact.getFirstName() == null ? "" : contact.getFirstName().trim());
					matchedCustomer.setLastName(contact.getLastName() == null ? "" : contact.getLastName().trim());
					matchedCustomer.setCustomerId(contact.getExternalId() == null ? "" : contact.getExternalId().trim());
					matchedCustomer.setEmailAddress(contact.getEmailId() == null ? "" : contact.getEmailId().trim());
					matchedCustomer.setPhone(contact.getMobilePhone() == null ? "" : contact.getMobilePhone().trim());
					matchedCustList.add(matchedCustomer);
				}
			}
		}
		
		return matchedCustList;
		
	}
	
	private List<Balance> prepareBalancesObject(ContactsLoyalty loyalty, String pointsDifference, 
			String amountDifference, String giftDifference) throws Exception{
		
		List<Balance> balancesList = null;
		Balance pointBalances = null;
		Balance amountBalances = null;
		Balance giftBalances = null;
		
		balancesList = new ArrayList<Balance>();
		
		pointBalances = new Balance();
		pointBalances.setType(OCConstants.LOYALTY_TYPE_REWARD);
		pointBalances.setValueCode(OCConstants.LOYALTY_TYPE_POINTS);
		pointBalances.setAmount(loyalty.getLoyaltyBalance() == null ? "" : ""+loyalty.getLoyaltyBalance().intValue());
		pointBalances.setDifference(pointsDifference);
		
		amountBalances = new Balance();
		amountBalances.setType(OCConstants.LOYALTY_TYPE_REWARD);
		amountBalances.setValueCode(OCConstants.LOYALTY_TYPE_CURRENCY);
		//amountBalances.setAmount(loyalty.getGiftcardBalance() == null ? "" : ""+loyalty.getGiftcardBalance());
		//amountBalances.setDifference(amountDifference);
		if(loyalty.getGiftcardBalance() == null){
			amountBalances.setAmount("");
		}
		else{
			double value = new BigDecimal(loyalty.getGiftcardBalance()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
			amountBalances.setAmount(""+value);
		}
		if(amountDifference == null || amountDifference == ""){
			amountBalances.setDifference("");
		}
		else{
			double value = new BigDecimal(Double.valueOf(amountDifference)).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
			amountBalances.setDifference(""+value);
		}
		
		giftBalances = new Balance();
		giftBalances.setType(OCConstants.LOYALTY_TYPE_GIFT);
		giftBalances.setValueCode(OCConstants.LOYALTY_TYPE_CURRENCY);
		if(loyalty.getGiftBalance() == null){
			giftBalances.setAmount("");
		}
		else{
			double value = new BigDecimal(loyalty.getGiftBalance()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
			giftBalances.setAmount(""+value);
		}
		if(giftDifference == null || giftDifference == ""){
			giftBalances.setDifference("");
		}
		else{
			double value = new BigDecimal(Double.valueOf(giftDifference)).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
			giftBalances.setDifference(""+value);
		}
		//giftBalances.setAmount(loyalty.getGiftBalance() == null ? "" : ""+loyalty.getGiftBalance());
		//giftBalances.setDifference(giftDifference);
		
		balancesList.add(pointBalances);
		balancesList.add(amountBalances);
		balancesList.add(giftBalances);
		
		return balancesList;
	}
	
	private Status validatePromocodeExclusion(LoyaltyRedemptionRequest redemptionRequest, 
			LoyaltyProgramExclusion loyaltyExclusion, Long orgId) throws Exception {
		
		
		Status status = null;
		
		if(redemptionRequest.getDiscounts().getAppliedPromotion().equalsIgnoreCase("Y") && loyaltyExclusion.getRedemptionWithPromoFlag() == 'Y'){
			
			List<Promotion> promoList = redemptionRequest.getDiscounts().getPromotions();
			List<String> promoNames = null;
			
				if(loyaltyExclusion.getRedemptionPromoIdStr() != null){
					
					String[] promoIdArr = loyaltyExclusion.getRedemptionPromoIdStr().split(";=;");
					if(promoIdArr.length == 1 && promoIdArr[0].equalsIgnoreCase(OCConstants.LOYALTY_PROMO_EXCLUSION_ALL)){
						promoNames = findPromoNames(orgId, null);
					}
					else{
						String promoIdStr = "";
						for(String promoId : promoIdArr){
								promoIdStr += (promoIdStr == "") ? "'"+promoId+"'" : ",'"+promoId+"'";
								logger.info("promoIdStr = "+promoIdStr);
						}
						promoNames = findPromoNames(orgId, promoIdStr);
					}
					
					if(promoNames != null){
						for(Promotion promotion : promoList){
							if(promoNames.contains(promotion.getName())){
								status = new Status("101406", PropertyUtil.getErrorMessage(101406, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
								return status;
							}
						}//for
					}//if
				}
		}
		return status;
	}
	
	
	private List<String> findPromoNames(Long orgId, String promoIdStr) throws Exception {
		
		try{
			
			CouponsDao couponsDao = (CouponsDao)ServiceLocator.getInstance().getDAOByName(OCConstants.COUPONS_DAO);
			return couponsDao.findCouponNames(orgId, promoIdStr);
			
		}catch(Exception e){
			logger.error("Exception while getting coupons...", e);
		}
		return null;
	}
	
	private Status checkPromoEmpty(Discounts discount) throws Exception {
	
		Status status = null;
		
		if(discount == null){
			status = new Status("111527", PropertyUtil.getErrorMessage(111527, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return status;
		}
		if(discount.getAppliedPromotion() == null ){
			status = new Status("111527", PropertyUtil.getErrorMessage(111527, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return status;
		}
		if(discount.getAppliedPromotion().equalsIgnoreCase("NA") || discount.getAppliedPromotion().equalsIgnoreCase("N")){
			return null;
		}
		
		if(discount.getAppliedPromotion().equalsIgnoreCase("Y")){
			
		}
		else if(discount.getAppliedPromotion().equalsIgnoreCase("N")){
			
		}
		else if(discount.getAppliedPromotion().equalsIgnoreCase("NA")){
			
		}
		else{
			status = new Status("111527", PropertyUtil.getErrorMessage(111527, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return status;
		}
		
		if(discount.getAppliedPromotion().equalsIgnoreCase("Y") && discount.getPromotions() == null){
			status = new Status("111527", PropertyUtil.getErrorMessage(111527, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return status;
		}
		
		
		
		List<Promotion> promoList = discount.getPromotions();
		
		Iterator<Promotion> iterPromo = promoList.iterator();
		Promotion promo = null;
		while(iterPromo.hasNext()){
			promo = iterPromo.next();
			if(promo != null && (promo.getName() == null || promo.getName().trim().isEmpty())){
				status = new Status("111527", PropertyUtil.getErrorMessage(111527, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				return status;
			}
		}
		
		return status;
	}
	
	private Status validateStoreNumberExclusion(LoyaltyRedemptionRequest redemptionRequest, 
			LoyaltyProgramExclusion loyaltyExclusion) throws Exception {
		
		Status status = null;
		if(loyaltyExclusion.getStoreNumberStr() != null && !loyaltyExclusion.getStoreNumberStr().trim().isEmpty()){
			String[] storeNumberArr = loyaltyExclusion.getStoreNumberStr().split(";=;");
			for(String storeNo : storeNumberArr){
				if(redemptionRequest.getHeader().getStoreNumber().trim().equals(storeNo.trim())){
					status = new Status("111532", PropertyUtil.getErrorMessage(111532, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					return status;
				}
			}
		}
		
		return status;
	}
	
	private Status applyLoyaltyExclusions(LoyaltyRedemptionRequest redemptionRequest, 
			LoyaltyProgramExclusion loyaltyExclusion, Long orgId) throws Exception {
		
		Status status = null;
		// handle store number
		status = validateStoreNumberExclusion(redemptionRequest, loyaltyExclusion);
		if(status != null && OCConstants.JSON_RESPONSE_FAILURE_MESSAGE.equals(status.getStatus())){
			return status;
		}
		
		// handle promo codes
		status = validatePromocodeExclusion(redemptionRequest, loyaltyExclusion, orgId);
		if(status != null && OCConstants.JSON_RESPONSE_FAILURE_MESSAGE.equals(status.getStatus())){
			return status;
		}
		
		
		return status;
	}
	
	
	private LoyaltyProgramExclusion getLoyaltyExclusion(Long programId) throws Exception {
		try{
		LoyaltyProgramExclusionDao exclusionDao = (LoyaltyProgramExclusionDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_PROGRAM_EXCLUSION_DAO);
		return exclusionDao.getExlusionByProgId(programId);
		}catch(Exception e){
			logger.error("Exception in getting loyalty exclusion ..", e);
		}
		return null;
	}
	
	
	private LoyaltyTransactionChild createSuccessfulTransaction(LoyaltyRedemptionRequest redemptionRequest, ContactsLoyalty loyalty,
			Long orgId, Long transactionId, String amountType, String pointsDiff, String amountDiff, String giftDiff,
			boolean withOtpCode, long conversionAmt, String description ){
		
		LoyaltyTransactionChild transaction = null;
		try{
			
			transaction = new LoyaltyTransactionChild();
			transaction.setTransactionId(transactionId);
			
			transaction.setMembershipNumber(""+loyalty.getCardNumber());
			transaction.setMembershipType(loyalty.getMembershipType());
			
			transaction.setCreatedDate(Calendar.getInstance());
			transaction.setPointsDifference(pointsDiff);
			transaction.setAmountDifference(amountDiff);
			transaction.setGiftDifference(giftDiff);
			
			if(redemptionRequest.getAmount().getEnteredValue() != null && !redemptionRequest.getAmount().getEnteredValue().trim().isEmpty()){
				transaction.setEnteredAmount(Double.valueOf(redemptionRequest.getAmount().getEnteredValue()));
				transaction.setEnteredAmountType(amountType);
			}
			
			transaction.setUserId(loyalty.getUserId());
			transaction.setOrgId(orgId);
			
			transaction.setAmountBalance(loyalty.getGiftcardBalance());
			transaction.setPointsBalance(loyalty.getLoyaltyBalance());
			transaction.setGiftBalance(loyalty.getGiftBalance());
			
			transaction.setProgramId(loyalty.getProgramId());
			transaction.setTierId(loyalty.getProgramTierId());
			transaction.setCardSetId(loyalty.getCardSetId());
			
			transaction.setTransactionType(OCConstants.LOYALTY_TRANS_TYPE_REDEMPTION);
			transaction.setStoreNumber(redemptionRequest.getHeader().getStoreNumber());
			transaction.setEmployeeId(redemptionRequest.getHeader().getEmployeeId()!=null && !redemptionRequest.getHeader().getEmployeeId().trim().isEmpty() ? redemptionRequest.getHeader().getEmployeeId().trim():null);
			transaction.setTerminalId(redemptionRequest.getHeader().getTerminalId()!=null && !redemptionRequest.getHeader().getTerminalId().trim().isEmpty() ? redemptionRequest.getHeader().getTerminalId().trim():null);
			transaction.setDocSID(redemptionRequest.getHeader().getDocSID());
			transaction.setSourceType(OCConstants.LOYALTY_TRANSACTION_SOURCE_TYPE_STORE);
			if(withOtpCode){
				transaction.setDescription2("Redeemed with OTP code : "+redemptionRequest.getOtpCode());
			}
			transaction.setDescription(description.isEmpty() ? null : description);
			transaction.setConversionAmt(conversionAmt);
			transaction.setContactId(loyalty.getContact() == null ? null : loyalty.getContact().getContactId());
//			transaction.setEventTriggStatus(OCConstants.LOYALTY_TRANSACTION_STATUS_NEW);
			transaction.setLoyaltyId(loyalty.getLoyaltyId());
			
			LoyaltyTransactionChildDao loyaltyTransChildDao = (LoyaltyTransactionChildDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_TRANSACTION_CHILD_DAO);
			loyaltyTransChildDao.saveOrUpdate(transaction);
			
			//Event Trigger sending part
			EventTriggerEventsObservable eventTriggerEventsObservable = (EventTriggerEventsObservable) ServiceLocator.getInstance().getBeanByName(OCConstants.EVENT_TRIGGER_EVENTS_OBSERVABLE);
			EventTriggerEventsObserver eventTriggerEventsObserver = (EventTriggerEventsObserver) ServiceLocator.getInstance().getBeanByName(OCConstants.EVENT_TRIGGER_EVENTS_OBSERVER);
			eventTriggerEventsObservable.addObserver(eventTriggerEventsObserver);
			EventTriggerDao eventTriggerDao  = (EventTriggerDao)ServiceLocator.getInstance().getDAOByName(OCConstants.EVENT_TRIGGER_DAO);
			List<EventTrigger> etList = eventTriggerDao.findAllETByUserAndType(transaction.getUserId(),Constants.ET_TYPE_ON_LOYALTY_REDEMPTION);
			List<EventTrigger> giftEtList = eventTriggerDao.findAllETByUserAndType(transaction.getUserId(),Constants.ET_TYPE_ON_GIFT_REDEMPTION);
			if(etList != null) {
				eventTriggerEventsObservable.notifyToObserver(etList, transaction.getTransChildId(), transaction.getTransChildId(), 
																transaction.getUserId(), OCConstants.LOYALTY_REDEMPTION,Constants.ET_TYPE_ON_LOYALTY_REDEMPTION);
			}
			if(giftEtList != null) {
				eventTriggerEventsObservable.notifyToObserver(giftEtList, transaction.getTransChildId(), transaction.getTransChildId(), 
																transaction.getUserId(), OCConstants.LOYALTY_GIFT_REDEMPTION,Constants.ET_TYPE_ON_GIFT_REDEMPTION);
			}
		}catch(Exception e){
			logger.error("Exception while logging enroll transaction...",e);
		}
		return transaction;
	}
	
	
	private LoyaltyRedemptionResponse performRedemption(LoyaltyRedemptionRequest redemptionRequest, ContactsLoyalty contactsLoyalty, 
			ResponseHeader responseHeader, LoyaltyCards loyaltyCard, Users user, LoyaltyProgram loyaltyProgram) throws Exception {
		
		logger.info(" Entered perform Redemption method...");
		LoyaltyRedemptionResponse redemptionResponse = null;
		Status status = null;
		
		if(redemptionRequest.getAmount().getEnteredValue() == null || redemptionRequest.getAmount().getEnteredValue().trim().isEmpty()
				|| Double.valueOf(redemptionRequest.getAmount().getEnteredValue().trim()).intValue() <= 0){
			status = new Status("111529", PropertyUtil.getErrorMessage(111529, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
			return redemptionResponse;
		}
		
		boolean withOtpCode = false;
		
		//TODO additional check for otp min limit...
		boolean checkOtp = false;
		if(redemptionRequest.getAmount().getValueCode().equals(OCConstants.LOYALTY_TYPE_CURRENCY) && loyaltyProgram.getRedemptionOTPFlag() == 'Y'){
			checkOtp = true;
			Double enteredValue = Double.valueOf(redemptionRequest.getAmount().getEnteredValue().trim());
			if(loyaltyProgram.getOtpLimitAmt() != null && loyaltyProgram.getOtpLimitAmt().doubleValue() > 0 
					&& enteredValue < loyaltyProgram.getOtpLimitAmt().doubleValue()){//TODO condition check
				checkOtp = false;
			}
		}
		
		if(checkOtp){
			logger.info("OTP flag is enabled...");
			if(redemptionRequest.getOtpCode() == null || redemptionRequest.getOtpCode().trim().isEmpty()){
				String message = "Error 111582: Authentication by OTP required to complete redemption of amount "
					+redemptionRequest.getAmount().getEnteredValue()+ " on this purchase. "
					+ "Please try again with OTP code sent to customer's mobile#.";
				
				status = new Status("111582", message, OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
				return redemptionResponse;
			}
			else{
				
				String phone = redemptionRequest.getCustomer().getPhone();
				Long mblNum = null;
				phone = phone.trim();
				phone = Utility.phoneParse(phone, user!=null ? user.getUserOrganization() : null );
				if(phone != null) {
					if(!phone.startsWith(user.getCountryCarrier().toString()) && 
							(phone.length() >= user.getUserOrganization().getMinNumberOfDigits()
							&& phone.length() <= user.getUserOrganization().getMaxNumberOfDigits())) {
						phone = user.getCountryCarrier().toString()+phone;
					}
					try{
						mblNum = Long.parseLong(phone);
					}catch (Exception e) {
						status = new Status("111552", PropertyUtil.getErrorMessage(111552, OCConstants.ERROR_LOYALTY_FLAG)+" "+redemptionRequest.getCustomer().getPhone().trim()+".", OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
						redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
						return redemptionResponse;
					}
				}
				else{
					status = new Status("111552", PropertyUtil.getErrorMessage(111552, OCConstants.ERROR_LOYALTY_FLAG)+" "+redemptionRequest.getCustomer().getPhone().trim()+".", OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
					return redemptionResponse;
				}
				
				OTPGeneratedCodes otpgeneratedcode = findOTPCodeByPhone(phone, 
						user.getUserId(), OCConstants.OTP_GENERATED_CODE_STATUS_ACTIVE);
				
				if(otpgeneratedcode != null){
					Calendar currCal = Calendar.getInstance();
					Calendar createdDate = otpgeneratedcode.getCreatedDate();
					long currtime = currCal.getTimeInMillis()/1000;
					long createdtime = createdDate.getTimeInMillis()/1000;
					long timeDiff = currtime - createdtime;
					long duration = 3*60*60; 
					
					if(otpgeneratedcode.getOtpCode() != null && !otpgeneratedcode.getOtpCode().trim().isEmpty() &&
							!otpgeneratedcode.getOtpCode().equals(redemptionRequest.getOtpCode().trim())) {
						logger.info("OTP code invalid : "+redemptionRequest.getOtpCode().trim());
						
						status = new Status("111549", PropertyUtil.getErrorMessage(111549, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
						redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
						return redemptionResponse;
					}
					else if(timeDiff > duration ){
						logger.info("OTP code expired : "+otpgeneratedcode.getOtpCode());
						otpgeneratedcode.setStatus(OCConstants.OTP_GENERATED_CODE_STATUS_EXPIRED);
						saveOTPgeneratedcode(otpgeneratedcode);
						
						status = new Status("111549", PropertyUtil.getErrorMessage(111549, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
						redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
						return redemptionResponse;
					}
					withOtpCode = true;
				}
				else{
					status = new Status("111549", PropertyUtil.getErrorMessage(111549, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
					return redemptionResponse;
				}
				
			}
			
		}
		
		LoyaltyProgramTier tier = null;
		if(contactsLoyalty.getProgramTierId() != null)
			tier = getLoyaltyTier(contactsLoyalty.getProgramTierId());
		
		LoyaltyProgram program = findLoyaltyProgramByProgramId(contactsLoyalty.getProgramId(), contactsLoyalty.getUserId());
		
		String pointsDiff = "";
		String amountDiff = "";
		String giftDiff = "";
		String entAmountType = "";
		String description = "";
		long conversionAmt = 0;
		
		
		
		if(redemptionRequest.getAmount().getValueCode().equals(OCConstants.LOYALTY_TYPE_POINTS)){
			
			LoyaltyProgramExclusion loyaltyExclusion = getLoyaltyExclusion(loyaltyProgram.getProgramId());
			if(loyaltyExclusion != null){
				status = applyLoyaltyExclusions(redemptionRequest,loyaltyExclusion, user.getUserOrganization().getUserOrgId());
				if(status != null && OCConstants.JSON_RESPONSE_FAILURE_MESSAGE.equals(status.getStatus())){
					redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null,status);
					return redemptionResponse;
				}
			}

			Double enteredValue = Double.valueOf(redemptionRequest.getAmount().getEnteredValue());
			int enteredPoints = enteredValue != null ? enteredValue.intValue():0;
			
			if(contactsLoyalty.getLoyaltyBalance() == null 
					|| !(contactsLoyalty.getLoyaltyBalance().intValue() >= enteredPoints)){
				
				if(contactsLoyalty.getLoyaltyBalance() == null || contactsLoyalty.getLoyaltyBalance().intValue() <= 0){
					status = new Status("111530", PropertyUtil.getErrorMessage(111530, OCConstants.ERROR_LOYALTY_FLAG),
							OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				}
				else{
					status = new Status("111530", PropertyUtil.getErrorMessage(111530, OCConstants.ERROR_LOYALTY_FLAG)+
							" "+contactsLoyalty.getLoyaltyBalance(), 
							OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				}
				
				List<Balance> balances = prepareBalancesObject(contactsLoyalty, "", "", "");
				MembershipResponse membershipResponse = prepareMembershipResponse(contactsLoyalty, tier, loyaltyProgram);
				
				
				HoldBalance holdBalance = new HoldBalance();
				holdBalance.setPoints(contactsLoyalty.getHoldPointsBalance()== null ? "" : ""+contactsLoyalty.getHoldPointsBalance().intValue());
				//holdBalance.setCurrency(contactsLoyalty.getHoldAmountBalance() == null ? "" : ""+contactsLoyalty.getHoldAmountBalance());
				if(contactsLoyalty.getHoldAmountBalance() == null){
					holdBalance.setCurrency("");
				}
				else{
					double value = new BigDecimal(contactsLoyalty.getHoldAmountBalance()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
					holdBalance.setCurrency(""+value);
				}
				
				if(tier != null &&  tier.getActivationFlag() == 'Y' && 
						((contactsLoyalty.getHoldPointsBalance() != null && contactsLoyalty.getHoldPointsBalance() > 0) ||
						(contactsLoyalty.getHoldAmountBalance() != null && contactsLoyalty.getHoldAmountBalance() > 0))){
					holdBalance.setActivationPeriod(tier.getPtsActiveDateValue()+" "+tier.getPtsActiveDateType());
				}
				else{
					holdBalance.setActivationPeriod("");
				}
				
				AdditionalInfo addinfo = new AdditionalInfo();
				if(program.getRedemptionOTPFlag() == OCConstants.FLAG_YES){
					addinfo.setOtpEnabled("True");
				}
				else{
					addinfo.setOtpEnabled("False");
				}
				if(program.getRedemptionOTPFlag() == OCConstants.FLAG_YES && program.getOtpLimitAmt()!=null){
				OTPRedeemLimit otpRedeemLimit = new OTPRedeemLimit();
				otpRedeemLimit.setAmount(""+program.getOtpLimitAmt());
				otpRedeemLimit.setValueCode(OCConstants.LOYALTY_TYPE_CURRENCY);
				List<OTPRedeemLimit> otpRedeemLimitlist = new ArrayList<OTPRedeemLimit>();
				otpRedeemLimitlist.add(otpRedeemLimit);
				addinfo.setOtpRedeemLimit(otpRedeemLimitlist);
				}else{
					List<OTPRedeemLimit> otpRedeemLimitlist = new ArrayList<OTPRedeemLimit>();
					addinfo.setOtpRedeemLimit(otpRedeemLimitlist);
					}
				
				addinfo.setPointsEquivalentCurrency("");
				addinfo.setTotalRedeemableCurrency("");
			
				redemptionResponse = prepareRedemptionResponse(responseHeader, membershipResponse, balances, holdBalance, addinfo, null, status);
				return redemptionResponse;
			}
			
			double loyaltyBal = contactsLoyalty.getLoyaltyBalance() - enteredPoints;
			contactsLoyalty.setLoyaltyBalance(loyaltyBal);
			
			double totLoyaltyRedeem = contactsLoyalty.getTotalLoyaltyRedemption() == null ? enteredPoints 
					: contactsLoyalty.getTotalLoyaltyRedemption()+enteredPoints;
			contactsLoyalty.setTotalLoyaltyRedemption(totLoyaltyRedeem);
			
			pointsDiff = "-"+enteredPoints;
			amountDiff = "";
			giftDiff = "";
			entAmountType = OCConstants.LOYALTY_TRANS_ENTEREDAMOUNT_TYPE_POINTSREDEEM;
			
			deductPointsFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), enteredPoints);
		}
		else if(redemptionRequest.getAmount().getValueCode().equals(OCConstants.LOYALTY_TYPE_CURRENCY)){
			
			logger.info("Currency Redemption ....");
//			LoyaltyProgramTier tier = null;
			Double enteredValue = Double.valueOf(redemptionRequest.getAmount().getEnteredValue().trim());
			double enteredAmt = enteredValue.doubleValue();
			entAmountType = OCConstants.LOYALTY_TRANS_ENTEREDAMOUNT_TYPE_AMOUNTREDEEM;
			
			double pointsAmount = 0.0;
			/*if(OCConstants.LOYALTY_CONVERSION_TYPE_ONDEMAND.equals(tier.getConversionType())){
				pointsAmount = calculatePointsAmount(contactsLoyalty, tier);
			}*/
			double loyaltyAmount = contactsLoyalty.getGiftcardBalance() == null ? 0.0 : contactsLoyalty.getGiftcardBalance();
			double giftAmount = contactsLoyalty.getGiftBalance() == null ? 0.0 : contactsLoyalty.getGiftBalance();
			double remBal = enteredAmt;
			
			logger.info("loyaltyAmount="+loyaltyAmount);
			logger.info("pointsAmount="+pointsAmount);
			logger.info("giftAmount="+giftAmount);
			
			if(OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_L.equals(contactsLoyalty.getRewardFlag())){
				
				LoyaltyProgramExclusion loyaltyExclusion = getLoyaltyExclusion(loyaltyProgram.getProgramId());
				if(loyaltyExclusion != null){
					status = applyLoyaltyExclusions(redemptionRequest,loyaltyExclusion, user.getUserOrganization().getUserOrgId());
					if(status != null && OCConstants.JSON_RESPONSE_FAILURE_MESSAGE.equals(status.getStatus())){
						redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null,status);
						return redemptionResponse;
					}
				}

				logger.info("Loyalty Reward flag ...."+contactsLoyalty.getRewardFlag());
				if(loyaltyAmount >= enteredAmt) {
					amountDiff = "-"+enteredAmt;
					double totAmountRedeem = contactsLoyalty.getTotalGiftcardRedemption() == null ? enteredAmt 
							: contactsLoyalty.getTotalGiftcardRedemption().doubleValue() + enteredAmt;
					logger.info("totAmountRedeem=="+totAmountRedeem);
					contactsLoyalty.setTotalGiftcardRedemption(totAmountRedeem);
					contactsLoyalty.setGiftcardBalance(contactsLoyalty.getGiftcardBalance().doubleValue() - enteredAmt);
					deductLoyaltyAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), enteredAmt);
				}
				else{
					if(tier == null){
						Long contactId = null;
						if(contactsLoyalty.getContact() != null && contactsLoyalty.getContact().getContactId() != null){
							contactId = contactsLoyalty.getContact().getContactId();
							tier = findTier(contactsLoyalty.getProgramId(), contactId, contactsLoyalty.getUserId(), contactsLoyalty);
							if(tier != null){
								contactsLoyalty.setProgramTierId(tier.getTierId());
								saveContactsLoyalty(contactsLoyalty);
							}
							else{
								status = new Status("111555", PropertyUtil.getErrorMessage(111555, OCConstants.ERROR_LOYALTY_FLAG), 
										OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
								redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
								return redemptionResponse;
							}
						}
					}

					if(OCConstants.LOYALTY_CONVERSION_TYPE_ONDEMAND.equals(tier.getConversionType())){
						pointsAmount = calculatePointsAmount(contactsLoyalty, tier);

						if((loyaltyAmount+pointsAmount) >= enteredAmt){
							logger.info("Entered amount is less than available amount...");

							if(remBal > 0 && loyaltyAmount > 0){

								double deductAmt = 0.0;
								if(remBal <= loyaltyAmount){
									deductAmt = remBal;
									contactsLoyalty.setGiftcardBalance(contactsLoyalty.getGiftcardBalance().doubleValue() - remBal);
									remBal = 0;
								}
								else{
									remBal = remBal - loyaltyAmount;
									deductAmt = loyaltyAmount;
									contactsLoyalty.setGiftcardBalance(0.0);
								}
								amountDiff = "-"+deductAmt;
								double totAmountRedeem = contactsLoyalty.getTotalGiftcardRedemption() == null ? deductAmt 
										: contactsLoyalty.getTotalGiftcardRedemption().doubleValue() + deductAmt;
								contactsLoyalty.setTotalGiftcardRedemption(totAmountRedeem);
								deductLoyaltyAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), deductAmt);
							}
							if(remBal > 0){

								//Deduct from points amount
								double pointsFactor = Math.floor(tier.getConvertFromPoints()/tier.getConvertToAmount());
								double pointsToBeDeducted = Math.round(pointsFactor * remBal);
								if(pointsToBeDeducted < contactsLoyalty.getLoyaltyBalance().longValue()){
									logger.info("INVALID CONDITION --- REDEMPTION --- POINTS TO BE DEDUCTED...");
								}
								contactsLoyalty.setLoyaltyBalance(contactsLoyalty.getLoyaltyBalance().longValue() - pointsToBeDeducted);
								contactsLoyalty.setTotalLoyaltyRedemption(contactsLoyalty.getTotalLoyaltyRedemption() == null ? pointsToBeDeducted 
										: contactsLoyalty.getTotalLoyaltyRedemption().longValue() + pointsToBeDeducted);
								deductPointsFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), (long)pointsToBeDeducted);

								pointsDiff = "-"+pointsToBeDeducted;
								description = tier.getConvertFromPoints()+" Points -> "+tier.getConvertToAmount();
								conversionAmt = (long) remBal;
							}

						}
						else{
							return prepareFailureResponse(contactsLoyalty, tier, program, pointsAmount, responseHeader);
						}
					}
					else{
						return prepareFailureResponse(contactsLoyalty, tier, program, pointsAmount, responseHeader);
					}
				}
			}
			else if(OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_GL.equals(contactsLoyalty.getRewardFlag())){
				logger.info("Loyalty Reward flag ...."+contactsLoyalty.getRewardFlag());
				boolean isExcluded = false;
				LoyaltyProgramExclusion loyaltyExclusion = getLoyaltyExclusion(loyaltyProgram.getProgramId());
				if(loyaltyExclusion != null){
					status = applyLoyaltyExclusions(redemptionRequest,loyaltyExclusion, user.getUserOrganization().getUserOrgId());
					if(status != null && OCConstants.JSON_RESPONSE_FAILURE_MESSAGE.equals(status.getStatus())){
						isExcluded = true;
						//redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null,status);
						//return redemptionResponse;
					}
				}
				
				if(OCConstants.LOYALTY_TYPE_REWARD.equalsIgnoreCase(redemptionRequest.getAmount().getType())){
					if(isExcluded){
						if(giftAmount >= enteredAmt){
							status = null ;
							giftDiff = "-"+enteredAmt;
							double totAmountRedeem = contactsLoyalty.getTotalGiftRedemption() == null ? enteredAmt 
									: contactsLoyalty.getTotalGiftRedemption().doubleValue() + enteredAmt;
							contactsLoyalty.setTotalGiftRedemption(totAmountRedeem);
							contactsLoyalty.setGiftBalance(contactsLoyalty.getGiftBalance().doubleValue() - enteredAmt);
							deductGiftAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), enteredAmt);
						}
						else{
							redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null,status);
							return redemptionResponse;
						}
					}
					else if(loyaltyAmount >= enteredAmt){
						amountDiff = "-"+enteredAmt;
						double totAmountRedeem = contactsLoyalty.getTotalGiftcardRedemption() == null ? enteredAmt 
								: contactsLoyalty.getTotalGiftcardRedemption().doubleValue() + enteredAmt;
						contactsLoyalty.setTotalGiftcardRedemption(totAmountRedeem);
						contactsLoyalty.setGiftcardBalance(contactsLoyalty.getGiftcardBalance().doubleValue() - enteredAmt);
						deductLoyaltyAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), enteredAmt);
					}
					else{
						if(tier == null){
							Long contactId = null;
							if(contactsLoyalty.getContact() != null && contactsLoyalty.getContact().getContactId() != null){
								contactId = contactsLoyalty.getContact().getContactId();
								tier = findTier(contactsLoyalty.getProgramId(), contactId, contactsLoyalty.getUserId(), contactsLoyalty);
								if(tier != null){
									contactsLoyalty.setProgramTierId(tier.getTierId());
									saveContactsLoyalty(contactsLoyalty);
								}
								else{
									status = new Status("111555", PropertyUtil.getErrorMessage(111555, OCConstants.ERROR_LOYALTY_FLAG), 
											OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
									redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
									return redemptionResponse;
								}
							}
						}
						if(OCConstants.LOYALTY_CONVERSION_TYPE_ONDEMAND.equals(tier.getConversionType())){
							logger.info("On Demand... pointsAmount before conv...."+pointsAmount);
							pointsAmount = calculatePointsAmount(contactsLoyalty, tier);
							logger.info("On Demand... pointsAmount after conv...."+pointsAmount);
						}
						if(loyaltyAmount + pointsAmount >= enteredAmt){
							if(remBal > 0 && loyaltyAmount > 0){
								//Deduct from loyalty bal
								remBal = remBal - loyaltyAmount;
								amountDiff = "-"+loyaltyAmount;
								double totAmountRedeem = contactsLoyalty.getTotalGiftcardRedemption() == null ? loyaltyAmount 
										: contactsLoyalty.getTotalGiftcardRedemption().doubleValue() + loyaltyAmount;
								contactsLoyalty.setTotalGiftcardRedemption(totAmountRedeem);
								contactsLoyalty.setGiftcardBalance(contactsLoyalty.getGiftcardBalance().doubleValue() - loyaltyAmount);
								deductLoyaltyAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), loyaltyAmount);
							}
							if(remBal > 0 && pointsAmount > 0){
								//Deduct from points amount
								double pointsFactor = Math.floor(tier.getConvertFromPoints()/tier.getConvertToAmount());
								double pointsToBeDeducted = Math.round(pointsFactor * remBal);
								if(pointsToBeDeducted < contactsLoyalty.getLoyaltyBalance().longValue()){
									logger.info("INVALID CONDITION --- REDEMPTION --- POINTS TO BE DEDUCTED...");
								}
								pointsDiff = "-"+pointsToBeDeducted;
								contactsLoyalty.setLoyaltyBalance(contactsLoyalty.getLoyaltyBalance().longValue() - pointsToBeDeducted);
								contactsLoyalty.setTotalLoyaltyRedemption(contactsLoyalty.getTotalLoyaltyRedemption() == null ? pointsToBeDeducted 
										: contactsLoyalty.getTotalLoyaltyRedemption().longValue() + pointsToBeDeducted);
								deductPointsFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), (long)pointsToBeDeducted);
								description = tier.getConvertFromPoints()+" Points -> "+tier.getConvertToAmount();
								conversionAmt = (long) remBal;
							}
						}
						else if(loyaltyAmount + pointsAmount + giftAmount >= enteredAmt){
							if(remBal > 0 && loyaltyAmount > 0){
								//Deduct from loyalty bal
								remBal = remBal - loyaltyAmount;
								amountDiff = "-"+loyaltyAmount;
								double totAmountRedeem = contactsLoyalty.getTotalGiftcardRedemption() == null ? loyaltyAmount 
										: contactsLoyalty.getTotalGiftcardRedemption().doubleValue() + loyaltyAmount;
								contactsLoyalty.setTotalGiftcardRedemption(totAmountRedeem);
								contactsLoyalty.setGiftcardBalance(contactsLoyalty.getGiftcardBalance().doubleValue() - loyaltyAmount);
								deductLoyaltyAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), loyaltyAmount);
							}
							if(remBal > 0 && pointsAmount > 0){
								//Deduct from points amount
								remBal = remBal - pointsAmount;
								double pointsFactor = Math.floor(tier.getConvertFromPoints()/tier.getConvertToAmount());
								double pointsToBeDeducted = Math.round(pointsFactor * pointsAmount);
								if(pointsToBeDeducted < contactsLoyalty.getLoyaltyBalance().longValue()){
									logger.info("INVALID CONDITION --- REDEMPTION --- POINTS TO BE DEDUCTED...");
								}
								pointsDiff = "-"+pointsToBeDeducted;
								contactsLoyalty.setLoyaltyBalance(contactsLoyalty.getLoyaltyBalance().longValue() - pointsToBeDeducted);
								contactsLoyalty.setTotalLoyaltyRedemption(contactsLoyalty.getTotalLoyaltyRedemption() == null ? pointsToBeDeducted 
										: contactsLoyalty.getTotalLoyaltyRedemption().longValue() + pointsToBeDeducted);
								deductPointsFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), (long)pointsToBeDeducted);
								description = tier.getConvertFromPoints()+" Points -> "+tier.getConvertToAmount();
								conversionAmt = (long) remBal;
							}
							if(remBal > 0 && giftAmount > 0){
								//Deduct from gift amount
								giftDiff = "-"+remBal;
								double totAmountRedeem = contactsLoyalty.getTotalGiftRedemption() == null ? remBal 
										: contactsLoyalty.getTotalGiftRedemption().doubleValue() + remBal;
								contactsLoyalty.setTotalGiftRedemption(totAmountRedeem);
								contactsLoyalty.setGiftBalance(contactsLoyalty.getGiftBalance().doubleValue() - remBal);
								deductGiftAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), remBal);
							}
						}
						else{
							return prepareFailureResponse(contactsLoyalty, tier, program, pointsAmount, responseHeader);
						}
					}
				}
				else if(OCConstants.LOYALTY_TYPE_GIFT.equalsIgnoreCase(redemptionRequest.getAmount().getType())){
					if(giftAmount >= enteredAmt){
						status = null ;
						giftDiff = "-"+enteredAmt;
						double totAmountRedeem = contactsLoyalty.getTotalGiftRedemption() == null ? enteredAmt 
								: contactsLoyalty.getTotalGiftRedemption().doubleValue() + enteredAmt;
						contactsLoyalty.setTotalGiftRedemption(totAmountRedeem);
						contactsLoyalty.setGiftBalance(contactsLoyalty.getGiftBalance().doubleValue() - enteredAmt);
						deductGiftAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), enteredAmt);
					}
					else if(isExcluded){
						status = null;
						return prepareFailureResponse(contactsLoyalty, tier, program, pointsAmount, responseHeader);
//						redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null,status);
//						return redemptionResponse;
					}
					else if(giftAmount + loyaltyAmount >= enteredAmt){
						if(remBal > 0 && giftAmount > 0){
							//Deduct from gift bal
							remBal = remBal - giftAmount;
							giftDiff = "-"+giftAmount;
							double totAmountRedeem = contactsLoyalty.getTotalGiftRedemption() == null ? giftAmount 
									: contactsLoyalty.getTotalGiftRedemption().doubleValue() + giftAmount;
							contactsLoyalty.setTotalGiftRedemption(totAmountRedeem);
							contactsLoyalty.setGiftBalance(0.0);
							deductGiftAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), giftAmount);
						}
						if(remBal > 0 && loyaltyAmount > 0){
							//Deduct from loyalty bal
							amountDiff = "-"+remBal;
							double totAmountRedeem = contactsLoyalty.getTotalGiftcardRedemption() == null ? remBal 
									: contactsLoyalty.getTotalGiftcardRedemption().doubleValue() + remBal;
							contactsLoyalty.setTotalGiftcardRedemption(totAmountRedeem);
							contactsLoyalty.setGiftcardBalance(contactsLoyalty.getGiftcardBalance().doubleValue() - remBal);
							deductLoyaltyAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), remBal);
						}
					}
					else{
						if(tier == null){
							Long contactId = null;
							if(contactsLoyalty.getContact() != null && contactsLoyalty.getContact().getContactId() != null){
								contactId = contactsLoyalty.getContact().getContactId();
								tier = findTier(contactsLoyalty.getProgramId(), contactId, contactsLoyalty.getUserId(), contactsLoyalty);
								if(tier != null){
									contactsLoyalty.setProgramTierId(tier.getTierId());
									saveContactsLoyalty(contactsLoyalty);
								}
								else{
									status = new Status("111555", PropertyUtil.getErrorMessage(111555, OCConstants.ERROR_LOYALTY_FLAG), 
											OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
									redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
									return redemptionResponse;
								}
							}
						}
						if(OCConstants.LOYALTY_CONVERSION_TYPE_ONDEMAND.equals(tier.getConversionType())){
							logger.info("On Demand... pointsAmount before conv...."+pointsAmount);
							pointsAmount = calculatePointsAmount(contactsLoyalty, tier);
							logger.info("On Demand... pointsAmount after conv...."+pointsAmount);
						}
						if(giftAmount + loyaltyAmount + pointsAmount >= enteredAmt){
							if(remBal > 0 && giftAmount > 0){
								//Deduct from gift bal
								remBal = remBal - giftAmount;
								giftDiff = "-"+giftAmount;
								double totAmountRedeem = contactsLoyalty.getTotalGiftRedemption() == null ? giftAmount 
										: contactsLoyalty.getTotalGiftRedemption().doubleValue() + giftAmount;
								contactsLoyalty.setTotalGiftRedemption(totAmountRedeem);
								contactsLoyalty.setGiftBalance(0.0);
								deductGiftAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), giftAmount);
							}
							if(remBal > 0 && loyaltyAmount > 0){
								//Deduct from loyalty bal
								remBal = remBal - loyaltyAmount;
								amountDiff = "-"+loyaltyAmount;
								double totAmountRedeem = contactsLoyalty.getTotalGiftcardRedemption() == null ? loyaltyAmount 
										: contactsLoyalty.getTotalGiftcardRedemption().doubleValue() + loyaltyAmount;
								contactsLoyalty.setTotalGiftcardRedemption(totAmountRedeem);
								contactsLoyalty.setGiftcardBalance(contactsLoyalty.getGiftcardBalance().doubleValue() - loyaltyAmount);
								deductLoyaltyAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), loyaltyAmount);
							}
							if(remBal > 0 && pointsAmount > 0){
								//Deduct from points amount
								double pointsFactor = Math.floor(tier.getConvertFromPoints()/tier.getConvertToAmount());
								double pointsToBeDeducted = Math.round(pointsFactor * remBal);
								if(pointsToBeDeducted < contactsLoyalty.getLoyaltyBalance().longValue()){
									logger.info("INVALID CONDITION --- REDEMPTION --- POINTS TO BE DEDUCTED...");
								}
								pointsDiff = "-"+pointsToBeDeducted;
								contactsLoyalty.setLoyaltyBalance(contactsLoyalty.getLoyaltyBalance() - pointsToBeDeducted);
								contactsLoyalty.setTotalLoyaltyRedemption(contactsLoyalty.getTotalLoyaltyRedemption() == null ? pointsToBeDeducted 
										: contactsLoyalty.getTotalLoyaltyRedemption().longValue() + pointsToBeDeducted);
								deductPointsFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), (long)pointsToBeDeducted);
								description = tier.getConvertFromPoints()+" Points -> "+tier.getConvertToAmount();
								conversionAmt = (long) remBal;
							}
						}
						else{
							return prepareFailureResponse(contactsLoyalty, tier, program, pointsAmount, responseHeader);
						}
					}
				}
				else{
					MembershipResponse membershipResponse = prepareMembershipResponse(contactsLoyalty, tier, loyaltyProgram);
					List<Balance> balances = prepareBalancesObject(contactsLoyalty, "", "", "");
					List<ContactsLoyalty> loyaltyList = new ArrayList<ContactsLoyalty>();
					loyaltyList.add(contactsLoyalty);
					List<MatchedCustomer> custList = prepareSuccessMatchedCustomers(loyaltyList);
					
					HoldBalance holdBalance = new HoldBalance();
					holdBalance.setPoints(contactsLoyalty.getHoldPointsBalance()== null ? "" : ""+contactsLoyalty.getHoldPointsBalance().intValue());
					//holdBalance.setCurrency(contactsLoyalty.getHoldAmountBalance() == null ? "" : ""+contactsLoyalty.getHoldAmountBalance());
					if(contactsLoyalty.getHoldAmountBalance() == null){
						holdBalance.setCurrency("");
					}
					else{
						double value = new BigDecimal(contactsLoyalty.getHoldAmountBalance()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
						holdBalance.setCurrency(""+value);
					}
					
					if(tier != null &&  tier.getActivationFlag() == 'Y' && 
							((contactsLoyalty.getHoldPointsBalance() != null && contactsLoyalty.getHoldPointsBalance() > 0) ||
							(contactsLoyalty.getHoldAmountBalance() != null && contactsLoyalty.getHoldAmountBalance() > 0))){
						holdBalance.setActivationPeriod(tier.getPtsActiveDateValue()+" "+tier.getPtsActiveDateType());
					}
					else{
						holdBalance.setActivationPeriod("");
					}
					
					status = new Status("111560", PropertyUtil.getErrorMessage(111560, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					redemptionResponse = prepareRedemptionResponse(responseHeader, membershipResponse, balances, holdBalance, null, custList, status);
					return redemptionResponse;
				}
				
			/************************************************************************************************************************/
				/*if(giftAmount == 0.0 && loyaltyAmount >= enteredAmt) {
					if(isExcluded){
						redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null,status);
						return redemptionResponse;
					}
					else{
						amountDiff = "-"+enteredAmt;
						double totAmountRedeem = contactsLoyalty.getTotalGiftcardRedemption() == null ? enteredAmt 
								: contactsLoyalty.getTotalGiftcardRedemption() + enteredAmt;
						contactsLoyalty.setTotalGiftcardRedemption(totAmountRedeem);
						contactsLoyalty.setGiftcardBalance(contactsLoyalty.getGiftcardBalance() - enteredAmt);
						deductLoyaltyAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), enteredAmt);
					}
				}
				else if(loyaltyAmount == 0 && giftAmount >= enteredAmt){
					status = null ;
					giftDiff = "-"+enteredAmt;
					double totAmountRedeem = contactsLoyalty.getTotalGiftRedemption() == null ? enteredAmt 
							: contactsLoyalty.getTotalGiftRedemption() + enteredAmt;
					contactsLoyalty.setTotalGiftRedemption(totAmountRedeem);
					contactsLoyalty.setGiftBalance(contactsLoyalty.getGiftBalance() - enteredAmt);
					deductGiftAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), enteredAmt);
				}
				else{
					if(isExcluded){
						status = null;
						if(giftAmount >= enteredAmt) {
							giftDiff = "-"+enteredAmt;
							double totAmountRedeem = contactsLoyalty.getTotalGiftRedemption() == null ? enteredAmt 
									: contactsLoyalty.getTotalGiftRedemption() + enteredAmt;
							contactsLoyalty.setTotalGiftRedemption(totAmountRedeem);
							contactsLoyalty.setGiftBalance(contactsLoyalty.getGiftBalance() - enteredAmt);
							deductGiftAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), enteredAmt);
						}
						else{
							status = new Status("111530", PropertyUtil.getErrorMessage(111530, OCConstants.ERROR_LOYALTY_FLAG),
									OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
							List<Balance> balances = prepareBalancesObject(contactsLoyalty, "", "", "");
							MembershipResponse membershipResponse = prepareMembershipResponse(contactsLoyalty, tier, loyaltyProgram);
							
							redemptionResponse = prepareRedemptionResponse(responseHeader, membershipResponse, balances, null, null, null, status);
							return redemptionResponse;
						}
					}
					else {
						if(contactsLoyalty.getProgramTierId() != null)
							tier = getLoyaltyTier(contactsLoyalty.getProgramTierId());
						else{
							Long contactId = null;
							if(contactsLoyalty.getContact() != null && contactsLoyalty.getContact().getContactId() != null){
								contactId = contactsLoyalty.getContact().getContactId();
								tier = findTier(contactsLoyalty.getProgramId(), contactId, contactsLoyalty.getUserId(), contactsLoyalty);
								if(tier != null){
									contactsLoyalty.setProgramTierId(tier.getTierId());
									saveContactsLoyalty(contactsLoyalty);
								}
								else{
									status = new Status("111555", PropertyUtil.getErrorMessage(111555, OCConstants.ERROR_LOYALTY_FLAG), 
											OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
									redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
									return redemptionResponse;
								}
							}
						}
						if(OCConstants.LOYALTY_CONVERSION_TYPE_ONDEMAND.equals(tier.getConversionType())){
							logger.info("On Demand... pointsAmount before conv...."+pointsAmount);
							pointsAmount = calculatePointsAmount(contactsLoyalty, tier);
							logger.info("On Demand... pointsAmount after conv...."+pointsAmount);
						}
						if((loyaltyAmount+pointsAmount+giftAmount) < enteredAmt){
							return prepareFailureResponse(contactsLoyalty, tier, program, pointsAmount, responseHeader);
						}
						else{
							String expType = findExpiryType(program, tier);
							if(OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_L.equals(expType)){
								//double remBal = enteredAmt;
								if(remBal > 0 && loyaltyAmount > 0){
									double deductAmt = 0.0;
									if(remBal <= loyaltyAmount){
										deductAmt = remBal;
										contactsLoyalty.setGiftcardBalance(contactsLoyalty.getGiftcardBalance() - remBal);
										remBal = 0;
									}
									else{
										remBal = remBal - loyaltyAmount;
										deductAmt = loyaltyAmount;
										contactsLoyalty.setGiftcardBalance(0.0);
									}
									amountDiff = "-"+deductAmt;
									double totAmountRedeem = contactsLoyalty.getTotalGiftcardRedemption() == null ? deductAmt 
											: contactsLoyalty.getTotalGiftcardRedemption() + deductAmt;
									contactsLoyalty.setTotalGiftcardRedemption(totAmountRedeem);
									deductLoyaltyAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), deductAmt);
								}
								if(remBal > 0 && pointsAmount > 0){
									//Deduct from points amount
									double pointsFactor = Math.floor(tier.getConvertFromPoints()/tier.getConvertToAmount());
									double pointsToBeDeducted = Math.round(pointsFactor * remBal);
									if(pointsToBeDeducted < contactsLoyalty.getLoyaltyBalance()){
										logger.info("INVALID CONDITION --- REDEMPTION --- POINTS TO BE DEDUCTED...");
									}
									pointsDiff = "-"+pointsToBeDeducted;
									contactsLoyalty.setLoyaltyBalance(contactsLoyalty.getLoyaltyBalance() - pointsToBeDeducted);
									contactsLoyalty.setTotalLoyaltyRedemption(contactsLoyalty.getTotalLoyaltyRedemption() == null ? pointsToBeDeducted 
											: contactsLoyalty.getTotalLoyaltyRedemption() + pointsToBeDeducted);
									deductPointsFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), (long)pointsToBeDeducted);
								}
								if(remBal > 0 && giftAmount > 0){
									//Deduct from gift bal
									double giftBal = contactsLoyalty.getGiftBalance() - remBal;
									contactsLoyalty.setGiftBalance(giftBal);
									giftDiff = "-"+remBal;
									double totGiftRedeem = contactsLoyalty.getTotalGiftRedemption() == null ? remBal 
											: contactsLoyalty.getTotalGiftRedemption() + remBal;
									contactsLoyalty.setTotalGiftRedemption(totGiftRedeem);
									deductGiftAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), remBal);
								}
							}
							else if(OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_G.equals(expType)){
								//double remBal = enteredAmt;
								if(remBal > 0 && giftAmount > 0){
									//Deduct from gift bal
									double deductAmt = 0.0;
									if(remBal <= giftAmount){
										deductAmt = remBal;
										contactsLoyalty.setGiftBalance(contactsLoyalty.getGiftBalance() - remBal);
										remBal = 0;
									}
									else{
										remBal = remBal - giftAmount;
										deductAmt = giftAmount;
										contactsLoyalty.setGiftBalance(0.0);
									}
									giftDiff = "-"+deductAmt;
									double totAmountRedeem = contactsLoyalty.getTotalGiftRedemption() == null ? deductAmt 
											: contactsLoyalty.getTotalGiftRedemption() + deductAmt;
									contactsLoyalty.setTotalGiftRedemption(totAmountRedeem);
									deductGiftAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), deductAmt);
								}
								if(remBal > 0 && loyaltyAmount > 0){
									double deductAmt = 0.0;
									if(remBal <= loyaltyAmount){
										deductAmt = remBal;
										contactsLoyalty.setGiftcardBalance(contactsLoyalty.getGiftcardBalance() - remBal);
										remBal = 0;
									}
									else{
										remBal = remBal - loyaltyAmount;
										deductAmt = loyaltyAmount;
										contactsLoyalty.setGiftcardBalance(0.0);
									}
									amountDiff = "-"+deductAmt;
									double totAmountRedeem = contactsLoyalty.getTotalGiftcardRedemption() == null ? deductAmt 
											: contactsLoyalty.getTotalGiftcardRedemption() + deductAmt;
									contactsLoyalty.setTotalGiftcardRedemption(totAmountRedeem);
									deductLoyaltyAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), deductAmt);
								}
								if(remBal > 0 && pointsAmount > 0){
									//Deduct from points amount
									double pointsFactor = Math.floor(tier.getConvertFromPoints()/tier.getConvertToAmount());
									double pointsToBeDeducted = Math.round(pointsFactor * remBal);
									if(pointsToBeDeducted < contactsLoyalty.getLoyaltyBalance()){
										logger.info("INVALID CONDITION --- REDEMPTION --- POINTS TO BE DEDUCTED...");
									}
									pointsDiff = "-"+pointsToBeDeducted;
									contactsLoyalty.setLoyaltyBalance(contactsLoyalty.getLoyaltyBalance() - pointsToBeDeducted);
									contactsLoyalty.setTotalLoyaltyRedemption(contactsLoyalty.getTotalLoyaltyRedemption() == null ? pointsToBeDeducted 
											: contactsLoyalty.getTotalLoyaltyRedemption() + pointsToBeDeducted);
									deductPointsFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), (long)pointsToBeDeducted);
								}
							}// G - else
						}
					}
				}*/
			/************************************************************************************************************************/
			} // GL - else if
			else if(OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_G.equals(contactsLoyalty.getRewardFlag())){
				if(giftAmount >= enteredAmt) {
					giftDiff = "-"+enteredAmt;
					double totAmountRedeem = contactsLoyalty.getTotalGiftRedemption() == null ? enteredAmt 
							: contactsLoyalty.getTotalGiftRedemption() + enteredAmt;
					contactsLoyalty.setTotalGiftRedemption(totAmountRedeem);
					contactsLoyalty.setGiftBalance(contactsLoyalty.getGiftBalance() - enteredAmt);
					deductGiftAmtFromExpiryTable(contactsLoyalty, contactsLoyalty.getUserId(), enteredAmt);
				}
				else{
					/*status = new Status("111530", PropertyUtil.getErrorMessage(111530, OCConstants.ERROR_LOYALTY_FLAG),
							OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					List<Balance> balances = prepareBalancesObject(contactsLoyalty, "", "", "");
					MembershipResponse membershipResponse = prepareMembershipResponse(contactsLoyalty, tier, loyaltyProgram);
					
					redemptionResponse = prepareRedemptionResponse(responseHeader, membershipResponse, balances, null, null, null, status);*/
					return prepareFailureResponse(contactsLoyalty, null, program, pointsAmount, responseHeader);
//					return redemptionResponse;
					
				}
				
			}
		}
		
		saveContactsLoyalty(contactsLoyalty);
		
		List<Balance> balances = prepareBalancesObject(contactsLoyalty, pointsDiff, amountDiff, giftDiff);
		
		MembershipResponse membershipResponse = prepareMembershipResponse(contactsLoyalty, tier, program);
		
		HoldBalance holdBalance = new HoldBalance();
		holdBalance.setPoints(contactsLoyalty.getHoldPointsBalance()== null ? "" : ""+contactsLoyalty.getHoldPointsBalance().intValue());
		holdBalance.setCurrency(contactsLoyalty.getHoldAmountBalance() == null ? "" : ""+contactsLoyalty.getHoldAmountBalance());
		
		if(tier != null && tier.getActivationFlag() == 'Y' && 
				((contactsLoyalty.getHoldPointsBalance() != null && contactsLoyalty.getHoldPointsBalance() > 0) ||
				(contactsLoyalty.getHoldAmountBalance() != null && contactsLoyalty.getHoldAmountBalance() > 0))){
			holdBalance.setActivationPeriod(tier.getPtsActiveDateValue()+" "+tier.getPtsActiveDateType());
		}
		else {
			holdBalance.setActivationPeriod("");
		}
		
		createSuccessfulTransaction(redemptionRequest, contactsLoyalty, user.getUserOrganization().getUserOrgId(), 
				Long.valueOf(responseHeader.getTransactionId()), entAmountType, pointsDiff, amountDiff, giftDiff, withOtpCode, conversionAmt, description);
		
		List<ContactsLoyalty> loyaltyList = new ArrayList<ContactsLoyalty>();
		loyaltyList.add(contactsLoyalty);
		List<MatchedCustomer> custList = prepareSuccessMatchedCustomers(loyaltyList);
				
		status = new Status("0", "Redemption was successful.", OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE);
		redemptionResponse = prepareRedemptionResponse(responseHeader, membershipResponse, balances, holdBalance, null, custList, status);
		return redemptionResponse;
	}
	
	
	private LoyaltyRedemptionResponse cardBasedRedemption(LoyaltyRedemptionRequest redemptionRequest, LoyaltyCards loyaltyCard, 
			ResponseHeader responseHeader, Users user) throws Exception {
		
		LoyaltyRedemptionResponse redemptionResponse = null;
		Status status = null;
		
		LoyaltyProgram loyaltyProgram = null;
		
		loyaltyProgram = findLoyaltyProgramByProgramId(loyaltyCard.getProgramId(), user.getUserId());
		if(loyaltyProgram == null || !OCConstants.LOYALTY_PROGRAM_STATUS_ACTIVE.equals(loyaltyProgram.getStatus())){
			status = new Status("111505", PropertyUtil.getErrorMessage(111505, OCConstants.ERROR_LOYALTY_FLAG)+" "+loyaltyCard.getCardNumber()+".", OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
			return redemptionResponse;
		}
		
		LoyaltyCardSet loyaltyCardSet = null;
		loyaltyCardSet = findLoyaltyCardSetByCardsetId(loyaltyCard.getCardSetId(), user.getUserId());
		if(loyaltyCardSet == null || !OCConstants.LOYALTY_CARDSET_STATUS_ACTIVE.equals(loyaltyCardSet.getStatus())){
			status = new Status("111505", PropertyUtil.getErrorMessage(111505, OCConstants.ERROR_LOYALTY_FLAG)+" "+loyaltyCard.getCardNumber()+".", OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
			return redemptionResponse;
		}
		
		ContactsLoyalty contactsLoyalty = findContactLoyalty(loyaltyCard.getCardNumber(), loyaltyProgram.getProgramId(), user.getUserId());
	
		if(contactsLoyalty.getMembershipStatus().equals(OCConstants.LOYALTY_MEMBERSHIP_STATUS_EXPIRED) ||
				contactsLoyalty.getMembershipStatus().equals(OCConstants.LOYALTY_MEMBERSHIP_STATUS_SUSPENDED) ||
				contactsLoyalty.getMembershipStatus().equals(OCConstants.LOYALTY_MEMBERSHIP_STATUS_CLOSED)){
			LoyaltyProgramTier tier = null;
			
			List<Balance> balances = null;
			
			List<ContactsLoyalty> loyaltyList = new ArrayList<ContactsLoyalty>();
			
			
			if(contactsLoyalty.getMembershipStatus().equals(OCConstants.LOYALTY_MEMBERSHIP_STATUS_EXPIRED)){
				loyaltyList.add(contactsLoyalty);
				if(contactsLoyalty.getProgramTierId() != null)	tier = getLoyaltyTier(contactsLoyalty.getProgramTierId());
				
				balances = prepareBalancesObject(contactsLoyalty, "", "", "");
				String message = PropertyUtil.getErrorMessage(111517, OCConstants.ERROR_LOYALTY_FLAG)+" "+contactsLoyalty.getCardNumber()+".";
				status = new Status("111517", message, OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			}
			else if(contactsLoyalty.getMembershipStatus().equals(OCConstants.LOYALTY_MEMBERSHIP_STATUS_SUSPENDED)){
				loyaltyList.add(contactsLoyalty);
				if(contactsLoyalty.getProgramTierId() != null) tier = getLoyaltyTier(contactsLoyalty.getProgramTierId());
				
				balances = prepareBalancesObject(contactsLoyalty, "", "", "");
				String message = PropertyUtil.getErrorMessage(111539, OCConstants.ERROR_LOYALTY_FLAG)+" "+contactsLoyalty.getCardNumber()+".";
				status = new Status("111539", message, OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			}else if( contactsLoyalty.getMembershipStatus().equals(OCConstants.LOYALTY_MEMBERSHIP_STATUS_CLOSED)){
				ContactsLoyalty destLoyalty = getDestMembershipIfAny(contactsLoyalty);
				String maskedNum = Constants.STRING_NILL;
				if(destLoyalty != null) {
					loyaltyList.add(destLoyalty);
					contactsLoyalty = destLoyalty;
					tier = getLoyaltyTier(contactsLoyalty.getProgramTierId());
					balances = prepareBalancesObject(destLoyalty, "", "", "");
					maskedNum = Utility.maskNumber(destLoyalty.getCardNumber()+Constants.STRING_NILL);
					
				}
				String message = PropertyUtil.getErrorMessage(111578, OCConstants.ERROR_LOYALTY_FLAG)+maskedNum+".";
				
				status = new Status("111578", message, OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			}
			
			List<MatchedCustomer> custList = prepareSuccessMatchedCustomers(loyaltyList);
			MembershipResponse membershipResponse = prepareMembershipResponse(contactsLoyalty, tier, loyaltyProgram);
			redemptionResponse = prepareRedemptionResponse(responseHeader, membershipResponse, balances, null, null, custList, status);
			return redemptionResponse;
		}
		
		if(OCConstants.LOYALTY_CARD_STATUS_ENROLLED.equalsIgnoreCase(loyaltyCard.getStatus())){
			
			status = checkPromoEmpty(redemptionRequest.getDiscounts());
			if(status != null && OCConstants.JSON_RESPONSE_FAILURE_MESSAGE.equals(status.getStatus())){
				redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
				return redemptionResponse;
			}
			
			/*LoyaltyProgramExclusion loyaltyExclusion = getLoyaltyExclusion(loyaltyProgram.getProgramId());
			if(loyaltyExclusion != null){
				status = applyLoyaltyExclusions(redemptionRequest,loyaltyExclusion, user.getUserOrganization().getUserOrgId());
				if(status != null && OCConstants.JSON_RESPONSE_FAILURE_MESSAGE.equals(status.getStatus())){
					redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null,status);
					return redemptionResponse;
				}
			}*/
			
			return performRedemption(redemptionRequest, contactsLoyalty, responseHeader, loyaltyCard, user, loyaltyProgram);
			
		}
		else if(OCConstants.LOYALTY_CARD_STATUS_ACTIVATED.equalsIgnoreCase(loyaltyCard.getStatus())){
			
			//return GiftCardBasedRedemption(loyaltyProgram, redemptionRequest, responseHeader, contactsLoyalty, loyaltyCard, user);
			return performRedemption(redemptionRequest, contactsLoyalty, responseHeader, loyaltyCard, user, loyaltyProgram);
		}
		else{
								
			status = new Status("111537", PropertyUtil.getErrorMessage(111537, OCConstants.ERROR_LOYALTY_FLAG)+" "+loyaltyCard.getCardNumber()+".", OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
			return redemptionResponse;
		}
		
	}
	private ContactsLoyalty getDestMembershipIfAny(ContactsLoyalty contactLoyalty) throws Exception{
		ContactsLoyaltyDao loyaltyDao = (ContactsLoyaltyDao)ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_LOYALTY_DAO);
		if(contactLoyalty.getMembershipStatus().equalsIgnoreCase(OCConstants.LOYALTY_MEMBERSHIP_STATUS_CLOSED) && contactLoyalty.getTransferedTo() != null) {
			return loyaltyDao.findAllByLoyaltyId(contactLoyalty.getTransferedTo());
			
		}
		
		return null;
	}
	/*private LoyaltyRedemptionResponse GiftCardBasedRedemption1(LoyaltyProgram loyaltyProgram, LoyaltyRedemptionRequest redemptionRequest,
			ResponseHeader responseHeader, ContactsLoyalty contactsLoyalty, LoyaltyCards loyaltyCard, Users user) throws Exception {
		
		LoyaltyRedemptionResponse redemptionResponse = null;
		Status status = null;
		
		if(loyaltyProgram.getRedemptionOTPFlag() == 'Y'){
			if(redemptionRequest.getOtpCode() != null && redemptionRequest.getOtpCode().trim().isEmpty()){
				String message = "Authentication by OTP required to complete redemption of amount "
					+redemptionRequest.getAmount().getEnteredValue()+ " on this purchase. "
					+ "Please try again with OTP code sent to customer's mobile# ";
				
				status = new Status("111528", message, OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
				return redemptionResponse;
			}
			else{
				//TODO Maintain OTP related tables 
			}
			
		}
		
		if(redemptionRequest.getAmount().getEnteredValue() == null || redemptionRequest.getAmount().getEnteredValue().trim().isEmpty()){
			status = new Status("111529", PropertyUtil.getErrorMessage(111529, OCConstants.ERROR_LOYALTY_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
			return redemptionResponse;
		}
		
		LoyaltyProgramTier tier = getLoyaltyTier(contactsLoyalty.getProgramTierId());
		
		//applyConversionOndemandRule(contactsLoyalty, tier);
		
		//boolean valueCodePoints = false;
		
		if(redemptionRequest.getAmount().getValueCode().equals(OCConstants.LOYALTY_TYPE_POINTS)){
			
			if(contactsLoyalty.getLoyaltyBalance() == null 
					|| !(contactsLoyalty.getLoyaltyBalance().doubleValue() >= Double.valueOf(redemptionRequest.getAmount().getEnteredValue()))){
				
				if(contactsLoyalty.getLoyaltyBalance() == null || contactsLoyalty.getLoyaltyBalance().doubleValue() <= 0){
					status = new Status("111530", "Redemption could not be completed due to insufficient card-balance",
							OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				}
				else{
					status = new Status("111530", PropertyUtil.getErrorMessage(111530, OCConstants.ERROR_LOYALTY_FLAG)+
							" "+contactsLoyalty.getLoyaltyBalance(), 
							OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				}
				
				redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
				return redemptionResponse;
			}
			
			contactsLoyalty.setLoyaltyBalance(contactsLoyalty.getLoyaltyBalance() - Double.valueOf(redemptionRequest.getAmount().getEnteredValue()));
			contactsLoyalty.setTotalLoyaltyRedemption(contactsLoyalty.getTotalLoyaltyRedemption() == null ? Double.valueOf(redemptionRequest.getAmount().getEnteredValue()) 
					: contactsLoyalty.getTotalLoyaltyRedemption()+Double.valueOf(redemptionRequest.getAmount().getEnteredValue()));
			
			//valueCodePoints = true;
			
		}
		else if(redemptionRequest.getAmount().getValueCode().equals(OCConstants.LOYALTY_TYPE_CURRENCY)){
			
			if(contactsLoyalty.getGiftcardBalance() == null 
					|| !(contactsLoyalty.getGiftcardBalance().doubleValue() >= Double.valueOf(redemptionRequest.getAmount().getEnteredValue()))){
				
				if(contactsLoyalty.getGiftcardBalance() == null || contactsLoyalty.getGiftcardBalance().doubleValue() <= 0){
					status = new Status("111530", "Redemption could not be completed due to insufficient card-balance",
							OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				}
				else{
					status = new Status("111530", PropertyUtil.getErrorMessage(111530, OCConstants.ERROR_LOYALTY_FLAG)+
							" "+contactsLoyalty.getGiftcardBalance(), 
							OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				}
				
				redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
				return redemptionResponse;
			}
			
			contactsLoyalty.setGiftcardBalance(contactsLoyalty.getGiftcardBalance() - Double.valueOf(redemptionRequest.getAmount().getEnteredValue()));
			contactsLoyalty.setTotalGiftcardRedemption(contactsLoyalty.getTotalGiftcardRedemption() == null ? Double.valueOf(redemptionRequest.getAmount().getEnteredValue()) 
					: contactsLoyalty.getTotalGiftcardRedemption()+Double.valueOf(redemptionRequest.getAmount().getEnteredValue()));
			//valueCodePoints = false;
		}
		
		List<Balance> balances = prepareBalancesObject(contactsLoyalty, "", "", "");
		
		MembershipResponse membershipResponse = prepareMembershipResponse(contactsLoyalty, tier, loyaltyProgram);
		
		HoldBalance holdBalance = new HoldBalance();
		holdBalance.setPoints(contactsLoyalty.getHoldPointsBalance()== null ? "" : ""+contactsLoyalty.getHoldPointsBalance().intValue());
		holdBalance.setCurrency(contactsLoyalty.getHoldAmountBalance() == null ? "" : ""+contactsLoyalty.getHoldAmountBalance());
		if(tier.getActivationFlag() == 'Y'){
			holdBalance.setActivationPeriod(tier.getPtsActiveDateValue()+" "+tier.getPtsActiveDateType());
		}
		
		status = new Status("0", "Redemption was successful.", OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE);
		redemptionResponse = prepareRedemptionResponse(responseHeader, membershipResponse, balances, holdBalance, null, null, status);
		
		saveContactsLoyalty(contactsLoyalty);
		//createSuccessfulTransaction(redemptionRequest, contactsLoyalty, loyaltyCard.getCardSetId(), user.getUserId(), user.getUserOrganization().getUserOrgId());
		
		return redemptionResponse;
		
	}*/
	
	private LoyaltyRedemptionResponse mobileBasedRedemption(LoyaltyRedemptionRequest redemptionRequest, ContactsLoyalty contactsLoyalty, Users user, 
			ResponseHeader responseHeader, LoyaltyCards loyaltyCard) throws Exception {
		
		Status status = null;
		LoyaltyRedemptionResponse redemptionResponse = null;
		
		LoyaltyProgram loyaltyProgram = findActiveMobileProgram(contactsLoyalty.getProgramId());
		
		if(loyaltyProgram == null || !OCConstants.LOYALTY_PROGRAM_STATUS_ACTIVE.equals(loyaltyProgram.getStatus())){
			status = new Status("111522", PropertyUtil.getErrorMessage(111522, OCConstants.ERROR_LOYALTY_FLAG)+" "+contactsLoyalty.getCardNumber()+".", OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
			return redemptionResponse;
		}
		
		if(contactsLoyalty.getMembershipStatus().equals(OCConstants.LOYALTY_MEMBERSHIP_STATUS_EXPIRED) ||
				contactsLoyalty.getMembershipStatus().equals(OCConstants.LOYALTY_MEMBERSHIP_STATUS_SUSPENDED) ){
			LoyaltyProgramTier tier = null;
			List<Balance> balances = null;
			
			List<ContactsLoyalty> loyaltyList = new ArrayList<ContactsLoyalty>();
			
			
			if(contactsLoyalty.getMembershipStatus().equals(OCConstants.LOYALTY_MEMBERSHIP_STATUS_EXPIRED)){
				loyaltyList.add(contactsLoyalty);
				if(contactsLoyalty.getProgramTierId() != null)
					tier = getLoyaltyTier(contactsLoyalty.getProgramTierId());
				 balances = prepareBalancesObject(contactsLoyalty, "", "", "");
				String message = PropertyUtil.getErrorMessage(111517, OCConstants.ERROR_LOYALTY_FLAG)+" "+contactsLoyalty.getCardNumber()+".";
				status = new Status("111517", message, OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			}
			else if(contactsLoyalty.getMembershipStatus().equals(OCConstants.LOYALTY_MEMBERSHIP_STATUS_SUSPENDED)){
				loyaltyList.add(contactsLoyalty);
				if(contactsLoyalty.getProgramTierId() != null)
					tier = getLoyaltyTier(contactsLoyalty.getProgramTierId());
				balances = prepareBalancesObject(contactsLoyalty, "", "", "");
				String message = PropertyUtil.getErrorMessage(111539, OCConstants.ERROR_LOYALTY_FLAG)+" "+contactsLoyalty.getCardNumber()+".";
				status = new Status("111539", message, OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			}/*else if( contactsLoyalty.getMembershipStatus().equals(OCConstants.LOYALTY_MEMBERSHIP_STATUS_CLOSED)){
				ContactsLoyalty destLoyalty = getDestMembershipIfAny(contactsLoyalty);
				loyaltyList.add(destLoyalty);
				if(destLoyalty.getProgramTierId() != null)
					tier = getLoyaltyTier(destLoyalty.getProgramTierId());
				balances = prepareBalancesObject(destLoyalty, "", "", "");
				String message = PropertyUtil.getErrorMessage(111578, OCConstants.ERROR_LOYALTY_FLAG)+ Utility.maskNumber(destLoyalty.getCardNumber()+"")+".";
				status = new Status("111578", message, OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			}*/
			 
			List<MatchedCustomer> custList = prepareSuccessMatchedCustomers(loyaltyList);
			MembershipResponse membershipResponse = prepareMembershipResponse(contactsLoyalty, tier, loyaltyProgram);
			redemptionResponse = prepareRedemptionResponse(responseHeader, membershipResponse, balances, null, null, custList, status);
			return redemptionResponse;
		}
		
		status = checkPromoEmpty(redemptionRequest.getDiscounts());
		if(status != null && OCConstants.JSON_RESPONSE_FAILURE_MESSAGE.equals(status.getStatus())){
			redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null, status);
			return redemptionResponse;
		}
		
		/*LoyaltyProgramExclusion loyaltyExclusion = getLoyaltyExclusion(loyaltyProgram.getProgramId());
		if(loyaltyExclusion != null){
			status = applyLoyaltyExclusions(redemptionRequest,loyaltyExclusion, user.getUserOrganization().getUserOrgId());
			if(status != null && OCConstants.JSON_RESPONSE_FAILURE_MESSAGE.equals(status.getStatus())){
				redemptionResponse = prepareRedemptionResponse(responseHeader, null, null, null, null, null,status);
				return redemptionResponse;
			}
		}*/
		
		return performRedemption(redemptionRequest, contactsLoyalty, responseHeader, loyaltyCard, user, loyaltyProgram);
		
	}
	
	private MembershipResponse prepareMembershipResponse(ContactsLoyalty contactsLoyalty, LoyaltyProgramTier tier, 
			LoyaltyProgram program) throws Exception {
	
		MembershipResponse membershipResponse = new MembershipResponse();
		
		if(OCConstants.LOYALTY_MEMBERSHIP_TYPE_CARD.equals(contactsLoyalty.getMembershipType())){
			membershipResponse.setCardNumber(""+contactsLoyalty.getCardNumber());
			membershipResponse.setCardPin(contactsLoyalty.getCardPin());
			membershipResponse.setPhoneNumber("");
		}
		else{
			membershipResponse.setCardNumber("");
			membershipResponse.setCardPin("");
			membershipResponse.setPhoneNumber(""+contactsLoyalty.getCardNumber());
		}
		if(program.getTierEnableFlag() == OCConstants.FLAG_YES && tier != null){
			membershipResponse.setTierLevel(tier.getTierType());
			membershipResponse.setTierName(tier.getTierName());
		}
		else{
			membershipResponse.setTierLevel("");
			membershipResponse.setTierName("");
		}
		
		if(OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_G.equalsIgnoreCase(contactsLoyalty.getRewardFlag())){
			if(program.getGiftMembrshpExpiryFlag() == 'Y'){
				membershipResponse.setExpiry(LoyaltyProgramHelper.getGiftMbrshipExpiryDate(contactsLoyalty.getCreatedDate(), 
						program.getGiftMembrshpExpiryDateType(), program.getGiftMembrshpExpiryDateValue()));
			}
			else{
				membershipResponse.setExpiry("");
			}
		}
		else{
			boolean upgdFlag = false;
			if(program.getMbrshipExpiryOnLevelUpgdFlag() == 'Y'){
				upgdFlag = true;
			}
			if(program.getMembershipExpiryFlag() == 'Y' && tier != null && tier.getMembershipExpiryDateType() != null 
					&& tier.getMembershipExpiryDateValue() != null){
				membershipResponse.setExpiry(LoyaltyProgramHelper.getMbrshipExpiryDate(contactsLoyalty.getCreatedDate(), contactsLoyalty.getTierUpgradedDate(), 
						upgdFlag, tier.getMembershipExpiryDateType(), tier.getMembershipExpiryDateValue()));
			}
			else{
				membershipResponse.setExpiry("");
			}
		}
		
		return membershipResponse;
	}
	
	private LoyaltyProgram findLoyaltyProgramByProgramId(Long programId, Long userId) throws Exception {
		
		LoyaltyProgramDao loyaltyProgramDao = (LoyaltyProgramDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_PROGRAM_DAO);
		return loyaltyProgramDao.findByIdAndUserId(programId, userId);
	}
	
	/*private String findExpiryType(LoyaltyProgram program, LoyaltyProgramTier tier) throws Exception {
		
			String giftExpDate = null;
			String rewardExpDate = null;
			
			if(program.getGiftAmountExpiryFlag() == 'Y' && program.getGiftAmountExpiryDateType() != null 
					&& program.getGiftAmountExpiryDateValue() != null){
				
				Calendar cal = Calendar.getInstance();
				if(OCConstants.LOYALTY_MEMBERSHIP_EXPIRYDATE_TYPE_MONTH.equals(program.getGiftAmountExpiryDateType())){
					cal.add(Calendar.MONTH, -(program.getGiftAmountExpiryDateValue().intValue()+1));
				}
				else if(OCConstants.LOYALTY_MEMBERSHIP_EXPIRYDATE_TYPE_YEAR.equals(program.getGiftAmountExpiryDateType())){
					cal.add(Calendar.YEAR, -(program.getGiftAmountExpiryDateValue().intValue()+1));
				}
				else{
					logger.info("INVALID LOYALTY REWARD EXPIRY TYPE MONTH/YEAR ...");
				}
				
				giftExpDate = cal.get(Calendar.YEAR)+"-"+cal.get(Calendar.MONTH);
				logger.info("giftExpDate ..." + giftExpDate);
				
			}
			
			if(program.getRewardExpiryFlag() == 'Y' && tier.getRewardExpiryDateType() != null 
					&& tier.getRewardExpiryDateValue() != null){
				
				Calendar cal = Calendar.getInstance();
				if(OCConstants.LOYALTY_MEMBERSHIP_EXPIRYDATE_TYPE_MONTH.equals(tier.getRewardExpiryDateType())){
					cal.add(Calendar.MONTH, -(tier.getRewardExpiryDateValue().intValue()+1));
				}
				else if(OCConstants.LOYALTY_MEMBERSHIP_EXPIRYDATE_TYPE_YEAR.equals(tier.getRewardExpiryDateType())){
					cal.add(Calendar.YEAR, -(tier.getRewardExpiryDateValue().intValue()+1));
				}
				else{
					logger.info("INVALID LOYALTY REWARD EXPIRY TYPE MONTH/YEAR ...");
				}
				
				rewardExpDate = cal.get(Calendar.YEAR)+"-"+cal.get(Calendar.MONTH);
				logger.info("rewardExpDate ..." + rewardExpDate);
			}
			
			if(giftExpDate == null && rewardExpDate == null){
				logger.info("expiry type selected:: both null..." + OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_L);
				return OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_L;
			}
			else if(giftExpDate == null){
				logger.info("expiry type selected:: giftExp null ..." + OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_L);
				return OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_L;
			}
			else if(rewardExpDate == null){
				logger.info("expiry type selected:: rewardExp null ..." + OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_G);
				return OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_G;
			}
			else if(giftExpDate.compareTo(rewardExpDate) < 0){
				logger.info("expiry type selected::  ..." + OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_G);
				return OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_G;
			}
			else{
				logger.info("expiry type selected ..." + OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_L);
				return OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_L;
			}
		
	} //findExpiryType*/	
	
	
	private LoyaltyCardSet findLoyaltyCardSetByCardsetId(Long cardSetId, Long userId) throws Exception {
		LoyaltyCardSetDao cardSetDao = (LoyaltyCardSetDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_CARD_SET_DAO);
		return cardSetDao.findByCardSetId(cardSetId);
		
	}
	
	private void deductPointsFromExpiryTable(ContactsLoyalty loyalty, Long userId, long subPoints) throws Exception{
		
		LoyaltyTransactionExpiryDao expiryDao = (LoyaltyTransactionExpiryDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_TRANSACTION_EXPIRY_DAO);
		List<LoyaltyTransactionExpiry> expiryList = null; 
		Iterator<LoyaltyTransactionExpiry> iterList = null;
		LoyaltyTransactionExpiry expiry = null;
		long remPoints = subPoints;
		
		do{
			expiryList = expiryDao.fetchExpLoyaltyPtsTrans(loyalty.getLoyaltyId(), 100, userId);
			if(expiryList == null || remPoints <= 0) break;
			iterList = expiryList.iterator();
			
			while(iterList.hasNext()){
				expiry = iterList.next();
				
				if(expiry.getExpiryPoints() == null || expiry.getExpiryPoints() <= 0){ 
					logger.info("WRONG EXPIRY TRANSACTION FETCHED...");
					continue;
				}
				else if(expiry.getExpiryPoints() < remPoints){
					logger.info("subtracted loyalty points = "+expiry.getExpiryPoints());
					remPoints = remPoints - expiry.getExpiryPoints().longValue();
					expiry.setExpiryPoints(0l);
					expiryDao.saveOrUpdate(expiry);
					continue;
					
				}
				else if(expiry.getExpiryPoints() >= remPoints){
					logger.info("subtracted loyalty points = "+expiry.getExpiryPoints());
					expiry.setExpiryPoints(expiry.getExpiryPoints() - remPoints);
					remPoints = 0; 
					expiryDao.saveOrUpdate(expiry);
					break;
				}
				
			}
			expiryList = null;
		
		}while(remPoints > 0);
		
		//createTransactionForExpiry(loyalty, subPoints-remPoints, OCConstants.LOYALTY_TRANS_ENTEREDAMOUNT_TYPE_POINTS_EXP);
	}
	
	private void deductLoyaltyAmtFromExpiryTable(ContactsLoyalty loyalty, Long userId, double subAmt) throws Exception{
		
		LoyaltyTransactionExpiryDao expiryDao = (LoyaltyTransactionExpiryDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_TRANSACTION_EXPIRY_DAO);
		List<LoyaltyTransactionExpiry> expiryList = null; 
		Iterator<LoyaltyTransactionExpiry> iterList = null;
		LoyaltyTransactionExpiry expiry = null;
		double remAmount = subAmt;
		
		do{
			expiryList = expiryDao.fetchExpLoyaltyAmtTrans(loyalty.getLoyaltyId(), 100, userId);
			if(expiryList == null || remAmount <= 0) break;
			iterList = expiryList.iterator();
			
			while(iterList.hasNext()){
				expiry = iterList.next();
				
				if(expiry.getExpiryAmount() == null || expiry.getExpiryAmount() <= 0){ 
					logger.info("WRONG EXPIRY TRANSACTION FETCHED...");
					continue;
				}
				else if(expiry.getExpiryAmount() < remAmount){
					logger.info("subtracted loyalty amount = "+expiry.getExpiryAmount());
					remAmount = remAmount - expiry.getExpiryAmount().doubleValue();
					expiry.setExpiryAmount(0.0);
					expiryDao.saveOrUpdate(expiry);
					logger.info("Expiry Amount deducted..."+expiry.getExpiryAmount().doubleValue());
					continue;
					
				}
				else if(expiry.getExpiryAmount() >= remAmount){
					logger.info("subtracted loyalty amount = "+expiry.getExpiryAmount());
					expiry.setExpiryAmount(expiry.getExpiryAmount() - remAmount);
					remAmount = 0; 
					expiryDao.saveOrUpdate(expiry);
					logger.info("Expiry Amount deducted..."+remAmount);
					break;
				}
				
			}
			expiryList = null;
		
		}while(remAmount > 0);
		
		//createTransactionForExpiry(loyalty, subAmt, OCConstants.LOYALTY_TRANS_ENTEREDAMOUNT_TYPE_AMOUNT_EXP);
	}
		
	private void deductGiftAmtFromExpiryTable(ContactsLoyalty loyalty, Long userId, double subAmt) throws Exception{
		
		LoyaltyTransactionExpiryDao expiryDao = (LoyaltyTransactionExpiryDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_TRANSACTION_EXPIRY_DAO);
		List<LoyaltyTransactionExpiry> expiryList = null; 
		Iterator<LoyaltyTransactionExpiry> iterList = null;
		LoyaltyTransactionExpiry expiry = null;
		double remAmt = subAmt;
		
		do{
			expiryList = expiryDao.fetchExpGiftAmtTrans(loyalty.getLoyaltyId(), 100, userId);
			if(expiryList == null || remAmt <= 0) break;
			iterList = expiryList.iterator();
			
			while(iterList.hasNext()){
				expiry = iterList.next();
				
				if(expiry.getExpiryAmount() == null || expiry.getExpiryAmount() <= 0){ 
					logger.info("WRONG EXPIRY TRANSACTION FETCHED...");
					continue;
				}
				else if(expiry.getExpiryAmount() < remAmt){
					logger.info("subtracted gift amount = "+expiry.getExpiryAmount());
					remAmt = remAmt - expiry.getExpiryAmount().doubleValue();
					expiry.setExpiryAmount(0.0);
					expiryDao.saveOrUpdate(expiry);
					continue;
					
				}
				else if(expiry.getExpiryAmount() >= remAmt){
					logger.info("subtracted gift amount = "+expiry.getExpiryAmount());
					expiry.setExpiryAmount(expiry.getExpiryAmount() - remAmt);
					remAmt = 0; 
					expiryDao.saveOrUpdate(expiry);
					break;
				}
				
			}
			expiryList = null;
		
		}while(remAmt > 0);
		
		//createTransactionForExpiry(loyalty, subAmt-remAmt, OCConstants.LOYALTY_TRANS_ENTEREDAMOUNT_TYPE_AMOUNT_EXP);
	}
	
	/*private LoyaltyTransactionChild createTransactionForExpiry(ContactsLoyalty loyalty,
			double expValue, String entAmtType){
		
		LoyaltyTransactionChild transaction = null;
		try{
			
			transaction = new LoyaltyTransactionChild();
			transaction.setMembershipNumber(""+loyalty.getCardNumber());
			transaction.setMembershipType(loyalty.getMembershipType());
			transaction.setCardSetId(loyalty.getCardSetId());
			transaction.setCreatedDate(Calendar.getInstance());
			transaction.setOrgId(loyalty.getOrgId());
			
			transaction.setEnteredAmount(expValue);
			transaction.setEnteredAmountType(entAmtType);
			
			transaction.setPointsBalance(loyalty.getLoyaltyBalance());
			transaction.setAmountBalance(loyalty.getGiftcardBalance());
			transaction.setGiftBalance(loyalty.getGiftBalance());
			transaction.setProgramId(loyalty.getProgramId());
			transaction.setTierId(loyalty.getProgramTierId());
			transaction.setUserId(loyalty.getUserId());
			transaction.setTransactionType(OCConstants.LOYALTY_TRANS_TYPE_EXPIRY);
			transaction.setSourceType(OCConstants.LOYALTY_TRANSACTION_SOURCE_TYPE_AUTO);
			
			LoyaltyTransactionChildDao loyaltyTransactionChildDao = (LoyaltyTransactionChildDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_TRANSACTION_CHILD_DAO);
			loyaltyTransactionChildDao.saveOrUpdate(transaction);
			
		}catch(Exception e){
			logger.error("Exception while logging enroll transaction...",e);
		}
		return transaction;
	}*/
	
	private double calculatePointsAmount(ContactsLoyalty contactsLoyalty, LoyaltyProgramTier tier) throws Exception {
		
		if(tier.getConvertFromPoints() != null && tier.getConvertFromPoints() > 0 
				&& contactsLoyalty.getLoyaltyBalance() != null && contactsLoyalty.getLoyaltyBalance() > 0){
		
			double factor = contactsLoyalty.getLoyaltyBalance()/tier.getConvertFromPoints();
			int intFactor = (int)factor;
			return tier.getConvertToAmount() * intFactor;
			
		}
		else return 0.0;
	}
	
	/*private void deductPtsAddAmountFromExpiryTable(Long membershipNumber, Long userId, double subPoints, double earnedAmt) throws Exception{
		
		LoyaltyTransactionExpiryDao expiryDao = (LoyaltyTransactionExpiryDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_TRANSACTION_EXPIRY_DAO);
		List<LoyaltyTransactionExpiry> expiryList = null; //expiryDao.fetchExpPointsTrans(""+membershipNumber, 100, userId);
		Iterator<LoyaltyTransactionExpiry> iterList = null; //expiryList.iterator();
		LoyaltyTransactionExpiry expiry = null;
		long remainingPoints = (long)subPoints;
		
		do{
		
			expiryList = expiryDao.fetchExpPointsTrans(""+membershipNumber, OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_L, 100, userId);
			//logger.info("expiryList size = "+expiryList.size());
			if(expiryList == null || remainingPoints <= 0) break;
			iterList = expiryList.iterator();
			
			while(iterList.hasNext()){
				
				logger.info("remainingPoints = "+remainingPoints +" earnedAmt = "+earnedAmt);
				expiry = iterList.next();
				
				//logger.info("expiry points= "+expiry.getExpiryPoints()+" expiry amount = "+expiry.getExpiryAmount());
				
				if((expiry.getExpiryPoints() == null || expiry.getExpiryPoints() <= 0) && 
						(expiry.getExpiryAmount() == null || expiry.getExpiryAmount() <= 0)){
					logger.info("Wrong entry condition...");
				}
				else if(expiry.getExpiryPoints() < remainingPoints){
					logger.info("subtracted points = "+expiry.getExpiryPoints());
					remainingPoints = remainingPoints - expiry.getExpiryPoints().longValue();
					expiry.setExpiryPoints(0l);
					expiryDao.saveOrUpdate(expiry);
					continue;
					
				}
				else if(expiry.getExpiryPoints() >= remainingPoints){
					logger.info("subtracted points = "+expiry.getExpiryPoints());
					expiry.setExpiryPoints(expiry.getExpiryPoints() - remainingPoints);
					remainingPoints = 0;
					if(expiry.getExpiryAmount() == null){
						expiry.setExpiryAmount(earnedAmt);
					}
					else{
						expiry.setExpiryAmount(expiry.getExpiryAmount() + earnedAmt);
					}
					//logger.info("expiry.getExpiryAmount() = "+expiry.getExpiryAmount()+ " earnedAmt = "+earnedAmt);
					expiryDao.saveOrUpdate(expiry);
					//logger.info("expiry.getExpiryAmount() = "+expiry.getExpiryAmount()+ " earnedAmt = "+earnedAmt);
					break;
				}
				
			}
		
		}while(remainingPoints > 0);
			
		
	}*/
	
	private LoyaltyRedemptionResponse prepareFailureResponse(ContactsLoyalty contactsLoyalty, LoyaltyProgramTier tier,
			LoyaltyProgram program, double pointsAmount, ResponseHeader responseHeader) throws Exception {
		
		Status status = new Status("111530", PropertyUtil.getErrorMessage(111530, OCConstants.ERROR_LOYALTY_FLAG), 
				OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
		List<Balance> balances = prepareBalancesObject(contactsLoyalty, "", "", "");
		
		MembershipResponse membershipResponse = prepareMembershipResponse(contactsLoyalty, tier, program);
		
		HoldBalance holdBalance = new HoldBalance();
		holdBalance.setPoints(contactsLoyalty.getHoldPointsBalance()== null ? "" : ""+contactsLoyalty.getHoldPointsBalance().intValue());
		//holdBalance.setCurrency(contactsLoyalty.getHoldAmountBalance() == null ? "" : ""+contactsLoyalty.getHoldAmountBalance());
		if(contactsLoyalty.getHoldAmountBalance() == null){
			holdBalance.setCurrency("");
		}
		else{
			double value = new BigDecimal(contactsLoyalty.getHoldAmountBalance()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
			holdBalance.setCurrency(""+value);
		}
		
		if(tier != null &&  tier.getActivationFlag() == 'Y' && 
				((contactsLoyalty.getHoldPointsBalance() != null && contactsLoyalty.getHoldPointsBalance() > 0) ||
				(contactsLoyalty.getHoldAmountBalance() != null && contactsLoyalty.getHoldAmountBalance() > 0))){
			holdBalance.setActivationPeriod(tier.getPtsActiveDateValue()+" "+tier.getPtsActiveDateType());
		}
		else{
			holdBalance.setActivationPeriod("");
		}
		
		AdditionalInfo addinfo = new AdditionalInfo();
		if(program.getRedemptionOTPFlag() == OCConstants.FLAG_YES){
			addinfo.setOtpEnabled("True");
		}
		else{
			addinfo.setOtpEnabled("False");
		}
		if(program.getRedemptionOTPFlag() == OCConstants.FLAG_YES && program.getOtpLimitAmt()!=null){
			OTPRedeemLimit otpRedeemLimit = new OTPRedeemLimit();
			otpRedeemLimit.setAmount(""+program.getOtpLimitAmt());
			otpRedeemLimit.setValueCode(OCConstants.LOYALTY_TYPE_CURRENCY);
			List<OTPRedeemLimit> otpRedeemLimitlist = new ArrayList<OTPRedeemLimit>();
			otpRedeemLimitlist.add(otpRedeemLimit);
			addinfo.setOtpRedeemLimit(otpRedeemLimitlist);
			}
		else{
			List<OTPRedeemLimit> otpRedeemLimitlist = new ArrayList<OTPRedeemLimit>();
		    addinfo.setOtpRedeemLimit(otpRedeemLimitlist);
			}
		if(OCConstants.LOYALTY_MEMBERSHIP_REWARD_FLAG_G.equalsIgnoreCase(contactsLoyalty.getRewardFlag())){
			addinfo.setPointsEquivalentCurrency("");
			if(contactsLoyalty.getGiftBalance() != null){
				double value = new BigDecimal(contactsLoyalty.getGiftBalance().doubleValue()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
				addinfo.setTotalRedeemableCurrency(value+"");
			}
			else{
				addinfo.setTotalRedeemableCurrency("");
			}
		}
		else{
			addinfo.setPointsEquivalentCurrency(""+pointsAmount);
			double totalredeemable = pointsAmount;
			if(contactsLoyalty.getGiftcardBalance() != null){
				totalredeemable += contactsLoyalty.getGiftcardBalance().doubleValue();
			}
			if(contactsLoyalty.getGiftBalance() != null){
				totalredeemable += contactsLoyalty.getGiftBalance().doubleValue();
			}
			
			double value = new BigDecimal(totalredeemable).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
			//amountBalances.setAmount(""+value);
			
			addinfo.setTotalRedeemableCurrency(""+value);
		}
		
		LoyaltyRedemptionResponse redemptionResponse = prepareRedemptionResponse(responseHeader, membershipResponse, balances, holdBalance, addinfo, null, status);
		return redemptionResponse;
	}
	
	private OTPGeneratedCodes findOTPCodeByPhone(String phone, Long userId, String status) throws Exception {
		OTPGeneratedCodesDao otpGenCodesDao = (OTPGeneratedCodesDao)ServiceLocator.getInstance().getBeanByName(OCConstants.OTP_GENERATEDCODES_DAO);
		return otpGenCodesDao.findOTPCodeByPhone(phone, userId, status);
	}
	private void saveOTPgeneratedcode(OTPGeneratedCodes otpgenCode) throws Exception {
		OTPGeneratedCodesDao otpGenCodesDao = (OTPGeneratedCodesDao)ServiceLocator.getInstance().getBeanByName(OCConstants.OTP_GENERATEDCODES_DAO);
		otpGenCodesDao.saveOrUpdate(otpgenCode);
	}
	
	private Status validateEnteredValue(Amount amount){
		logger.info(" Entered into validateEnteredValue method >>>");
		Status status = null;
		try{
			double enteredValue = Double.valueOf(amount.getEnteredValue().trim());
			logger.info("enteredvalue = "+enteredValue);
			if(enteredValue <= 0){
				logger.info("enteredvalue less than 1");
				status = new Status("111557", PropertyUtil.getErrorMessage(111557, OCConstants.ERROR_LOYALTY_FLAG), 
						OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				return status;
			}
			
		}catch(Exception e){
			logger.info("Entered value validation failed...");
		}
		logger.info("Completed validateEnteredValue method <<<");
		return status;
		
	}
	
	private LoyaltyProgramTier findTier(Long programId, Long contactId, Long userId, ContactsLoyalty contactsLoyalty) throws Exception {

		LoyaltyProgramTierDao loyaltyProgramTierDao = (LoyaltyProgramTierDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_PROGRAM_TIER_DAO);

		List<LoyaltyProgramTier> tiersList = loyaltyProgramTierDao.fetchTiersByProgramId(programId);
		if (tiersList == null || tiersList.size() <= 0) {
			logger.info("Tiers list is empty...");
			return null;
		}
		else if (tiersList.size() >= 1) {
			Collections.sort(tiersList, new Comparator<LoyaltyProgramTier>() {
				@Override
				public int compare(LoyaltyProgramTier o1, LoyaltyProgramTier o2) {

					int num1 = Integer.valueOf(o1.getTierType().substring(5)).intValue();
					int num2 = Integer.valueOf(o2.getTierType().substring(5)).intValue();
					if(num1 < num2){
						return -1;
					}
					else if(num1 == num2){
						return 0;
					}
					else{
						return 1;
					}
				}
			});
		}

		for(LoyaltyProgramTier tier : tiersList) {//testing purpose
			logger.info("tier level : "+tier.getTierType());
		}

		if(!OCConstants.LOYALTY_PROGRAM_TIER1.equals(tiersList.get(0).getTierType())){// if tier 1 not exist return null
			logger.info("selected tier...null...tier1 not found");
			return null;
		}

		//Prepare eligible tiers map
		Iterator<LoyaltyProgramTier> iterTier = tiersList.iterator();
		Map<LoyaltyProgramTier, LoyaltyProgramTier> eligibleMap = new LinkedHashMap<LoyaltyProgramTier, LoyaltyProgramTier>();
		LoyaltyProgramTier prevtier = null;
		LoyaltyProgramTier nexttier = null;

		while(iterTier.hasNext()){
			nexttier = iterTier.next();
			if(OCConstants.LOYALTY_PROGRAM_TIER1.equals(nexttier.getTierType())){
				eligibleMap.put(nexttier, null);
			}
			else{
				if((Integer.valueOf(prevtier.getTierType().substring(5))+1) 
						== Integer.valueOf(nexttier.getTierType().substring(5)) && prevtier.getTierUpgdConstraintValue() != null){
					eligibleMap.put(nexttier, prevtier);
					logger.info("eligible tier ="+nexttier.getTierType()+" upgdconstrant value = "+prevtier.getTierUpgdConstraintValue());
				}
			}
			prevtier = nexttier;
		}

		if(OCConstants.LOYALTY_LIFETIME_POINTS.equals(tiersList.get(0).getTierUpgdConstraint())){
			logger.info("tier condition on :"+OCConstants.LOYALTY_LIFETIME_POINTS);
			if(contactsLoyalty == null) {
				return tiersList.get(0);
			}
			else {

				Double totLoyaltyPointsValue = contactsLoyalty.getTotalLoyaltyEarned() == null ? 0.00 : contactsLoyalty.getTotalLoyaltyEarned();
				logger.info("totLoyaltyPointsValue value = "+totLoyaltyPointsValue);

				if(totLoyaltyPointsValue == null || totLoyaltyPointsValue <= 0){
					logger.info("totLoyaltyPointsValue value is empty...");
					return tiersList.get(0);
				}
				else{
					Iterator<LoyaltyProgramTier> it = eligibleMap.keySet().iterator();
					LoyaltyProgramTier prevKeyTier = null;
					LoyaltyProgramTier nextKeyTier = null;
					while(it.hasNext()){
						nextKeyTier = it.next();
						logger.info("------------nextKeyTier::"+nextKeyTier.getTierType());
						logger.info("-------------currTier::"+tiersList.get(0).getTierType());
						if(OCConstants.LOYALTY_PROGRAM_TIER1.equalsIgnoreCase(nextKeyTier.getTierType())){
							prevKeyTier = nextKeyTier;
							continue;
						}
						if(totLoyaltyPointsValue > 0 && totLoyaltyPointsValue < eligibleMap.get(nextKeyTier).getTierUpgdConstraintValue()){
							if(prevKeyTier == null){
								logger.info("selected tier is currTier..."+tiersList.get(0).getTierType());
								return tiersList.get(0);
							}
							logger.info("selected tier..."+prevKeyTier.getTierType());
							return prevKeyTier;
						}
						else if (totLoyaltyPointsValue > 0 && totLoyaltyPointsValue >= eligibleMap.get(nextKeyTier).getTierUpgdConstraintValue() && !it.hasNext()) {
							logger.info("selected tier..."+nextKeyTier.getTierType());
							return nextKeyTier;
						}
						prevKeyTier = nextKeyTier;
					}
					return tiersList.get(0);
				}//else
			}
		}
		else if(contactId == null){
			logger.info("contactId is null and selected tier..."+tiersList.get(0).getTierType());
			return tiersList.get(0);
		}
		else if(OCConstants.LOYALTY_LIFETIME_PURCHASE_VALUE.equals(tiersList.get(0).getTierUpgdConstraint())){
			logger.info("tier condition on :"+OCConstants.LOYALTY_LIFETIME_PURCHASE_VALUE);
			
			ContactsDao contactsDao = (ContactsDao)ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_DAO);				

			List<Map<String, Object>> contactPurcahseList = contactsDao.findContactPurchaseDetails(userId, contactId);
			Double totPurchaseValue = null;
			if(contactPurcahseList != null && contactPurcahseList.size() == 1) {
				for (Map<String, Object> eachMap : contactPurcahseList) {
					if(eachMap.containsKey("tot_purchase_amt")){
						totPurchaseValue = Double.valueOf(eachMap.get("tot_purchase_amt") != null ? eachMap.get("tot_purchase_amt").toString() : "0.00");
						logger.info("purchase value = "+totPurchaseValue);
					}
				}
			}

			if(contactPurcahseList == null || totPurchaseValue == null || totPurchaseValue <= 0){
				logger.info("purchase value is empty...");
				return tiersList.get(0);
			}
			else{

				Iterator<LoyaltyProgramTier> it = eligibleMap.keySet().iterator();
				LoyaltyProgramTier prevKeyTier = null;
				LoyaltyProgramTier nextKeyTier = null;
				while(it.hasNext()){
					nextKeyTier = it.next();
					logger.info("------------nextKeyTier::"+nextKeyTier.getTierType());
					logger.info("-------------tiersList.get(0)::"+tiersList.get(0).getTierType());
					if(OCConstants.LOYALTY_PROGRAM_TIER1.equalsIgnoreCase(nextKeyTier.getTierType())){
						prevKeyTier = nextKeyTier;
						continue;
					}
					if(totPurchaseValue > 0 && totPurchaseValue < eligibleMap.get(nextKeyTier).getTierUpgdConstraintValue()){
						if(prevKeyTier == null){
							logger.info("selected tier is currTier..."+tiersList.get(0).getTierType());
							return tiersList.get(0);
						}
						logger.info("selected tier..."+prevKeyTier.getTierType());
						return prevKeyTier;
					}
					else if (totPurchaseValue > 0 && totPurchaseValue >= eligibleMap.get(nextKeyTier).getTierUpgdConstraintValue() && !it.hasNext()) {
						logger.info("selected tier..."+nextKeyTier.getTierType());
						return nextKeyTier;
					}
					prevKeyTier = nextKeyTier;
				}
				return tiersList.get(0);
			}//else
		}
		else if(OCConstants.LOYALTY_CUMULATIVE_PURCHASE_VALUE.equals(tiersList.get(0).getTierUpgdConstraint())){
			try{
				Double cumulativeAmount = 0.0;
//				Iterator<LoyaltyProgramTier> it = eligibleMap.keySet().iterator();
				ListIterator<LoyaltyProgramTier> it = new ArrayList(eligibleMap.keySet()).listIterator(eligibleMap.size());
//				LoyaltyProgramTier prevKeyTier = null;
				LoyaltyProgramTier nextKeyTier = null;
				while(it.hasPrevious()){
					nextKeyTier = it.previous();
					logger.info("------------nextKeyTier::"+nextKeyTier.getTierType());
					logger.info("-------------currTier::"+tiersList.get(0).getTierType());
					if(OCConstants.LOYALTY_PROGRAM_TIER1.equalsIgnoreCase(nextKeyTier.getTierType())){
//						prevKeyTier = nextKeyTier;
						return tiersList.get(0);
					}
					Calendar startCal = Calendar.getInstance();
					Calendar endCal = Calendar.getInstance();
					endCal.add(Calendar.MONTH, -eligibleMap.get(nextKeyTier).getTierUpgradeCumulativeValue().intValue());

					String startDate = MyCalendar.calendarToString(startCal, MyCalendar.FORMAT_DATETIME_STYEAR);
					String endDate = MyCalendar.calendarToString(endCal, MyCalendar.FORMAT_DATETIME_STYEAR);
					logger.info("contactId = "+contactId+" startDate = "+startDate+" endDate = "+endDate);

					RetailProSalesDao salesDao = (RetailProSalesDao)ServiceLocator.getInstance().getDAOByName(OCConstants.RETAILPRO_SALES_DAO);
					Object[] cumulativeAmountArr = salesDao.getCumulativePurchase(userId, contactId, startDate, endDate);

					cumulativeAmount = Double.valueOf(cumulativeAmountArr[0].toString());

					if(cumulativeAmount == null || cumulativeAmount <= 0){
						logger.info("cumulative purchase value is empty...");
						continue;
					}
					
					if(cumulativeAmount > 0 && cumulativeAmount >= eligibleMap.get(nextKeyTier).getTierUpgdConstraintValue()){
						return nextKeyTier;
					}
					
				}
				/*while(it.hasNext()){
					nextKeyTier = it.next();
					logger.info("------------nextKeyTier::"+nextKeyTier.getTierType());
					logger.info("-------------tiersList.get(0)::"+tiersList.get(0).getTierType());
					if(OCConstants.LOYALTY_PROGRAM_TIER1.equalsIgnoreCase(nextKeyTier.getTierType())){
						prevKeyTier = nextKeyTier;
						continue;
					}
					Calendar startCal = Calendar.getInstance();
					Calendar endCal = Calendar.getInstance();
					endCal.add(Calendar.MONTH, -((LoyaltyProgramTier) eligibleMap.get(nextKeyTier)).getTierUpgradeCumulativeValue().intValue());

					String startDate = MyCalendar.calendarToString(startCal, MyCalendar.FORMAT_DATETIME_STYEAR);
					String endDate = MyCalendar.calendarToString(endCal, MyCalendar.FORMAT_DATETIME_STYEAR);
					logger.info("contactId = "+contactId+" startDate = "+startDate+" endDate = "+endDate);

					Object[] cumulativeAmountArr = getCumulativeValue(startDate, endDate);

					cumulativeAmount = Double.valueOf(cumulativeAmountArr[0].toString());

					if(cumulativeAmount == null || cumulativeAmount <= 0){
						logger.info("cumulative purchase value is empty...");
						continue;
					}
					if(cumulativeAmount > 0 && cumulativeAmount < eligibleMap.get(nextKeyTier).getTierUpgdConstraintValue()){
						if(prevKeyTier == null){
							logger.info("selected tier is currTier..."+tiersList.get(0).getTierType());
							return tiersList.get(0);
						}
						logger.info("selected tier..."+prevKeyTier.getTierType());
						return prevKeyTier;
					}
					else if (cumulativeAmount > 0 && cumulativeAmount >= eligibleMap.get(nextKeyTier).getTierUpgdConstraintValue() && !it.hasNext()) {
						logger.info("selected tier..."+nextKeyTier.getTierType());
						return nextKeyTier;
					}
					prevKeyTier = nextKeyTier;
				}*/
				return tiersList.get(0);
			}catch(Exception e){
				logger.error("Excepion in cpv thread ", e);
				return tiersList.get(0);
			}
		}
		else{
			return null;
		}
	}
}
