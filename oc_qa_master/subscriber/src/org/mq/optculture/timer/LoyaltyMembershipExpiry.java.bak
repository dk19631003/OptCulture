package org.mq.optculture.timer;

import java.util.Calendar;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.mq.marketer.campaign.beans.ContactsLoyalty;
import org.mq.marketer.campaign.beans.LoyaltyProgram;
import org.mq.marketer.campaign.beans.LoyaltyProgramTier;
import org.mq.marketer.campaign.dao.ContactsLoyaltyDao;
import org.mq.marketer.campaign.dao.ContactsLoyaltyDaoForDML;
import org.mq.marketer.campaign.general.Constants;
import org.mq.optculture.data.dao.LoyaltyProgramDao;
import org.mq.optculture.data.dao.LoyaltyProgramTierDao;
import org.mq.optculture.exception.LoyaltyProgramException;
import org.mq.optculture.utils.OCConstants;
import org.mq.optculture.utils.ServiceLocator;
import org.springframework.scheduling.annotation.Scheduled;

public class LoyaltyMembershipExpiry{

	private static final Logger logger = LogManager.getLogger(Constants.SUBSCRIBER_LOGGER);

	//@Scheduled(cron="0 0/5 * 1/1 * ?")  //for every 5 minutes
	@Scheduled(cron="0 0 0 1 1/1 ?")    //for every month 1st at 00:00hrs
	public void run_task() {
		logger.info(">>> Started loyalty membership Expiry timer >>>");

		List<LoyaltyProgram> programsList;
		try {
			programsList = fetchAllPrograms();
			if(programsList == null || programsList.isEmpty()){
				return;
			}
			logger.info(">>>>>>>>>>> list size::"+programsList.size());
			for (LoyaltyProgram programObj : programsList) {
				logger.info(">>>>>>>>>>> entered for::");
				List<LoyaltyProgramTier> tierList = null;

				if(OCConstants.FLAG_YES == programObj.getGiftMembrshpExpiryFlag()) {
					List<Object[]> conList = null ;
					Calendar currentCal = Calendar.getInstance();

					if(programObj.getGiftMembrshpExpiryDateType() != null && !programObj.getGiftMembrshpExpiryDateType().isEmpty()){
						if(OCConstants.LOYALTY_MEMBERSHIP_EXPIRYDATE_TYPE_MONTH.equals(programObj.getGiftMembrshpExpiryDateType())){
							currentCal.add(Calendar.MONTH, -programObj.getGiftMembrshpExpiryDateValue().intValue());
						}
						else if(OCConstants.LOYALTY_MEMBERSHIP_EXPIRYDATE_TYPE_YEAR.equals(programObj.getGiftMembrshpExpiryDateType())){
							currentCal.add(Calendar.MONTH, -(12*programObj.getGiftMembrshpExpiryDateValue().intValue()));
						}
//						String currentDateStr = currentCal.get(Calendar.YEAR)+"-"+currentCal.get(Calendar.MONTH);
						String currentDateStr = "";
						if(currentCal.get(Calendar.MONTH) == 0){
							int year = currentCal.get(Calendar.YEAR)-1;
							currentDateStr = year+"-12";
						}
						else{
							currentDateStr = currentCal.get(Calendar.YEAR)+"-"+currentCal.get(Calendar.MONTH);
						}
						logger.info("currentDateStr ::::::::::"+currentDateStr);
						conList = getGiftCustomersToExpire(programObj.getUserId(), programObj.getProgramId(),currentDateStr);
					}

					if(conList != null && !conList.isEmpty()){
						logger.info("conList size ::::::::::"+conList.size());
						for(Object[] objArr : conList) {
							logger.info("contactId ::::::::::"+objArr[0]);
							ContactsLoyaltyDao contactLoyaltyDao = (ContactsLoyaltyDao) ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_LOYALTY_DAO);
							ContactsLoyaltyDaoForDML contactLoyaltyDaoForDML = (ContactsLoyaltyDaoForDML) ServiceLocator.getInstance().getDAOForDMLByName(OCConstants.CONTACTS_LOYALTY_DAO_FOR_DML);
							ContactsLoyalty contactsLoyalty = contactLoyaltyDao.findAllByLoyaltyId((Long) objArr[0]);
							contactsLoyalty.setMembershipStatus(OCConstants.LOYALTY_MEMBERSHIP_STATUS_EXPIRED);
							contactLoyaltyDaoForDML.saveOrUpdate(contactsLoyalty);
						}
					}
				}

				if(OCConstants.FLAG_YES == programObj.getMembershipExpiryFlag()) {
					tierList = getAllTiersByPrgmId(programObj.getProgramId());

					if(tierList != null && !tierList.isEmpty()){
						logger.info("tierList size ::::::::::"+tierList.size());

						for(LoyaltyProgramTier tierObj : tierList) {
							logger.info("programId ::::::::::"+tierObj.getProgramId()+":::: tierId ::::::::"+tierObj.getTierId());
							List<Object[]> conList = null ;
							Calendar currentCal = Calendar.getInstance();

							if(tierObj.getMembershipExpiryDateType() != null && !tierObj.getMembershipExpiryDateType().isEmpty()){

								if(OCConstants.LOYALTY_MEMBERSHIP_EXPIRYDATE_TYPE_MONTH.equals(tierObj.getMembershipExpiryDateType())){
									currentCal.add(Calendar.MONTH, -tierObj.getMembershipExpiryDateValue().intValue());
								}
								else if(OCConstants.LOYALTY_MEMBERSHIP_EXPIRYDATE_TYPE_YEAR.equals(tierObj.getMembershipExpiryDateType())){
									currentCal.add(Calendar.MONTH, -(12*tierObj.getMembershipExpiryDateValue().intValue()));
								}
//								String currentDateStr = currentCal.get(Calendar.YEAR)+"-"+currentCal.get(Calendar.MONTH);
								String currentDateStr = "";
								if(currentCal.get(Calendar.MONTH) == 0){
									int year = currentCal.get(Calendar.YEAR)-1;
									currentDateStr = year+"-12";
								}
								else{
									currentDateStr = currentCal.get(Calendar.YEAR)+"-"+currentCal.get(Calendar.MONTH);
								}
								logger.info("currentDateStr ::::::::::"+currentDateStr);

								List<Object[]> createdDtList = null;
								List<Object[]> upgdDtList = null;
								
								 if(programObj.getMbrshipExpiryOnLevelUpgdFlag() == OCConstants.FLAG_YES) {
									 createdDtList = getLtyCustomersToExpireByCreatedDate(tierObj.getTierId(),currentDateStr, OCConstants.FLAG_YES);
									 upgdDtList = getLtyCustomersToExpireByUpgradedDate(tierObj.getTierId(),currentDateStr);
								 }
								 else {
									 createdDtList = getLtyCustomersToExpireByCreatedDate(tierObj.getTierId(),currentDateStr, OCConstants.FLAG_NO);
								 }
								if(createdDtList != null && !createdDtList.isEmpty() && upgdDtList != null && !upgdDtList.isEmpty()) {
									conList = createdDtList;
									for (Object[] objArr : upgdDtList) {
										conList.add(objArr);
									}
								}
								else {
									if(createdDtList == null || createdDtList.isEmpty()) {
										conList = upgdDtList;
									}
									else if(upgdDtList == null || upgdDtList.isEmpty()) {
										conList = createdDtList;
									}

								}

								logger.info("conList size ::::::::::"+conList);

							}

							if(conList != null && !conList.isEmpty()){
								logger.info("conList size ::::::::::"+conList.size());
								for(Object[] objArr : conList) {
									logger.info("contactId ::::::::::"+objArr[0]);
									ContactsLoyaltyDao contactLoyaltyDao = (ContactsLoyaltyDao) ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_LOYALTY_DAO);
									ContactsLoyaltyDaoForDML contactLoyaltyDaoForDML = (ContactsLoyaltyDaoForDML) ServiceLocator.getInstance().getDAOForDMLByName(OCConstants.CONTACTS_LOYALTY_DAO_FOR_DML);
									ContactsLoyalty contactsLoyalty = contactLoyaltyDao.findAllByLoyaltyId((Long) objArr[0]);
									contactsLoyalty.setMembershipStatus(OCConstants.LOYALTY_MEMBERSHIP_STATUS_EXPIRED);
									contactLoyaltyDaoForDML.saveOrUpdate(contactsLoyalty);
								}
							}
						}
					}
				}
			}

		} catch (Exception e) {
			logger.error("Exception::",e);
		}

		logger.info(">>> Completed loyalty Rewards Expiry timer >>>");
	}

	private List<LoyaltyProgram> fetchAllPrograms() throws LoyaltyProgramException {

		List<LoyaltyProgram> programsList =null;
		try{

			LoyaltyProgramDao loyaltyProgramDao = (LoyaltyProgramDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_PROGRAM_DAO);
			programsList = loyaltyProgramDao.fetchAllPrograms();
			if(programsList != null && programsList.size() > 0){
				logger.info("list size ::::::::::"+programsList.size());
				return programsList;
			}

		}catch(Exception e){
			logger.error("Exception in dao service...");
			throw new LoyaltyProgramException("fetch all programs failed.");
		}

		return programsList;

	}

	private List<LoyaltyProgramTier> getAllTiersByPrgmId(Long prgmId) throws LoyaltyProgramException {

		List<LoyaltyProgramTier> tierList =null;
		try{

			LoyaltyProgramTierDao loyaltyProgramTierDao = (LoyaltyProgramTierDao)ServiceLocator.getInstance().getDAOByName(OCConstants.LOYALTY_PROGRAM_TIER_DAO);
			tierList = loyaltyProgramTierDao.fetchTiersByProgramId(prgmId);
			if(tierList != null && tierList.size() > 0){
				logger.info("tier list size ::::::::::"+tierList.size());
				return tierList;
			}

		}catch(Exception e){
			logger.error("Exception in dao service...");
			throw new LoyaltyProgramException("fetch all tiers failed.");
		}

		return tierList;

	}

	private List<Object[]> getGiftCustomersToExpire(Long userId, Long programId, String currentDateStr) throws LoyaltyProgramException {
		List<Object[]> contList = null;
		try{

			ContactsLoyaltyDao contactsLoyaltyDao = (ContactsLoyaltyDao)ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_LOYALTY_DAO);
			contList = contactsLoyaltyDao.getGiftCustomersToExpire(userId, programId, currentDateStr);
			if(contList != null && contList.size() > 0){
				logger.info("contact loyalty list size ::::::::::"+contList.size());
				return contList;
			}

		}catch(Exception e){
			logger.error("Exception in dao service...");
			throw new LoyaltyProgramException("fetch all customers failed.");
		}

		return contList;
	}

	private List<Object[]> getLtyCustomersToExpireByCreatedDate(Long userId, Long tierId, String currentDateStr, char resetFlag) throws LoyaltyProgramException {
		List<Object[]> contList = null;
		try{

			ContactsLoyaltyDao contactsLoyaltyDao = (ContactsLoyaltyDao)ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_LOYALTY_DAO);
			contList = contactsLoyaltyDao.getLtyCustomersToExpireByCreatedDate(userId, tierId, currentDateStr, resetFlag);
			if(contList != null && contList.size() > 0){
				logger.info("contact loyalty list size ::::::::::"+contList.size());
				return contList;
			}

		}catch(Exception e){
			logger.error("Exception in dao service...");
			throw new LoyaltyProgramException("fetch all customers failed.");
		}

		return contList;
	}

	private List<Object[]> getLtyCustomersToExpireByUpgradedDate(Long userId, Long tierId, String currentDateStr) throws LoyaltyProgramException {
		List<Object[]> contList = null;
		try{

			ContactsLoyaltyDao contactsLoyaltyDao = (ContactsLoyaltyDao)ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_LOYALTY_DAO);
			contList = contactsLoyaltyDao.getLtyCustomersToExpireByUpgradedDate(userId, tierId, currentDateStr);
			if(contList != null && contList.size() > 0){
				logger.info("contact loyalty list size ::::::::::"+contList.size());
				return contList;
			}

		}catch(Exception e){
			logger.error("Exception in dao service...");
			throw new LoyaltyProgramException("fetch all customers failed.");
		}

		return contList;
	}




}
