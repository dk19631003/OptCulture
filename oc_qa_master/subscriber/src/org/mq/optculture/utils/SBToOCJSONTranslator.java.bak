package org.mq.optculture.utils;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.mq.marketer.campaign.custom.MyCalendar;
import org.mq.marketer.campaign.general.PropertyUtil;
import org.mq.optculture.model.BaseRequestObject;
import org.mq.optculture.model.BaseResponseObject;
import org.mq.optculture.model.loyalty.AmountDetails;
import org.mq.optculture.model.loyalty.CustomerInfo;
import org.mq.optculture.model.loyalty.EnrollmentInfo;
import org.mq.optculture.model.loyalty.HeaderInfo;
import org.mq.optculture.model.loyalty.IssuanceInfo;
import org.mq.optculture.model.loyalty.LoyaltyEnrollRequestObject;
import org.mq.optculture.model.loyalty.LoyaltyEnrollResponseObject;
import org.mq.optculture.model.loyalty.LoyaltyIssuanceRequestObject;
import org.mq.optculture.model.loyalty.LoyaltyIssuanceResponseObject;
import org.mq.optculture.model.loyalty.LoyaltyRedemptionRequestObject;
import org.mq.optculture.model.loyalty.LoyaltyRedemptionResponseObject;
import org.mq.optculture.model.loyalty.StatusInfo;
import org.mq.optculture.model.loyalty.UserDetails;
import org.mq.optculture.model.ocloyalty.Amount;
import org.mq.optculture.model.ocloyalty.Customer;
import org.mq.optculture.model.ocloyalty.Discounts;
import org.mq.optculture.model.ocloyalty.LoyaltyEnrollRequest;
import org.mq.optculture.model.ocloyalty.LoyaltyEnrollResponse;
import org.mq.optculture.model.ocloyalty.LoyaltyIssuanceRequest;
import org.mq.optculture.model.ocloyalty.LoyaltyIssuanceResponse;
import org.mq.optculture.model.ocloyalty.LoyaltyRedemptionRequest;
import org.mq.optculture.model.ocloyalty.LoyaltyRedemptionResponse;
import org.mq.optculture.model.ocloyalty.LoyaltyUser;
import org.mq.optculture.model.ocloyalty.MatchedCustomer;
import org.mq.optculture.model.ocloyalty.MembershipRequest;
import org.mq.optculture.model.ocloyalty.MembershipResponse;
import org.mq.optculture.model.ocloyalty.Promotion;
import org.mq.optculture.model.ocloyalty.RequestHeader;
import org.mq.optculture.model.ocloyalty.ResponseHeader;
import org.mq.optculture.model.ocloyalty.SkuDetails;
import org.mq.optculture.model.ocloyalty.Status;

public class SBToOCJSONTranslator {

	
	//private String trxType;

	public SBToOCJSONTranslator() {}
	
	/*public String getTrxType() {
		return trxType;
	}

	public void setTrxType(String trxType) {
		this.trxType = trxType;
	}*/
	
	public Object convertSbReqToOC(BaseRequestObject sourceSBJSONReqObj, String trxType) {
		
		if(trxType.equalsIgnoreCase(OCConstants.LOYALTY_TRANSACTION_ENROLMENT)) {
			
			LoyaltyEnrollRequestObject loyaltyEnroRequestObject = (LoyaltyEnrollRequestObject)sourceSBJSONReqObj;
			return convertEnrollmentRequest(loyaltyEnroRequestObject);
			
		}else if(trxType.equalsIgnoreCase(OCConstants.LOYALTY_TRANSACTION_ISSUANCE)){
			
			LoyaltyIssuanceRequestObject loyaltyIssuanceRequestObject = (LoyaltyIssuanceRequestObject)sourceSBJSONReqObj;
			return convertIssuanceRequest(loyaltyIssuanceRequestObject);
			
		}else if(trxType.equalsIgnoreCase(OCConstants.LOYALTY_TRANSACTION_REDEMPTION)){
			LoyaltyRedemptionRequestObject LoyaltyRedemptionRequestObject = (LoyaltyRedemptionRequestObject)sourceSBJSONReqObj;
			return convertRedemptionRequest( LoyaltyRedemptionRequestObject);
		}
		return null;
		
	}
	
	public StatusInfo convertStatus(Status status) {
		
		
		StatusInfo statusInfo = new StatusInfo(status.getErrorCode(), status.getMessage(), status.getStatus());
		return statusInfo;
		
	}
	
	public BaseResponseObject convertOCResponseToSB(Object sourceOCJSONRespObj, String trxType) {
		
		if(trxType.equalsIgnoreCase(OCConstants.LOYALTY_TRANSACTION_ENROLMENT)) {
			
			LoyaltyEnrollResponse loyaltyEnrollResponse = (LoyaltyEnrollResponse)sourceOCJSONRespObj;
			return convertEnrollmentResponse(loyaltyEnrollResponse);
			
		}else if(trxType.equalsIgnoreCase(OCConstants.LOYALTY_TRANSACTION_ISSUANCE)){
			
			LoyaltyIssuanceResponse loyaltyIssuanceResponse = (LoyaltyIssuanceResponse)sourceOCJSONRespObj;
			return convertIssuanceResponse(loyaltyIssuanceResponse);
			
		}else if(trxType.equalsIgnoreCase(OCConstants.LOYALTY_TRANSACTION_REDEMPTION)){
			LoyaltyRedemptionResponse loyaltyRedemptionResponse = (LoyaltyRedemptionResponse)sourceOCJSONRespObj;
			return convertRedemptionResponse(loyaltyRedemptionResponse);
		}
		return null;
		
	}
	
	public LoyaltyEnrollResponseObject convertEnrollmentResponse(LoyaltyEnrollResponse loyaltyEnrollResponse){
		
		LoyaltyEnrollResponseObject loyaltyEnrollResponseObject = new LoyaltyEnrollResponseObject();
		
		List<MatchedCustomer> matchedCustomers = loyaltyEnrollResponse.getMatchedCustomers();
		MatchedCustomer matchedCustomer = matchedCustomers.get(0);//TODO confirm at least one customer will be there inside it.
		
		CustomerInfo customerInfo = new CustomerInfo();
		customerInfo.setCUSTOMERID(matchedCustomer.getCustomerId());
		customerInfo.setEMAIL(matchedCustomer.getEmailAddress());
		customerInfo.setPHONE(matchedCustomer.getPhone());
		customerInfo.setFIRSTNAME(matchedCustomer.getFirstName());
		customerInfo.setLASTNAME(matchedCustomer.getLastName());
		customerInfo.setADDRESS1("");
		customerInfo.setADDRESS2("");
		
		loyaltyEnrollResponseObject.setCUSTOMERINFO(customerInfo);
		Status statusInfo = loyaltyEnrollResponse.getStatus();
		StatusInfo status = new StatusInfo(statusInfo.getErrorCode(), statusInfo.getMessage(), statusInfo.getStatus());
		loyaltyEnrollResponseObject.setSTATUS(status);
		
		AmountDetails amountDetails = new AmountDetails();
		amountDetails.setENTEREDAMOUNT("");
		amountDetails.setVALUECODE("");
		loyaltyEnrollResponseObject.setAMOUNTDETAILS(amountDetails);
		
		
		/*EnrollmentInfo enrollmentInfo = new EnrollmentInfo();
		MembershipResponse membershipResponse = loyaltyEnrollResponse.getMembership();
		enrollmentInfo.setCARDNUMBER(membershipResponse.getCardNumber());
		enrollmentInfo.setCARDPIN(membershipResponse.getCardPin());
		enrollmentInfo.set*/
		
		
		/*HeaderInfo headerInfo = new HeaderInfo();
		ResponseHeader responseHeaderInfo = loyaltyEnrollResponse.getHeader();
		headerInfo.setREQUESTID(responseHeaderInfo.getRequestId());
		headerInfo.setPCFLAG("");//TODO need to chek impact when PCflagis not there
		*/
		
		
		return loyaltyEnrollResponseObject;
	}
	
	public LoyaltyIssuanceResponseObject convertIssuanceResponse(LoyaltyIssuanceResponse loyaltyIssuanceResponse){
		
		LoyaltyIssuanceResponseObject loyaltyIssuanceResponseObject = new LoyaltyIssuanceResponseObject();
		
		return loyaltyIssuanceResponseObject;
	}
	
	public LoyaltyRedemptionResponseObject convertRedemptionResponse(LoyaltyRedemptionResponse loyaltyRedemptionResponse){
		
		return null;
	}
	
	
	public LoyaltyEnrollRequest convertEnrollmentRequest(LoyaltyEnrollRequestObject loyaltyEnrolRequestObject) {
		
		
		
		LoyaltyEnrollRequest loyaltyEnrollRequest = new LoyaltyEnrollRequest();
		HeaderInfo headerInfo = loyaltyEnrolRequestObject.getHEADERINFO();
		RequestHeader requestHeader = new RequestHeader(headerInfo.getREQUESTID(), MyCalendar.calendarToString(Calendar.getInstance(), MyCalendar.FORMAT_DATETIME_STYEAR), 
										headerInfo.getPCFLAG(), headerInfo.getSTORENUMBER(), null, null, null);
		loyaltyEnrollRequest.setHeader(requestHeader);
		
		MembershipRequest membershipRequest = new MembershipRequest();
		EnrollmentInfo enrollmentInfo = loyaltyEnrolRequestObject.getENROLLMENTINFO();
		membershipRequest.setCardNumber(enrollmentInfo.getCARDNUMBER());
		membershipRequest.setCardPin(enrollmentInfo.getCARDPIN());
		if(membershipRequest.getCardNumber() == null || membershipRequest.getCardNumber().trim().length() == 0) {
			
			membershipRequest.setIssueCardFlag("Y");
		}
		membershipRequest.setPhoneNumber("");
		loyaltyEnrollRequest.setMembership(membershipRequest);
		
		
		Customer customer = new Customer();
		CustomerInfo customerInfo = loyaltyEnrolRequestObject.getCUSTOMERINFO();
		customer.setCustomerId(customerInfo.getCUSTOMERID());
		customer.setEmailAddress(customerInfo.getEMAIL());
		customer.setPhone(customerInfo.getPHONE());
		customer.setFirstName(customerInfo.getFIRSTNAME());
		customer.setLastName(customerInfo.getLASTNAME());
		customer.setAddressLine1(customerInfo.getADDRESS1());
		customer.setAddressLine2(customerInfo.getADDRESS2());
		customer.setBirthday(customerInfo.getBIRTHDAY());
		customer.setAnniversary(customerInfo.getANNIVERSARY());
		customer.setGender(customerInfo.getGENDER());
		customer.setCity(customerInfo.getCITY());
		customer.setState(customerInfo.getSTATE());
		customer.setPostal(customerInfo.getPOSTAL());
		customer.setCountry(customerInfo.getCOUNTRY());
		loyaltyEnrollRequest.setCustomer(customer);
		
		LoyaltyUser loyaltyUser = new LoyaltyUser();
		UserDetails userDetails = loyaltyEnrolRequestObject.getUSERDETAILS();
		loyaltyUser.setUserName(userDetails.getUSERNAME());
		loyaltyUser.setToken(userDetails.getTOKEN());
		loyaltyUser.setOrganizationId(userDetails.getORGANISATION());
		loyaltyEnrollRequest.setUser(loyaltyUser);
		
		return loyaltyEnrollRequest;
		
		
	}
	
	public LoyaltyIssuanceRequest convertIssuanceRequest(LoyaltyIssuanceRequestObject loyaltyIssuanceRequestObject) {
		
		
		
		LoyaltyIssuanceRequest loyaltyIssuanceRequest = new LoyaltyIssuanceRequest();
		HeaderInfo headerInfo = loyaltyIssuanceRequestObject.getHEADERINFO();
		RequestHeader requestHeader = new RequestHeader(headerInfo.getREQUESTID(), MyCalendar.calendarToString(Calendar.getInstance(), MyCalendar.FORMAT_DATETIME_STYEAR), 
										headerInfo.getPCFLAG(), headerInfo.getSTORENUMBER(), loyaltyIssuanceRequestObject.getISSUANCEINFO().getEMPID(), null, null);
		loyaltyIssuanceRequest.setHeader(requestHeader);
		
		MembershipRequest membershipRequest = new MembershipRequest();
		membershipRequest.setCardNumber(loyaltyIssuanceRequestObject.getISSUANCEINFO().getCARDNUMBER());
		membershipRequest.setCardPin(loyaltyIssuanceRequestObject.getISSUANCEINFO().getCARDPIN());
		//membershipRequest.setIssueCardFlag(null);
		//membershipRequest.setPhoneNumber(null);
		loyaltyIssuanceRequest.setMembership(membershipRequest);
		
		Amount amount = new Amount();
		amount.setType(OCConstants.LOYALTY_TYPE_PURCHASE);
		amount.setEnteredValue(loyaltyIssuanceRequestObject.getISSUANCEINFO().getENTEREDAMOUNT());
		amount.setValueCode(OCConstants.LOYALTY_TYPE_CURRENCY);
		loyaltyIssuanceRequest.setAmount(amount);
		
		Discounts discounts = new Discounts();
		discounts.setAppliedPromotion("NA");
		List<Promotion> promotions = new ArrayList<Promotion>();
		discounts.setPromotions(promotions);
		loyaltyIssuanceRequest.setDiscounts(discounts);
		
		List<SkuDetails> items = new ArrayList<SkuDetails>();
		loyaltyIssuanceRequest.setItems(items);
		
		Customer customer = new Customer();
		customer.setCustomerId(loyaltyIssuanceRequestObject.getISSUANCEINFO().getCUSTOMERID());
		loyaltyIssuanceRequest.setCustomer(customer);
		/*customer.setEmailAddress(customerInfo.getEMAIL());
		customer.setPhone(customerInfo.getPHONE());
		customer.setFirstName(customerInfo.getFIRSTNAME());
		customer.setLastName(customerInfo.getLASTNAME());
		customer.setAddressLine1(customerInfo.getADDRESS1());
		customer.setAddressLine2(customerInfo.getADDRESS2());
		customer.setBirthday(customerInfo.getBIRTHDAY());
		customer.setAnniversary(customerInfo.getANNIVERSARY());
		customer.setGender(customerInfo.getGENDER());
		customer.setCity(customerInfo.getCITY());
		customer.setState(customerInfo.getSTATE());
		customer.setPostal(customerInfo.getPOSTAL());
		customer.setCountry(customerInfo.getCOUNTRY());
		loyaltyEnrollRequest.setCustomer(customer);*/
		
		
		
		LoyaltyUser loyaltyUser = new LoyaltyUser();
		UserDetails userDetails = loyaltyIssuanceRequestObject.getUSERDETAILS();
		loyaltyUser.setUserName(userDetails.getUSERNAME());
		loyaltyUser.setToken(userDetails.getTOKEN());
		loyaltyUser.setOrganizationId(userDetails.getORGANISATION());
		loyaltyIssuanceRequest.setUser(loyaltyUser);
		
		return loyaltyIssuanceRequest;
		
		
	}
	
public LoyaltyRedemptionRequest convertRedemptionRequest(LoyaltyRedemptionRequestObject loyaltyRedemptionRequestObject) {
		
		
		
		LoyaltyRedemptionRequest LoyaltyRedemptionRequest = new LoyaltyRedemptionRequest();
		HeaderInfo headerInfo = loyaltyRedemptionRequestObject.getHEADERINFO();
		RequestHeader requestHeader = new RequestHeader(headerInfo.getREQUESTID(), MyCalendar.calendarToString(Calendar.getInstance(), MyCalendar.FORMAT_DATETIME_STYEAR), 
										headerInfo.getPCFLAG(), headerInfo.getSTORENUMBER(), loyaltyRedemptionRequestObject.getREDEMPTIONINFO().getEMPID(), null, null);
		LoyaltyRedemptionRequest.setHeader(requestHeader);
		
		MembershipRequest membershipRequest = new MembershipRequest();
		membershipRequest.setCardNumber(loyaltyRedemptionRequestObject.getREDEMPTIONINFO().getCARDNUMBER());
		membershipRequest.setCardPin(loyaltyRedemptionRequestObject.getREDEMPTIONINFO().getCARDPIN());
		//membershipRequest.setIssueCardFlag(null);
		//membershipRequest.setPhoneNumber(null);
		LoyaltyRedemptionRequest.setMembership(membershipRequest);
		
		Amount amount = new Amount();
		amount.setType(OCConstants.LOYALTY_TYPE_PURCHASE);
		amount.setEnteredValue(loyaltyRedemptionRequestObject.getREDEMPTIONINFO().getENTEREDAMOUNT());
		String valueCode = loyaltyRedemptionRequestObject.getREDEMPTIONINFO().getVALUECODE();
		if(valueCode!= null && !valueCode.trim().isEmpty()) {
			if(valueCode.equals(OCConstants.LOYALTY_USD)) {
				amount.setValueCode(OCConstants.LOYALTY_TYPE_CURRENCY );
			}else if(valueCode.equalsIgnoreCase(OCConstants.LOYALTY_POINTS)) {
				
				amount.setValueCode(OCConstants.LOYALTY_TYPE_POINTS );
			}
			
		}
		LoyaltyRedemptionRequest.setAmount(amount);
		
		LoyaltyRedemptionRequest.setOtpCode("");
		
		Discounts discounts = new Discounts();
		discounts.setAppliedPromotion("NA");
		List<Promotion> promotions = new ArrayList<Promotion>();
		discounts.setPromotions(promotions);
		LoyaltyRedemptionRequest.setDiscounts(discounts);
		
		
		
		Customer customer = new Customer();
		customer.setCustomerId(loyaltyRedemptionRequestObject.getREDEMPTIONINFO().getCUSTOMERID());
		/*customer.setEmailAddress(customerInfo.getEMAIL());
		customer.setPhone(customerInfo.getPHONE());
		customer.setFirstName(customerInfo.getFIRSTNAME());
		customer.setLastName(customerInfo.getLASTNAME());
		customer.setAddressLine1(customerInfo.getADDRESS1());
		customer.setAddressLine2(customerInfo.getADDRESS2());
		customer.setBirthday(customerInfo.getBIRTHDAY());
		customer.setAnniversary(customerInfo.getANNIVERSARY());
		customer.setGender(customerInfo.getGENDER());
		customer.setCity(customerInfo.getCITY());
		customer.setState(customerInfo.getSTATE());
		customer.setPostal(customerInfo.getPOSTAL());
		customer.setCountry(customerInfo.getCOUNTRY());
		loyaltyEnrollRequest.setCustomer(customer);*/
		
		
		
		LoyaltyUser loyaltyUser = new LoyaltyUser();
		UserDetails userDetails = loyaltyRedemptionRequestObject.getUSERDETAILS();
		loyaltyUser.setUserName(userDetails.getUSERNAME());
		loyaltyUser.setToken(userDetails.getTOKEN());
		loyaltyUser.setOrganizationId(userDetails.getORGANISATION());
		LoyaltyRedemptionRequest.setUser(loyaltyUser);
		
		return LoyaltyRedemptionRequest;
		
		
	}
	
	
}
