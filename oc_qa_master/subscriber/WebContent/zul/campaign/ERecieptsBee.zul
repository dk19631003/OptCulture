<zk>
	<window id="eReceiptTemplatesBeeEditorWinId" apply="org.mq.marketer.campaign.controller.campaign.EReceiptsBeeEditorController" width="100%" xmlns:h="native">
		<style>



			.redStar{ font-size:14px;color:red; }

			
			<![CDATA[ .z-label { font-size: 13px; font-family:
			arial,sans-serif; } .z-radio { display: inline; }


			]]>
			
			
   </style>

	<style src="/css/editor.css"/>
	
	<div id="toolhide" style="display:none;">
	<h:br/>
	<label style="font-size: 13px;font-family: arial,sans-serif;font-weight:bold">Template Name: </label><label id="tempLbName"/>
	<h:table cellspacing="0" cellpadding="2" width="100%">
		<h:tr height="50" >
		<h:td width="410" valign="bottom" align="left">

			<label value="Email Content Name" id="emlContentLblId" visible="${source == 1}"/>
				<textbox id="contentNameTBId" visible="${source == 1}"/>
				<toolbarbutton id="plainPreviewImgId" label="Preview" width="80px" sclass="alink"   
					image="/img/icons/icon_preview_big_bee.png"  style="font-weight: bold;" />	
				<toolbarbutton id="promoId" tooltip="help2" image="/img/icons/rsz_info-icon_bee.png" sclass="alink"  width="250px" label="Merge Tags/Discount Codes/Barcodes" style="font-weight: bold;" />		

				<popup id="help2"   width="400px" style="bgcolor:#CCCCCC" >
								<h:table >
									<h:tr>
										<h:td>
											<label  value="To insert merge tags within text blocks, type'@' and select from list." class="labelPos" />
										</h:td>
									</h:tr>
									
									<h:tr>
										<h:td>
											<label  value="To insert discount codes within text blocks, select “special links” from the text formatting options, click on “DiscountCodes”, and select from list. " sclass="labelPos" />
										</h:td>
									</h:tr>	
									
									<h:tr>
										<h:td>
											<label  value="To insert barcodes, select the “Dynamic Content” block and select from list." class="labelPos" />
										</h:td>
									</h:tr>							
								</h:table>								
							
							</popup>
				<toolbarbutton id="promoId2" tooltip="help3" image="/img/icons/rsz_info-icon_bee.png" sclass="alink"  width="80px" label="Images" style="font-weight: bold;" />		

				<popup id="help3"   width="400px" style="bgcolor:#CCCCCC" >
								<h:table >
									<h:tr>
										<h:td>
											<label  value="Image/folder names should be alpha-numeric. Special characters allowed are spaces, 
											'%','&amp;','+','-',';','=','@','^' and '_'  If any other characters are used, images may not be rendered." class="labelPos" />
										</h:td>
									</h:tr>
								
									<h:tr>
										<h:td>
											<label  value="Please ensure that images are below 10 megabytes in file size before uploading to OptCulture. Images can be resized using the free tool at https://www.aviary.com/." class="labelPos" />
										</h:td>
									</h:tr>
									
									<h:tr>
										<h:td>
											<label  value="Hint: Images under 1000px on both sides will be well below 10MB." sclass="labelPos" />
										</h:td>
									</h:tr>								
								</h:table>								
							
							</popup>
						
		</h:td>
		<h:td align="center" valign="bottom" width="270" style="padding-bottom:8px;">
					<label value="" id="autoSaveLbId" style = "color:#0063A1;font-weight: bold;" />		
		</h:td>
		
		<h:td width="340" valign="bottom" align="right">
			<div>
				<toolbarbutton id="saveasdraftBtnId" image="/img/icons/icon_save_mytemplates_bee.png" sclass="alink"  width="160px" label="Save As Draft"  style="font-weight: bold;"/>
				<toolbarbutton id="sendTestBtnId" image="/img/icons/Send-test-DR-Icon_2_bee.png" sclass="alink"  width="120px" label="Send Test Mail" style="font-weight: bold;"/>
			</div>
		
		</h:td>
		</h:tr>
	</h:table>
	
	</div>
	<window id="testWinId" visible="false" closable="true" title="Send Test Mail" 
						height="200px" width="350px" xmlns:h="http://www.zkoss.org/2005/zk/native"
											onClose="self.setVisible(false);event.stopPropagation();">
						<h:table style="padding:10px;">
							<h:tr>
								<h:td colspan="3"><label id="msgLblId" style="color:red;font-family:verdana;font-size:11px;"/></h:td>
							</h:tr>
							<h:tr>
								<h:td colspan="1"><label value="Email address:" /></h:td>
								<h:td colspan="2"><textbox  id="testTbId"  width="160px"/></h:td>
							</h:tr>
							<h:tr>
								<h:td/>
								
								<h:td  colspan="2" valign="center">	
									<image src="/img/icons/icon_i.png"  style="vertical-align:bottom;"/>	
									<label value="To send a test email to multiple email addresses, enter the addresses comma separated." style="vertical-align:bottom;" sclass="labelPos" />
								</h:td>
								
								
							</h:tr>
							<h:tr height="10" />
							<h:tr>
								<h:td><button label="Send" id="sendTestMailBtnId" /></h:td>
								<h:td><button label="Cancel" id="cancelSendTestMailBtnId" /></h:td>
							</h:tr>
						</h:table>
					</window>
	
	<window id="previewIframeWin" title="Preview" border="normal" mode="overlapped" visible="false" position="center">
		<caption>
			<toolbarbutton label="Close" onClick="previewIframeWin.setVisible(false);event.stopPropagation();" />
		</caption>
		<div id="contentDiv1Id" width="750px" height="500px" style="overflow:auto">
		<iframe id="iframeId" width="100%" height="100%"/>
		</div>
	</window>
	
		<h:table cellspacing="0" cellpadding="2" width="100%" >
				
				<h:tr>
					
				
				<h:td>
					<groupbox closable="false">
						<caption  label="Editor"/>
							 <textbox id="htmlTextBoxId" visible="false" value="EMPTY_HTML"/>
   							 <textbox id="jsonTextBoxId" visible="false" value="EMPTY_JSON"/>
    						 <textbox id="caretPosSE" visible="false" value="EMPTY_HTML"/>
    						 <textbox id="jsonAutoSaveTextBoxId" visible="false" value="EMPTY_JSON"/>
    						 <textbox id="nextButtonHtmlTextBoxId" visible="false" value="EMPTY_HTML"/>
   							 <textbox id="nextButtonJsonTextBoxId" visible="false" value="EMPTY_JSON"/>
   							 <textbox id="errormsg" visible="false"/>
   							 
   							 <textbox id="sendMethodHtmlTextBoxId" visible="false" value="EMPTY_HTML"/>
   							 <textbox id="autoSaveJsonTextBoxId" visible="false" value="EMPTY_JSON"/>
   							 
   							 <textbox id="saveRowshtmlTextBoxId" visible="false" value="SAVE_ROWS_EMPTY_HTML"/>
   							 <textbox id="saveRowsjsonTextBoxId" visible="false" value="SAVE_ROWS_EMPTY_JSON"/>
   							 <textbox id="saveRowspagejsonTextBoxId" visible="false" value="SAVE_ROWS_EMPTY_PAGEJSON"/>
   							 
<html> 

<![CDATA[
  <head>
  <title>BEE Plugin - Integration Example</title>
    <meta charset="utf-8" />
    <meta name="viewport" content_area_width="width:600px, initial-scale=1" />
     <script   type="text/javascript"  >
     var namevalue = '${userName}';
  	

    var savehtml = function(filename, htmlcontent,jsoncontent) {
    	
    	updateCaretPosition(htmlcontent);
    	
    	
    };

    var autosave = function(jsonFile,htmlFile) {
    	
 		var d = new Date();
		var n = d.getTime();
 		console.log(' autosave :'+n);
 		updateJsonContents(jsonFile,null)
 		
    };
    
	var savejson = function(filename, content) {
		
    	updateCaretJson(content);
    	

    };
    
    var saverowsjsonhtmlcontent = function(rowsjsonFile, htmlFile, pagejson) {
    	console.log("rowsjsonFile :::"+rowsjsonFile);
       	//alert('bee onSaveRow');
    	updateSaveRowsHtmlJsonContents(rowsjsonFile, htmlFile, pagejson)
    };

    function updateSaveRowsHtmlJsonContents(rowsjsonFile, htmlFile, pagejson) {
        // get the zk widgets
        var htmlTextBox = zk.Widget.$(jq('$saveRowshtmlTextBoxId'))
        var jsonTextBox = zk.Widget.$(jq('$saveRowsjsonTextBoxId'))
        
        var pagejsonTextBox = zk.Widget.$(jq('$saveRowspagejsonTextBoxId'))
      
        // get the js elements
        var jsHtmlTextBox = document.getElementById(htmlTextBox.uuid)
        var jsJsonTextBox = document.getElementById(jsonTextBox.uuid)
        
        var pagejsJsonTextBox = document.getElementById(pagejsonTextBox.uuid)
                
		// set the contents in the hidden text fields
		if(htmlFile!=null){
        	jsHtmlTextBox.value = htmlFile;
        	htmlTextBox = htmlFile;
		}
        jsJsonTextBox.value = rowsjsonFile;        
        jsonTextBox = rowsjsonFile;
      
        pagejsJsonTextBox.value = pagejson;        
        pagejsonTextBox = pagejson;
      
        
        // trigger an event to send the contents to the server
		if (document.createEvent) {
			var evt = document.createEvent('HTMLEvents');
			evt.initEvent( 'blur', false, false);
			jsHtmlTextBox.dispatchEvent(evt);
			jsJsonTextBox.dispatchEvent(evt);
			
			pagejsJsonTextBox.dispatchEvent(evt);
			
			
			var evt2 = document.createEvent('HTMLEvents');
			evt2.initEvent( 'change', false, false);
			jsHtmlTextBox.dispatchEvent(evt2);
			jsJsonTextBox.dispatchEvent(evt2);
			
			pagejsJsonTextBox.dispatchEvent(evt2);
			
			////alert('Alert After evt2 document.createEvent.....');

		} 
		else if (document.createEventObject) {
			
			jsJsonTextBox.fireEvent('onchange');	
		}
	}

    
    
    
 var savejsonhtmlcontent = function(jsonFile, htmlFile) {
    	updateHtmlJsonContents(jsonFile,htmlFile)
    };
   var isnextbutton = null;
    function updateHtmlJsonContents(jsonFile,htmlFile) {
        // get the zk widgets
        var htmlTextBox = zk.Widget.$(jq('$htmlTextBoxId'))
        var jsonTextBox = zk.Widget.$(jq('$jsonTextBoxId')) 
      
        // get the js elements
        var jsHtmlTextBox = document.getElementById(htmlTextBox.uuid)
        var jsJsonTextBox = document.getElementById(jsonTextBox.uuid)
        
		// set the contents in the hidden text fields
		if(htmlFile!=null){
        	jsHtmlTextBox.value = htmlFile;
        	htmlTextBox = htmlFile;
		}
        jsJsonTextBox.value = jsonFile;        
        jsonTextBox = jsonFile;
      
        // trigger an event to send the contents to the server
		if (document.createEvent) {
			var evt = document.createEvent('HTMLEvents');
			evt.initEvent( 'blur', false, false);
			jsHtmlTextBox.dispatchEvent(evt);
			jsJsonTextBox.dispatchEvent(evt); 
			
			var evt2 = document.createEvent('HTMLEvents');
			evt2.initEvent( 'change', false, false);
			jsHtmlTextBox.dispatchEvent(evt2);
			jsJsonTextBox.dispatchEvent(evt2);
			////alert('Alert After evt2 document.createEvent.....');

		} 
		else if (document.createEventObject) {
			
			jsJsonTextBox.fireEvent('onchange');	
		}
	}
    
    
    function updateHtmlJsonContentsNextButton(jsonFile,htmlFile) {
        // get the zk widgets
        var htmlTextBox = zk.Widget.$(jq('$nextButtonHtmlTextBoxId'))
        var jsonTextBox = zk.Widget.$(jq('$nextButtonJsonTextBoxId')) 
      
        // get the js elements
        var jsHtmlTextBox = document.getElementById(htmlTextBox.uuid)
        var jsJsonTextBox = document.getElementById(jsonTextBox.uuid)
        
		// set the contents in the hidden text fields
		if(htmlFile!=null){
        	jsHtmlTextBox.value = htmlFile;
        	htmlTextBox = htmlFile;
		}
        jsJsonTextBox.value = jsonFile;        
        jsonTextBox = jsonFile;
       
        // trigger an event to send the contents to the server
		if (document.createEvent) {
			var evt = document.createEvent('HTMLEvents');
			evt.initEvent( 'blur', false, false);
			jsHtmlTextBox.dispatchEvent(evt);
			jsJsonTextBox.dispatchEvent(evt); 
			
			var evt2 = document.createEvent('HTMLEvents');
			evt2.initEvent( 'change', false, false);
			jsHtmlTextBox.dispatchEvent(evt2);
			jsJsonTextBox.dispatchEvent(evt2);
			
		} 
		else if (document.createEventObject) {
			jsJsonTextBox.fireEvent('onchange');
		}
	}

    
    
    
    function updateJsonAutoSave(jsonFile,htmlFile){
    		
    		// get the zk widgets
        	var htmlTextBox = zk.Widget.$(jq('$htmlTextBoxId'))
        	var jsonTextBox = zk.Widget.$(jq('$jsonAutoSaveTextBoxId')) 
    	      
            // get the js elements
           var jsHtmlTextBox = document.getElementById(htmlTextBox.uuid)
            var jsJsonTextBox = document.getElementById(jsonTextBox.uuid)
            
    		// set the contents in the hidden text fields
    		if(htmlFile!=null){
            	jsHtmlTextBox.value = htmlFile;
            	htmlTextBox = htmlFile;
    		}
            jsJsonTextBox.value = jsonFile;        
            jsonTextBox = jsonFile;
            
            // trigger an event to send the contents to the server
    		if (document.createEvent) {
    			var evt = document.createEvent('HTMLEvents');
    			evt.initEvent( 'blur', false, false);
    			jsHtmlTextBox.dispatchEvent(evt);
    			jsJsonTextBox.dispatchEvent(evt); 
    			
    			var evt2 = document.createEvent('HTMLEvents');
    			evt2.initEvent( 'change', false, false);
    			jsHtmlTextBox.dispatchEvent(evt2);
    			jsJsonTextBox.dispatchEvent(evt2);
    			
    		} 
    		else if (document.createEventObject) {
    			jsJsonTextBox.fireEvent('onchange');
    		}
    	}
    var send = function(filename, htmlFile){
    	
    	var d1 = new Date();
        var n1 = d1.getTime();
        console.log(' send :'+n1);
    	updateHtmlContents(null,htmlFile);
    	
    };
    
    function updateCaretPosition(content) {
        // get the zk widgets
        var caretPosTB = zk.Widget.$(jq('$caretPosTB'))
       
        // get the js elements
        var jsCaretPosTB = document.getElementById(caretPosTB.uuid)

        // get the caret position
        
        // set the caret position in the hidden text field
        jsCaretPosTB.value = content;
       
        caretPosTB = content;
        
        // trigger an event to send the caret position to the server
        if (document.createEvent) {
         var evt = document.createEvent('HTMLEvents');
         evt.initEvent( 'blur', false, false);
         jsCaretPosTB.dispatchEvent(evt);

         var evt2 = document.createEvent('HTMLEvents');
         evt2.initEvent( 'change', false, false);
         jsCaretPosTB.dispatchEvent(evt2);
        } else if (document.createEventObject) {
         jsCaretPosTB.fireEvent('onchange');
        }
    }
    
    function updateCaretAutosave(content) {
        // get the zk widgets
        var caretPosAS = zk.Widget.$(jq('$caretPosAS'))
       
        // get the js elements
        var jsCaretPosTB = document.getElementById(caretPosAS.uuid)

        // get the caret position
        
       
        // set the caret position in the hidden text field
        jsCaretPosTB.value = content;
       
        caretPosAS = content;
        
        // trigger an event to send the caret position to the server
        if (document.createEvent) {
         var evt = document.createEvent('HTMLEvents');
         evt.initEvent( 'blur', false, false);
         jsCaretPosTB.dispatchEvent(evt);

         var evt2 = document.createEvent('HTMLEvents');
         evt2.initEvent( 'change', false, false);
         jsCaretPosTB.dispatchEvent(evt2);
        } else if (document.createEventObject) {
         jsCaretPosTB.fireEvent('onchange');
        }
    }
    
    function updateCaretJson(content) {
        // get the zk widgets
        var jsonAutoSaveTextBoxId = zk.Widget.$(jq('$caretPosJB'))
       
        // get the js elements
        var jsCaretPosTB = document.getElementById(caretPosJB.uuid)

        // get the caret position
        
        
        // set the caret position in the hidden text field
        jsCaretPosTB.value = content;
       
        caretPosJB = content;
        
        // trigger an event to send the caret position to the server
        if (document.createEvent) {
         var evt = document.createEvent('HTMLEvents');
         
         evt.initEvent( 'blur', false, false);
         jsCaretPosTB.dispatchEvent(evt);
         var evt2 = document.createEvent('HTMLEvents');
         evt2.initEvent( 'change', false, false);
         jsCaretPosTB.dispatchEvent(evt2);
        } else if (document.createEventObject) {
         jsCaretPosTB.fireEvent('onchange');
        }
    }
    
    function updateCaretSend(content) {
        // get the zk widgets
        var caretPosSE = zk.Widget.$(jq('$caretPosSE'))
       
        // get the js elements
        var jsCaretPosTB = document.getElementById(caretPosSE.uuid)

        // get the caret position
        
        // set the caret position in the hidden text field
        jsCaretPosTB.value = content;
       
        caretPosSE = content;
        
        // trigger an event to send the caret position to the server
        if (document.createEvent) {
         var evt = document.createEvent('HTMLEvents');
         evt.initEvent( 'blur', false, false);
         jsCaretPosTB.dispatchEvent(evt);

         var evt2 = document.createEvent('HTMLEvents');
         evt2.initEvent( 'change', false, false);
         jsCaretPosTB.dispatchEvent(evt2);
        } else if (document.createEventObject) {
         jsCaretPosTB.fireEvent('onchange');
        }
    }
   	
    
    //AutoSaveJSON
    function updateJsonContents(jsonFile,htmlFile) {
        // get the zk widgets
        //console.log(' jsonFile :'+jsonFile);
        var autoJsonTextBox = zk.Widget.$(jq('$autoSaveJsonTextBoxId')) 
      
        // get the js elements
        var jsJsonTextBox = document.getElementById(autoJsonTextBox.uuid)
        
		// set the contents in the hidden text fields
        jsJsonTextBox.value = jsonFile;       
        autoJsonTextBox = jsonFile;
      
        // trigger an event to send the contents to the server
		if (document.createEvent) {
			var evt = document.createEvent('HTMLEvents');
			evt.initEvent( 'blur', false, false);
			jsJsonTextBox.dispatchEvent(evt); 
			
			var evt2 = document.createEvent('HTMLEvents');
			evt2.initEvent( 'change', false, false);
			jsJsonTextBox.dispatchEvent(evt2);
			//alert('autosave onchange111111111');
			////alert('Alert After evt2 document.createEvent.....');

		} 
		else if (document.createEventObject) {
			//alert('autosave onchange2222222');
			jsJsonTextBox.fireEvent('onchange');	
		}
	}
    
    
  //AutoSaveHTML
    function updateHtmlContents(jsonFile,htmlFile) {
        // get the zk widgets
        var htmlTextBox = zk.Widget.$(jq('$sendMethodHtmlTextBoxId'))
      
        // get the js elements
        var jsHtmlTextBox = document.getElementById(htmlTextBox.uuid)
        
		// set the contents in the hidden text fields
		jsHtmlTextBox.value = htmlFile;
       	htmlTextBox = htmlFile;
		
       
        // trigger an event to send the contents to the server
		if (document.createEvent) {
			var evt = document.createEvent('HTMLEvents');
			evt.initEvent( 'blur', false, false);
			jsHtmlTextBox.dispatchEvent(evt);
			
			var evt2 = document.createEvent('HTMLEvents');
			evt2.initEvent( 'change', false, false);
			jsHtmlTextBox.dispatchEvent(evt2);
			//alert('bee send onchange111111');
			
		} 
		else if (document.createEventObject) {
			jsHtmlTextBox.fireEvent('onchange');
			//alert('bee send onchange222222');

		}
	}
    
var bee = null;
var mytemplate;
var beekey;
var requestFrom = 'e_receipt'
var beeConfig;
var specialLinks78;
var mergeTags78;
var barCodes78;
     
function initialcall(){
	$.getScript("js/beeCommonFile.js", function() {
	specialLinks78 = specialLinks79;	
    mergeTags78 = mergeTags97;
  	barCodes78=barCodes80;
    mytemplate = mytemplates;
    beekey  =beeclientkey;
    
    var loadTemplate = function(e) {
      var templateFile = e.target.files[0];
      var reader = new FileReader();

      reader.onload = function() {
        var templateString = reader.result;
        var template = JSON.parse(templateString);
      };

      reader.readAsText(templateFile);
    };

       setTimeout( function errormessage() {
           // get the zk widgets
           if (bee==null){
           var beeeror = zk.Widget.$(jq('$errormsg'))
          
         
           // get the js elements
           var errors = document.getElementById(beeeror.uuid);
           
           
   			errors.value = "bee is not loaded"; 
           if (document.createEvent) {
   			var evt = document.createEvent('HTMLEvents');
   			evt.initEvent( 'blur', false, false);
   			errors.dispatchEvent(evt);
   			
   			var evt2 = document.createEvent('HTMLEvents');
   			
   			evt2.initEvent( 'change', false, false);
   			errors.dispatchEvent(evt2);
   			
   			
   		}
           else if (document.createEventObject) {
   			errors.fireEvent('onchange');
   			//alert('bee send onchange222222');
   			
   		}
          
           }}
   	, 30000);
	});
}

	showButtonsAfterLoad = function(){
		 	jq('$toolhide').attr('style','display:block'); 
	}
       

  </script>
  
    
  </head>
  <body>
  <div id="superdiv" style="height:650px;">
    <div id="bee-plugin-container-e_receipts" style="height:650px;">  </div>    
</div>

  </body>
  
	  
  ]]>
</html>

					</groupbox>
				</h:td>
			
			</h:tr>
		</h:table>	`
		
		<div id="toolhide1" align="right">
			<button id="saveasdraftAndCloseBtnId" label="Save &amp; Close"  sclass="idle140" />
			<button id="publishandcloseBtnId" label="Publish"  sclass="idle140 greenbtn" />
			
		</div>
	
	
		<textbox id="unameTbId" visible="false" value="${uname}" />
		<script>
			<![CDATA[
				gUser = "${unameTbId.value}";
			]]>
		</script>
	
	<!-- SubWindow -->	
	<window id="zipImport" title="Fetch HTML from URL" border="normal"  width="550px" visible="false"   height="200px"
				onClose="self.setVisible(false); event.stopPropagation();" closable="true">    
        	
        	<!-- Save In My Template Div -->
        	<div id="saveMyTemplateDivId" visible="false">
        			<h:table>
					<h:tr>
						<h:td colspan="3">
						
						<textbox id="htmlStuffId3" value="test"  visible="false"/>
						
			        	<label id="resLbId" visible="false" style="font-style:verdena;size:11px;color:red"/>
			        	
						</h:td>
					</h:tr>
					<h:tr>
						<h:td>
		        		<label value="Name :"/> <textbox id="templatNameTbId"  maxlength="25"/>
						</h:td>
						<h:td>
			        	<label value="Select folder:"/>
					     <listbox id="myTemplatesListId" width="150px" sclass="templateList" rows="1" mold="select"/>
						</h:td>
						<h:td>
		        		<button label="Submit" sclass="idle70" id="myTemplatesSubmtBtnId" />
						</h:td>
						</h:tr>
				</h:table>
        		
        		
			</div>	
			
			<!-- FetchURL  Div -->	
			<div id="fetchUrlDivId" visible="false">
			
				<h:table width="100%" height="100px;">
				<h:tr ><h:td ></h:td></h:tr>
					<h:tr><h:td  ><label value="Provide URL to fetch HTML" style="font-weight:bold;" /></h:td></h:tr>
					<h:tr ><h:td  ></h:td></h:tr>
					
					<h:tr><h:td  align="center" valign="top">
						<div align="center" style="padding-top:8px;">
							<textbox id="urlTbId"  cols="18" maxlength="60" tooltiptext="Provide URL to fetch HTML" />
							<button label="Go" id="fetchURLGoBtnId" sclass="idle"  style="margin-left:2px;"/>
							<button label="cancel" sclass="idle" onClick="zipImport.setVisible(false);"/>
						</div>
					</h:td></h:tr>
					<h:tr height="10px;"><h:td align="center" ><label id="fetchUrlErrMsgLblId" style="color:red;"/></h:td></h:tr>
				</h:table>
			</div>
			
			<!-- Upload html zip file  Div -->		
			<div id="importZipFileDivId" visible="false">
	        	<h:table xmlns:h="http://www.zkoss.org/2005/zk/native" width="100%" style="margin:10px" height="150px;">
	        	<h:tr height="20px;"><h:td ></h:td></h:tr>
	        		<h:tr>
	        			<h:td width="100px;" align="right"><label value="Browse file" sclass="theme-lbHeading"/></h:td>
	        			<h:td width="200px;" ><textbox id="selectedFileTbId"/></h:td>
	        			<h:td><button label="Browse..." id="uploadBtnId" upload="true,maxsize=-1" /> </h:td>
	        		</h:tr>
	        		<h:tr ><h:td colspan="3"></h:td></h:tr>
	        		<h:tr>
	        			<h:td colspan="3" align="right" style="padding-right:10px;">
	        				<h:div>
	        					<button label="Upload" id="zipUploadBtnId" ></button>
	        					<button label="Cancel" id="cancelBtnId"  />
	        					<toolbarbutton label="Whats Allowed?" popup="popup" />
	        					<popup id="popup" width="400px">
									<html>
										<![CDATA[
										  <div>
										  	Zip file can contain the following files <br/>
										   	<ul style="padding-left:15px;">
										   		<li> One .html/.htm file is allowed.</li>
										   		<li> All your images should be in web formats (png,gif,jpg,bmp).</li>
										   		<li> Required inline CSS.</li>
										   		<li> HTML file size should be less than 1MB.</li>
										   	</ul>
										   
										   </div>
										]]>
									</html>
								</popup>
	        				</h:div>
	        			</h:td>
	        		</h:tr>
	        		
	        		<h:tr>
						<h:td colspan="3" align="center" height="20px;">
							<h:div style="margin-top:5px;"><label id="resultLblId" value="" style="color:red;" />
							</h:div>
							<h:br/>
						</h:td>
					</h:tr>
	        	</h:table>	
								
	        </div> 
	    </window>
		
		
		
		
	<!-- Check and remove below div -->
		
	  <!-- <timer id="autoSaveTimerId" delay="60000" repeats="true" >
				
		</timer>	 -->	
		
		
		
		<window id="winId" title="Save Template" border="normal"
			visible="false" width="550px" height="250px" closable="true"
			onClose="self.setVisible(false); event.stopPropagation();">

			<h:table align="center">
				<h:tr width="100%">
					<h:td colspan="3">

						<textbox id="htmlStuffId" value="test"
							visible="false" />

						<label id="resLbId" visible="false"
							style="font-style:verdena;size:11px;color:red" />

					</h:td>
				</h:tr>
				<h:tr height="30px" width="100%">
					<h:td>
						<label value="Template Name :" />
						</h:td>
						<h:td>
						<textbox id="templatNameTbId" maxlength="30" />
					</h:td>
					</h:tr>
					<h:tr height="30px">
					<h:td>
						<button label="Save" sclass="idle70 greenbtn" width="100px"
							id="myTemplatesSubmtBtnId" />
							<button label="Cancel" width="100px"
								id="modifyCancelBtnId"
								onClick="winId.setVisible(false)" />
						</h:td>
					</h:tr>
					<h:tr>
					<h:td align="left" colspan="3">
						<label value="" id="errorMsgLblId"
							style="color:red;" />
					</h:td>
				</h:tr>
			</h:table>

		</window>
	<window id="newLabelCreationWinId" title="Add New Label" border="normal"
			visible="false" width="450px" height="200px" closable="true"
			onClose="self.setVisible(false); event.stopPropagation();">
				<h:table border="0" width="100%" cellspacing="10px;"
					align="center">
					<h:tr height="20px;"/>
						<h:tr>
						<h:td width="200px" align="right">
							Label  Name:
						</h:td>
						<h:td>
							<textbox id="newLabelName" value=" "
								maxlength="20" />
						</h:td>
					</h:tr>
						 <h:tr>
				<h:td  align="right">
					<label value="Select the Account:" /></h:td>
					<h:td>
						<listbox id="LabelsubAccListId" width="200px"  mold="select" />
					</h:td>
					</h:tr> 
					<h:tr>
						<h:td align="right">
							<button sclass="idle70 greenbtn"
								label="Add Label" id="okBtnId" />
						</h:td>
						<h:td align="left">
							<button label="Cancel" sclass="idle"
								id="modifyCancelBtnId"
								onClick="newLabelCreationWinId.setVisible(false)" />
						</h:td>
					</h:tr>

					<h:tr>

						<h:td align="left" colspan="2">
							<h:div>
								<label value="" id="folderErrorMsgLblId"
									style="color:red;" />
							</h:div>
						</h:td>

					</h:tr>
				</h:table>
		</window>
		
    </window>	
    	
</zk>



