package org.mq.marketer.campaign.beans;

import java.util.Calendar;
import java.util.TimeZone;

import org.mq.marketer.campaign.custom.MyCalendar;

// Generated 28 Jan, 2010 3:08:13 PM by Hibernate Tools 3.2.0.CR1



/**
 * Schedule generated by hbm2java
 */
@SuppressWarnings("serial")
public class CampaignSchedule  implements java.io.Serializable,Comparable {


     private Long csId;
     private Long campaignId;
     private Calendar scheduledDate;
     private Long crId;
     private byte criteria;
     private Long parentId;
     private byte status;
     private byte resendLevel;
     private EmailContent emailContent;
     private Users user;

    public Users getUser() {
		return user;
	}

	public void setUser(Users user) {
		this.user = user;
	}

	public CampaignSchedule() {
    }
	
	public EmailContent getEmailContent() {
		return emailContent;
	}

	public void setEmailContent(EmailContent emailContent) {
		this.emailContent = emailContent;
	}

	
    
    public CampaignSchedule(Long csId, Calendar scheduledDate, byte criteria) {
    	this.csId = csId;
    	this.scheduledDate = scheduledDate;
    	this.criteria = criteria;
    }

    public CampaignSchedule(Long csId, Calendar scheduledDate, Long campaignId,
    		byte status, byte criteria) {
    	
    	this.csId = csId;
    	this.scheduledDate = scheduledDate;
    	this.campaignId = campaignId;
    	this.status = status;
    	this.criteria = criteria;
    	
    }

	public Long getCsId() {
		return csId;
	}

	public void setCsId(Long csId) {
		this.csId = csId;
	}

	public Long getCampaignId() {
		return campaignId;
	}

	public void setCampaignId(Long campaignId) {
		this.campaignId = campaignId;
	}

	public Calendar getScheduledDate() {
		return scheduledDate;
	}

	public void setScheduledDate(Calendar scheduledDate) {
		this.scheduledDate = scheduledDate;
	}

	public Long getCrId() {
		return crId;
	}

	public void setCrId(Long crId) {
		this.crId = crId;
	}

	public byte getCriteria() {
		return criteria;
	}

	public void setCriteria(byte criteria) {
		this.criteria = criteria;
	}

	public Long getParentId() {
		return parentId;
	}

	public void setParentId(Long parentId) {
		this.parentId = parentId;
	}
	
	/**
	 *  0 means active <br/>
	 *  1 means sent<br/>
	 *  2 means draft<br/>
	 * @return
	 */
	public byte getStatus() {
		return status;
	}
	
	public void setStatus(byte status) {
		this.status = status;
	}
	
	public byte getResendLevel() {
		return resendLevel;
	}

	public void setResendLevel(byte resendLevel) {
		this.resendLevel = resendLevel;
	}
	
	
	/**
	 * Returns the string representation of Calender in the specified timezone
	 * @param timeZone
	 * @return String value of Calender.
	 */
	public String getDateStrByTimeZone(String format, TimeZone timeZone) {
		
		return MyCalendar.calendarToString(this.scheduledDate, format, timeZone);
	}
	
	public String getDateStr() {
		return MyCalendar.calendarToString(this.scheduledDate, null, null);
	}
	
//	private String statusStr;
	public String getStatusStr() {
		switch(this.status) {
			case 0:
				return "Active";
			case 1:
				return "Sent";
			case 2:
				return "Draft";
			case 3:
//				//return "Subscription Expired";
				return "Insufficient Credits / Subscription Expired";
			case 4:
				return "Insufficient Promo-codes";
			case 5:
				return "Promotion Expired / Paused";
			case 6:
				return "Expired";
			case 7:
				return "Failed due to Empty Content";
			case 8:
				return "Promotion Deleted";
			case 9:
				return "Schedule Failure";
			default:
				return "Draft";
		}
	}
	
	
	@Override
	public boolean equals(Object obj) {
		
		if(obj == null) 
			return false;

		if(obj.getClass() != getClass()){
			return false;
		}

		CampaignSchedule tempCS = (CampaignSchedule)obj;
		
//		logger.info("~~~~~~~~~~~~~~~~~ csId :"+csId);
//		logger.info("~~~~~~~~~~~~~~~~~ this Parent :"+this.parentId);
//		logger.info("~~~~~~~~~~~~~~~~~ passed object's csId :"+tempCS.getCsId());
//		logger.info("~~~~~~~~~~~~~~~~~ passed object's Parent :"+tempCS.getParentId());
		
		if(this.scheduledDate.compareTo(tempCS.getScheduledDate()) == 0) {
			
//			logger.info("~~~~~~~~~~~~~~~~~ Dates are same-------");
			
			if((this.parentId == tempCS.getCsId())){
				return true;
			}
			else if(((this.parentId == null && tempCS.getParentId() == null)) || 
				(this.parentId != null && tempCS.getParentId() != null && 
				this.parentId.intValue() == tempCS.parentId.intValue())) {
				
				return true;
			}
			
		} // date
		
		return false;

	}
	
	@Override
	public int hashCode() {
		
		return scheduledDate.get(1) + scheduledDate.get(2) + scheduledDate.get(5) +
		scheduledDate.get(10) + scheduledDate.get(12)+  scheduledDate.get(13)+
		scheduledDate.get(14)+( parentId != null ? parentId.intValue():0);
		
	}

	@Override
	public int compareTo(Object obj) {

		if(obj == null) 
			return 1;

		if(obj instanceof CampaignSchedule) {

			CampaignSchedule tempCS = (CampaignSchedule)obj;
			
			return this.scheduledDate.compareTo(tempCS.scheduledDate);
		} 
		else {
			return 1;
		}


	}

}
