package org.mq.marketer.campaign.controller.report;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

import org.apache.commons.io.FileUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.mq.marketer.campaign.beans.CouponCodes;
import org.mq.marketer.campaign.beans.Coupons;
import org.mq.marketer.campaign.beans.POSMapping;
import org.mq.marketer.campaign.beans.Users;
import org.mq.marketer.campaign.controller.GetUser;
import org.mq.marketer.campaign.custom.MyCalendar;
import org.mq.marketer.campaign.custom.MyDatebox;
import org.mq.marketer.campaign.dao.CampaignSentDao;
import org.mq.marketer.campaign.dao.CouponCodesDao;
import org.mq.marketer.campaign.dao.OrganizationStoresDao;
import org.mq.marketer.campaign.dao.POSMappingDao;
import org.mq.marketer.campaign.dao.SMSCampaignSentDao;
import org.mq.marketer.campaign.general.Constants;
import org.mq.marketer.campaign.general.MessageUtil;
import org.mq.marketer.campaign.general.PageListEnum;
import org.mq.marketer.campaign.general.PageUtil;
import org.mq.marketer.campaign.general.PropertyUtil;
import org.mq.marketer.campaign.general.Redirect;
import org.mq.optculture.data.dao.JdbcResultsetHandler;
import org.mq.optculture.utils.OCCSVWriter;
import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.Components;
import org.zkoss.zk.ui.Sessions;
import org.zkoss.zk.ui.event.Event;
import org.zkoss.zk.ui.util.GenericForwardComposer;
import org.zkoss.zkplus.spring.SpringUtil;
import org.zkoss.zul.Combobox;
import org.zkoss.zul.Div;
import org.zkoss.zul.Filedownload;
import org.zkoss.zul.Label;
import org.zkoss.zul.Listbox;
import org.zkoss.zul.Paging;
import org.zkoss.zul.Row;
import org.zkoss.zul.Rows;
import org.zkoss.zul.event.PagingEvent;

public class CouponsController extends GenericForwardComposer {
	private static final Logger logger = LogManager.getLogger(Constants.SUBSCRIBER_LOGGER);
//	private Users currentUser;
//	private CouponDiscountGenerateDao couponDiscountGenerateDao;
//	private CouponsDao couponsDao;
//	private TimeZone clientTimeZone;
//	private Grid couponsGridId;
	private Rows couponsRowsId,promotionRedmDetailRowsId,storeRedmRowsId;
	private Div couponsReportDivId,storeReportDivId;
//	private Coupons coupons;
//	private CouponDiscountGeneration couponDiscountGeneration;
	private Paging couponListBottomPagingId,promoDetailPagingId,storePagingId;
	private MyDatebox storeFromDateboxId, storeToDateboxId;
	private Listbox pageSizeLbId,memberPerPagePromoDetailLBId,exportFilterPromoDetailLbId,memberPerPageStoreLBId;
	private Label couponLblId, validityLblId, discountLblId,storeID,promoID;
	Coupons coupObj;
	CouponCodesDao couponCodesDao;
	CampaignSentDao campaignSentDao;
	SMSCampaignSentDao SMSCampaignSentDao;
//	private RetailProSalesDao retailProsalesDao;
	private List<Map<String, Object>> storeNumberNameMapList;
	private TimeZone clientTimeZone;
	private OrganizationStoresDao organizationStoresDao;
	private String store;
	private String storeFromDateStr,storeToDateStr;
	private Users users;
//	private  String emailOrPhone ;
	public CouponsController() {
		session = Sessions.getCurrent();
//		currentUser = GetUser.getUserObj();
		
		String style = "font-weight:bold;font-size:15px;color:#313031;"
				+ "font-family:Arial,Helvetica,sans-serif;align:left";
		users = GetUser.getUserObj();
		PageUtil.setHeader("Promotion Report", "", style, true);
		
//		this.couponsDao = (CouponsDao) SpringUtil.getBean("couponsDao");
		/*this.couponDiscountGenerateDao = (CouponDiscountGenerateDao) SpringUtil
				.getBean("couponDiscountGenerateDao");*/
//		clientTimeZone = (TimeZone) session.getAttribute("clientTimeZone");

	}

	public void doAfterCompose(Component comp) throws Exception {
		// TODO Auto-generated method stub
		super.doAfterCompose(comp);
//		emailOrPhone = currentUser.getEmailId() != null ? currentUser.getEmailId() : currentUser.getPhone() != null ?currentUser.getPhone() :"";
		/*
		 * couponListBottomPagingId.setActivePage(0);
		 * couponListBottomPagingId.addEventListener("onPaging", this);
		 */
		
		if(session == null ){
			logger.error("Session Object is Null so redirecting.....");
			Redirect.goToPreviousPage();
		}
		SMSCampaignSentDao = (SMSCampaignSentDao)SpringUtil.getBean("SMSCampaignSentDao");
		campaignSentDao = (CampaignSentDao)SpringUtil.getBean("campaignSentDao");
		couponCodesDao = (CouponCodesDao) SpringUtil.getBean("couponCodesDao");
		organizationStoresDao =	(OrganizationStoresDao)SpringUtil.getBean("organizationStoresDao");
		coupObj = (Coupons) session.getAttribute("COUP_REDEEMED_DETAILS");
		logger.info(" getting coupon Obj from Session ::"+coupObj);
		clientTimeZone = (TimeZone) session.getAttribute("clientTimeZone");
		// validity
		storeNumberNameMapList  = organizationStoresDao.findStoreNumberNameMapList(GetUser.getUserObj().getUserOrganization().getUserOrgId());
		String validity = null;
		if (coupObj == null) {
			couponsReportDivId.setVisible(false);
			storeReportDivId.setVisible(true);
			store = (String)session.getAttribute("STORE_REDEEMED_DETAILS");
			storeID.setValue("Promotions redeemed at store : "+fetchStoreName(store));
			Calendar cal = MyCalendar.getNewCalendar();
			storeToDateboxId.setValue(cal);
			logger.debug("ToDate (server) :" + cal);
			//cal.set(Calendar.MONTH, cal.get(Calendar.MONTH) - 1);
			cal.set(Calendar.MONTH, cal.get(Calendar.MONTH) - 3);
			cal.set(Calendar.DATE, cal.get(Calendar.DATE) + 1);
			logger.debug("FromDate (server) :" + cal);
			storeFromDateboxId.setValue(cal);
			
			storeFromDateStr = MyCalendar.calendarToString(getStartDate(storeFromDateboxId), MyCalendar.FORMAT_DATETIME_STYEAR);
			storeToDateStr = MyCalendar.calendarToString(getEndDate(storeToDateboxId), MyCalendar.FORMAT_DATETIME_STYEAR);
			int storeListSize = couponCodesDao.findTotalCountForStore(users.getUserOrganization().getUserOrgId(),store,storeFromDateStr,storeToDateStr);
			storePagingId.setTotalSize(storeListSize);
			storePagingId.setPageSize(Integer.parseInt(memberPerPageStoreLBId.getSelectedItem().getLabel()));
			storePagingId.setActivePage(0);
			storePagingId.addEventListener("onPaging",this);
			storePagingId.setAttribute("onPaging", "store");
			fillStoreRedemption(0,Integer.parseInt(memberPerPageStoreLBId.getSelectedItem().getLabel()));
			
		}else {
			promoID.setValue("Store redemption of promotion : "+coupObj.getCouponName());
			if(coupObj.getExpiryType().equals(Constants.COUP_VALIDITY_PERIOD_STATIC)){
				validity = MyCalendar.calendarToString(
				coupObj.getCouponCreatedDate(),
				MyCalendar.FORMAT_DATEONLY_GENERAL)
				+ ""
				+ " to "
				+ MyCalendar.calendarToString(coupObj.getCouponExpiryDate(),
						MyCalendar.FORMAT_DATEONLY_GENERAL);
			}
			else if(coupObj.getExpiryType().equals(Constants.COUP_VALIDITY_PERIOD_DYNAMIC)){
				 validity = "Dynamic";
			}
		// discount
		String discount = "";
		if (coupObj.getDiscountType().equals("Percentage")) {
			discount = "% on ";
		} else {
			discount = " $ on ";
		}
		
		//discount= discount+" "+coupObj.getDiscountCriteria();
		if(coupObj.getDiscountCriteria().trim().contains("SKU")) {
			discount += " Product";
		}else {
			discount += " Receipt";
		}
		//discount = discount + " " + coupObj.getDiscountCriteria();
		
		//Coup Name
		couponLblId.setValue(coupObj.getCouponName());
		validityLblId.setValue(validity);
		discountLblId.setValue(discount);

		int totalSize = couponCodesDao.findTotCountCouponCodes(coupObj.getCouponId());
		couponListBottomPagingId.setTotalSize(totalSize);

		couponListBottomPagingId.setActivePage(0);
		couponListBottomPagingId.addEventListener("onPaging", this);
		couponListBottomPagingId.setAttribute("onPaging", "couponDetail");
		promoDetailPagingId.addEventListener("onPaging", this);
		promoDetailPagingId.setAttribute("onPaging", "storeDetail");
		int tempCount = Integer.parseInt(pageSizeLbId.getSelectedItem()
				.getLabel());
		
		getCouponCodes(0, tempCount);
		storeNumberNameMapList  = organizationStoresDao.findStoreNumberNameMapList(GetUser.getUserObj().getUserOrganization().getUserOrgId());
		int promoListSize = couponCodesDao.findTotalCountOfStoreRelatedToPromo(GetUser.getUserObj().getUserOrganization().getUserOrgId(),coupObj.getCouponId());
		setSizeOfPageAndFillPromoDetailsGrid(promoListSize);
		}
	} // doAfterCompose
	
	public void onClick$storeResetAnchId() {
		// onClick$backBtnId();
		 Calendar cal = MyCalendar.getNewCalendar();
		 storeToDateboxId.setValue(cal);
		 logger.debug("ToDate (server) :" + cal);
		 //cal.set(Calendar.MONTH, cal.get(Calendar.MONTH) - 1);
		 cal.set(Calendar.MONTH, cal.get(Calendar.MONTH) - 3);
		 cal.set(Calendar.DATE, cal.get(Calendar.DATE) + 1);
		 logger.debug("FromDate (server) :" + cal);
		 storeFromDateboxId.setValue(cal);
		 
		 onClick$getStoreBetweenDatesBtnId();
		 

	 }
	
	public void onClick$getStoreBetweenDatesBtnId() {
		
		Calendar  start = storeFromDateboxId.getClientValue();
		Calendar end = storeToDateboxId.getClientValue();
		
		if(end.before(start)) {
			MessageUtil.setMessage("'From' date cannot be later than 'To' date.", "red");
			return;
		}
		
		storeFromDateStr = MyCalendar.calendarToString(getStartDate(storeFromDateboxId), MyCalendar.FORMAT_DATETIME_STYEAR);
		storeToDateStr = MyCalendar.calendarToString(getEndDate(storeToDateboxId), MyCalendar.FORMAT_DATETIME_STYEAR);
		 
		int storeListSize = couponCodesDao.findTotalCountForStore(users.getUserOrganization().getUserOrgId(),store,storeFromDateStr,storeToDateStr);
		 
		 storePagingId.setTotalSize(storeListSize);
		 storePagingId.setActivePage(0);
		 
		 int pNo = Integer.parseInt( memberPerPageStoreLBId.getSelectedItem().getLabel());
		 fillStoreRedemption(0, pNo);
	}
	
public void onSelect$memberPerPageStoreLBId() {
		
		try {
			
			logger.info("just enter here");
			
			
			String selectStr = memberPerPageStoreLBId.getSelectedItem().getLabel();
			int pNo = Integer.parseInt(selectStr);
			
			storePagingId.setPageSize(pNo);
			storePagingId.setActivePage(0);	
				
			fillStoreRedemption(0,pNo);
			
		} catch (NumberFormatException e) {
			logger.error("Exception ::" , e);
		}
	} // onClick$memberPerPageLBId
	private int fillStoreRedemption(int fromInt, int lbxLenght) {

		try {
			int size;
			Components.removeAllChildren(storeRedmRowsId);
			
			/*int count =  promoCodeRowsId.getItemCount();
			
			for(; count>0; count--) {
				promoCodeRowsId.removeAt(count-1);
			}*/
			
			List<Map<String, Object>> promoObjArrList  = couponCodesDao.findStoreRedemptionList(users.getUserOrganization().getUserOrgId(),store, fromInt, lbxLenght,"",storeFromDateStr,storeToDateStr); //-- sm change
			
			if(promoObjArrList == null || promoObjArrList.size() == 0 ) {
				 logger.info(" *** No promo code data exists for this user");
				 return 0;
			 }
			
			 logger.info(">>> PromoObjArrList size is :"+promoObjArrList.size());
			 size = promoObjArrList.size();
			 Row tempRow = null;
			 String promo;
			 DecimalFormat decimalFormat = new DecimalFormat("#0.00");
			 for (Map<String, Object> eachMap: promoObjArrList) {
				 
				 tempRow  = new Row();
				 //SELECT promo_code, ROUND(SUM((quantity*sales_price)+tax),2) AS REVENUE , COUNT(customer_id) AS COUNT
				 //PromoCode
				 Label PromoCodeLbl = new Label();
				 if(eachMap.containsKey("name") && eachMap.get("name") != null) {
					// promo = fetchStoreName(eachMap.get("couponId").toString());
					 //PromoCodeLbl.setValue(eachMap.get("store_number").toString());
					 PromoCodeLbl.setValue(eachMap.get("name").toString());
					// PromoCodeLbl.setStyle("cursor:pointer;color:blue;text-decoration: underline;");
					// PromoCodeLbl.addEventListener("onClick", this);
					// PromoCodeLbl.setAttribute("original value", eachMap.get("store_number").toString());
				 }
				 PromoCodeLbl.setParent(tempRow);
				
				 //Revenue
				 Label revenueLbl = new Label();
				 if(eachMap.containsKey("REVENUE") && eachMap.get("REVENUE") != null) {
					 revenueLbl.setValue(decimalFormat.format(eachMap.get("REVENUE")));
				 }
				 revenueLbl.setParent(tempRow);
				 
				 //No. of customer
				 Label totalCustmerLbl = new Label();
				 if(eachMap.containsKey("COUNT") && eachMap.get("COUNT") != null) {
					 
					 totalCustmerLbl.setValue(eachMap.get("COUNT").toString());
				 }
				 totalCustmerLbl.setParent(tempRow);
				 
				
				// tempRow.setValue("store_number");
				 tempRow.setParent(storeRedmRowsId);
			}
			 return size;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error("Exception ::" , e);
			return 0;
		}
	} // fillStoreRedemption
	
public Calendar getStartDate(MyDatebox fromDateboxId){
		
		try {
			Calendar serverFromDateCal = fromDateboxId.getServerValue();
			Calendar tempClientFromCal = fromDateboxId.getClientValue();
			serverFromDateCal.set(Calendar.HOUR_OF_DAY, 
					serverFromDateCal.get(Calendar.HOUR_OF_DAY)-tempClientFromCal.get(Calendar.HOUR_OF_DAY));
			serverFromDateCal.set(Calendar.MINUTE, 
					serverFromDateCal.get(Calendar.MINUTE)-tempClientFromCal.get(Calendar.MINUTE));
			serverFromDateCal.set(Calendar.SECOND, 0);
			return serverFromDateCal;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error("Exception ::::",e);
			return null;
		}
		
	}
	
	
	
	
	public Calendar getEndDate(MyDatebox toDateboxId) {
		
		
		Calendar serverToDateCal = toDateboxId.getServerValue();
		
		Calendar tempClientToCal = toDateboxId.getClientValue();
		
		
		//change the time for startDate and endDate in order to consider right from the 
		// starting time of startDate to ending time of endDate
		
		serverToDateCal.set(Calendar.HOUR_OF_DAY, 
				23+serverToDateCal.get(Calendar.HOUR_OF_DAY)-tempClientToCal.get(Calendar.HOUR_OF_DAY));
		serverToDateCal.set(Calendar.MINUTE, 
				59+serverToDateCal.get(Calendar.MINUTE)-tempClientToCal.get(Calendar.MINUTE));
		serverToDateCal.set(Calendar.SECOND, 59);		
		
		return serverToDateCal;
		
		
		
	}
	public void getCouponCodes(int startIdx, int endIdx) {

		List<CouponCodes> couponCodeLsit = couponCodesDao.findByCouponCode(coupObj.getCouponId(), startIdx, endIdx);

		if (couponCodeLsit == null || couponCodeLsit.size() == 0) {
			logger.info(" No Promo-codes exists ");
			return;
		}

		Components.removeAllChildren(couponsRowsId);
		DecimalFormat decimalFormat = new DecimalFormat("#0.00");
		for (CouponCodes coupCodesObj : couponCodeLsit) {

			Row row = new Row();
			// Coupon Code
			row.appendChild(new Label(coupCodesObj.getCouponCode() != null ? coupCodesObj.getCouponCode() : ""));

			// Status
			row.appendChild(new Label(coupCodesObj.getStatus()));
			// issued Email Id /Mobile //TODO
			row.appendChild(new Label(coupCodesObj.getIssuedTo()  != null? coupCodesObj.getIssuedTo() : ""));
			
			// Redeemed To
			String redeemVal  = coupCodesObj.getRedeemedTo();
			row.appendChild(new Label(redeemVal  != null? redeemVal : ""));	
			
			// campaignName
			row.appendChild(new Label(coupCodesObj.getCampaignName()));

			// issued On
			row.appendChild(new Label(MyCalendar.calendarToString(
					coupCodesObj.getIssuedOn(),
					MyCalendar.FORMAT_DATETIME_STDATE , clientTimeZone)));
			// Redeemed On
			row.appendChild(new Label(MyCalendar.calendarToString(
					coupCodesObj.getRedeemedOn(),
					MyCalendar.FORMAT_DATETIME_STDATE , clientTimeZone)));
			// Store
			row.appendChild(new Label(coupCodesObj.getStoreNumber() != null ? fetchStoreName(coupCodesObj.getStoreNumber()):""));
			// total discount
			row.appendChild(new Label( coupCodesObj.getTotDiscount() != null ?""+ decimalFormat.format(coupCodesObj.getTotDiscount()) : ""));
			// ttal Revenue
			row.appendChild(new Label( coupCodesObj.getTotRevenue() != null ? ""+decimalFormat.format(coupCodesObj.getTotRevenue()) : ""));

			row.setValue(coupCodesObj);
			row.setParent(couponsRowsId);
		}

	} // getCoupons
	
	private void setSizeOfPageAndFillPromoDetailsGrid(int promoListSize) {
    	

    	logger.debug("promoListSize is    "+promoListSize);
    	
    	
    	promoDetailPagingId.setTotalSize(promoListSize);
    	promoDetailPagingId.setActivePage(0);
    	
    	
    	String selectStr = memberPerPagePromoDetailLBId.getSelectedItem().getLabel();
		int pNo = Integer.parseInt(selectStr);
		
		fillPromoRedemptionDetail(0, pNo, coupObj.getCouponId());
		
    }

 private String fetchStoreName(String store_number){
		 
		 for (Map<String, Object> eachMap: storeNumberNameMapList) {

			 if(eachMap.get("home_store_id").toString().equals(store_number)){
				 if(eachMap.get("store_name") != null){
					 return eachMap.get("store_name").toString();
				 }else{
					 return "Store ID "+store_number;
				 }
			 }
		 }
		 
		 return "Store ID "+store_number;
	}
	
	private int fillPromoRedemptionDetail(int fromInt, int lbxLenght, Long couponId) {

		try {
			Components.removeAllChildren(promotionRedmDetailRowsId);
			int size;
			
			/*int count =  promoCodeRowsId.getItemCount();
			
			for(; count>0; count--) {
				promoCodeRowsId.removeAt(count-1);
			}*/
			
			List<Map<String, Object>> promoObjArrList  = couponCodesDao.findAllStoresRedemptionList(GetUser.getUserObj().getUserOrganization().getUserOrgId(), fromInt, lbxLenght, couponId+"",Constants.STRING_NILL,Constants.STRING_NILL);// sm change
			
			if(promoObjArrList == null || promoObjArrList.size() == 0 ) {
				 
				 logger.info(" *** No promo code data exists for this user");
				 return 0;
			 }
			
			 logger.info(">>> PromoObjArrList size is :"+promoObjArrList.size());
			 size = promoObjArrList.size();
			 Row tempRow = null;
			 String storeName;
			 DecimalFormat decimalFormat = new DecimalFormat("#0.00");
			 for (Map<String, Object> eachMap: promoObjArrList) {
				 
				 tempRow  = new Row();
				 //SELECT promo_code, ROUND(SUM((quantity*sales_price)+tax),2) AS REVENUE , COUNT(customer_id) AS COUNT
				 //PromoCode
				 Label PromoCodeLbl = new Label();
				 if(eachMap.containsKey("store_number") && eachMap.get("store_number") != null) {
					// PromoCodeLbl.setValue(eachMap.get("store_number").toString());
					 storeName = fetchStoreName(eachMap.get("store_number").toString());
					 //PromoCodeLbl.setValue(eachMap.get("store_number").toString());
					 PromoCodeLbl.setValue(storeName);
				 }
				 PromoCodeLbl.setParent(tempRow);
				
				 //Revenue
				 Label revenueLbl = new Label();
				 if(eachMap.containsKey("REVENUE") && eachMap.get("REVENUE") != null) {
					 revenueLbl.setValue(decimalFormat.format(eachMap.get("REVENUE")));
				 }
				 revenueLbl.setParent(tempRow);
				 
				 //No. of customer
				 Label totalCustmerLbl = new Label();
				 if(eachMap.containsKey("COUNT") && eachMap.get("COUNT") != null) {
					 
					 totalCustmerLbl.setValue(eachMap.get("COUNT").toString());
				 }
				 totalCustmerLbl.setParent(tempRow);
				 
				 tempRow.setParent(promotionRedmDetailRowsId);
			}
			 
			return size;  
		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error("Exception ::" , e);
			return 0;
		}
	} //fillPromoRedemptionDetail
	public void onClick$exportBtnStoreId(){


		logger.debug("-- just entered --");
		//int count = getCount();
		//int count = recordSize;
		int size = 1000;
		String searchStr = "";
		/*
		if(!suppLstSearchTbId.getValue().equals("") && !suppLstSearchTbId.getValue().equalsIgnoreCase("Search Email Address")) {
			
			searchStr = suppLstSearchTbId.getValue();
			
		}*/

		TimeZone tz =(TimeZone)Sessions.getCurrent().getAttribute("clientTimeZone"); 
		//String type = (String)supptypeLbId.getSelectedItem().getValue();
		//String fileType = exportFilterLbId.getSelectedItem().getLabel();
		String fileType = "csv";
		//String category = (String)supptypeLbId.getSelectedItem().getLabel();
		String userName = GetUser.getUserName();
		String usersParentDirectory = (String)PropertyUtil.getPropertyValue("usersParentDirectory");
		String exportDir = usersParentDirectory + "/" + userName + "/Coupon/" ;
		File downloadDir = new File(exportDir);
		JdbcResultsetHandler jdbcResultsetHandler = null;
		BufferedWriter bw = null;
		
		if(downloadDir.exists()){
			try {
				FileUtils.deleteDirectory(downloadDir);
				logger.debug(downloadDir.getName() + " is deleted");
			} catch (Exception e) {
				logger.error("Exception");
				logger.warn(downloadDir.getName() + " is not deleted");
			}
		}
		if(!downloadDir.exists()){
			downloadDir.mkdirs();
		}
		
		String filePath = "";
		StringBuffer sb = null;

		logger.debug("Writing to the file : " + filePath);

		
		if(fileType.contains("csv")){
			try {
								
				filePath = exportDir +  "StoreRedemption"+ "_" + System.currentTimeMillis() + ".csv";
				
				logger.debug("Download File path : " + filePath);
				File file = new File(filePath);
				bw = new BufferedWriter(new FileWriter(filePath));
				//bw.write("\"Email Address\",\"Reason\" \r\n");
				sb = new StringBuffer();

				

				sb.append("\"Promotion\",\"Revenue\",\"No. Of Redemptions\"");
				sb.append("\r\n");
				bw.write(sb.toString());

				String qry = "SELECT c.coupon_name AS name, ROUND(SUM(cc.tot_revenue),2) AS REVENUE, COUNT(cc.coupon_code_id) as COUNT " +
				"FROM coupon_codes cc left outer join coupons c on cc.coupon_id=c.coupon_id WHERE orgId ="+users.getUserOrganization().getUserOrgId()+
						" AND store_number IS NOT NULL AND cc.coupon_code IS NOT NULL AND cc.store_number = '"+store+"' AND cc.redeemed_on between '"+storeFromDateStr+"' AND '"+storeToDateStr+"'" +
						"GROUP BY cc.coupon_id ORDER BY redeemed_on DESC";
			
				jdbcResultsetHandler = new JdbcResultsetHandler();
				jdbcResultsetHandler.executeStmt(qry);
				
				OCCSVWriter csvWriter = new OCCSVWriter(bw);
				try {
					csvWriter = new OCCSVWriter(bw);
					csvWriter.writeAll(jdbcResultsetHandler.getResultSet(), false);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					logger.error("exception while initiating writer ",e);
					
				}finally{
					bw.flush();
					csvWriter.flush();
					bw.close();
					csvWriter.close();
					csvWriter =null;
				}
				
				
				
				Filedownload.save(file, "text/csv");
			} catch (Exception e) {
				logger.info("Exception :: ",e);
			}finally{
				if(jdbcResultsetHandler!=null ) jdbcResultsetHandler.destroy();
				;userName = null;usersParentDirectory = null;exportDir = null;downloadDir = null;
				filePath = null;bw=null;
				jdbcResultsetHandler = null;jdbcResultsetHandler = null;
				System.gc();
			}
			logger.debug("-- exit --");
		}
				
    }
	
	public void onSelect$pageSizeLbId() {
		int tempCount = Integer.parseInt(pageSizeLbId.getSelectedItem()
				.getLabel());
		couponListBottomPagingId.setPageSize(tempCount);
		couponListBottomPagingId.setActivePage(0);
		getCouponCodes(0, tempCount);

	} // onSelect$pageSizeLbId
	
public void onSelect$memberPerPagePromoDetailLBId() {
		
		try {
			logger.info("just enter here");
			
			
			String selectStr = memberPerPagePromoDetailLBId.getSelectedItem().getLabel();
			int pNo = Integer.parseInt(selectStr);
			
			promoDetailPagingId.setPageSize(pNo);
			promoDetailPagingId.setActivePage(0);	
			fillPromoRedemptionDetail(0,pNo,coupObj.getCouponId());
			
		} catch (NumberFormatException e) {
			logger.error("Exception ::" , e);
		}
	} // onClick$memberPerPageLBId
	public void onClick$backBtnId(){
		
//		session.removeAttribute("COUP_REDEEMED_DETAILS");
//		Redirect.goToPreviousPage();
		Redirect.goTo(PageListEnum.REPORT_COUPON_REPORTS);
		
		
	}
	
	public void onEvent(Event event) throws Exception {
		// TODO Auto-generated method stub
		super.onEvent(event);

		//onSelect$pageSizeLbId();

		if (event.getTarget() instanceof Paging) {
			Paging paging = (Paging) event.getTarget();
			
			int desiredPage = paging.getActivePage();
			
			PagingEvent pagingEvent = (PagingEvent) event;
			int pSize = pagingEvent.getPageable().getPageSize();
			int ofs = desiredPage * pSize;
			if(paging.getAttribute("onPaging").equals("couponDetail")){
			getCouponCodes(ofs, (byte) pagingEvent.getPageable().getPageSize());
			}else if(paging.getAttribute("onPaging").equals("storeDetail")){
				fillPromoRedemptionDetail(ofs, (byte) pagingEvent.getPageable().getPageSize(), coupObj.getCouponId());
			}else if(paging.getAttribute("onPaging").equals("store")){
				this.storePagingId.setActivePage(desiredPage);
				fillStoreRedemption(ofs, pSize);
			}
		}
	} // onEvent
	private Combobox exportCbId;
	public void onClick$exportBtnId() {
		try {
			export(exportCbId);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error("Exception ::" , e);
		}
	}
	public void export(Combobox exportCbId){
		
			long startTime = System.currentTimeMillis();
			POSMappingDao posMappingDao = null;
			String type = Constants.STRING_NILL;
			String userName = Constants.STRING_NILL;
			String usersParentDirectory = Constants.STRING_NILL;
			String exportDir = Constants.STRING_NILL;
			File downloadDir = null;
			String name = Constants.STRING_NILL;
			String filePath = Constants.STRING_NILL;
			File file = null;
			BufferedWriter bw = null;
			List<POSMapping> posMappingsList = null;
			Map<String, POSMapping> orderedMappingMap = null;
			String udfFldsLabel = Constants.STRING_NILL;
			String contactFieldsInDB = Constants.STRING_NILL;
			JdbcResultsetHandler jdbcResultsetHandler = null;
			JdbcResultsetHandler exportJdbcResultsetHandler = null;
		try {
			logger.debug("-- just entered --");
			
			if(couponsRowsId.getChildren().size() == 0) {
				MessageUtil.setMessage("No reports existed ","color:red","TOP");
				return;
			}
			
			 posMappingDao = (POSMappingDao)SpringUtil.getBean("posMappingDao");
			Long currUserId = GetUser.getUserId();
			
			type = exportCbId.getSelectedItem().getLabel();
			userName = GetUser.getUserName();
			usersParentDirectory = (String)PropertyUtil.getPropertyValue("usersParentDirectory");
			exportDir = usersParentDirectory + "/" + userName + "/Coupon/" ;
			downloadDir = new File(exportDir);
			
			if(downloadDir.exists()){
				try {
					FileUtils.deleteDirectory(downloadDir);
					logger.debug(downloadDir.getName() + " is deleted");
				} catch (Exception e) {
					logger.error("Exception ::" , e);
					logger.debug(downloadDir.getName() + " is not deleted");
				}
			}
			if(!downloadDir.exists()){
				downloadDir.mkdirs();
			}
			
			if(type.contains("csv")){
				
				long coupId = coupObj.getCouponId();
				//CouponCodes couponCodes = couponCodesDao.findById(coupId);
				name = coupObj.getCouponName();
				if(name.contains("/")) {
					
					name = name.replace("/", "_") ;
					
				}
					filePath = exportDir +  "Coupon_" + name + "_" +
					MyCalendar.calendarToString(coupObj.getCouponCreatedDate(), MyCalendar.FORMAT_YEARTOSEC, clientTimeZone);
				
					filePath = filePath + "_CouponCopdes.csv";
					logger.debug("Download File path : " + filePath);
					file = new File(filePath);
					try{
					bw = new BufferedWriter(new FileWriter(filePath));
					}catch (FileNotFoundException e) {
						filePath = exportDir +  "Coupon_" + System.currentTimeMillis()+"_" +
								MyCalendar.calendarToString(coupObj.getCouponCreatedDate(), MyCalendar.FORMAT_YEARTOSEC, clientTimeZone);
							
								filePath = filePath + "_CouponCopdes.csv";
								file = new File(filePath);
						bw = new BufferedWriter(new FileWriter(filePath));
						// TODO: handle exception
					}				
					posMappingsList = posMappingDao.findByType("'"+Constants.POS_MAPPING_TYPE_CONTACTS+"'", currUserId);
					
					//logger.debug("POS Mapping List :"+posMappingsList);
					
					orderedMappingMap = getOrderedMappingSet(posMappingsList);
					
					//logger.debug("map ::"+orderedMappingMap);
					
					for (String custFldKey : orderedMappingMap.keySet()) {
						
						if(udfFldsLabel.length() > 0) udfFldsLabel += ",";
						
						udfFldsLabel += "\""+orderedMappingMap.get(custFldKey).getDisplayLabel().trim()+"\"";
						contactFieldsInDB +=","+genFieldContMap.get(custFldKey).trim();
						
						
						
					}//for
					
					bw.write("\"Promo-code\",\"Status\",\"Issued to\",\"Redeemed by\",\"Campaign Name\",\"Issued On\",\"Redeemed On\",\"Store\",\"Total Discount\",\"Total Revenue\","+udfFldsLabel+" \r\n");
					
					
					String query = "select cc.coupon_code,cc.status,cc.issued_to,cc.redeemed_to,cc.campaign_name,cc.issued_on,cc.redeemed_on,cc.store_number,cc.tot_discount,cc.tot_revenue"+contactFieldsInDB+" from coupon_codes cc left join contacts c on cc.contact_id = c.cid where coupon_id="+coupId+" AND status NOT IN('"
							+ Constants.COUP_CODE_STATUS_INVENTORY + "') ORDER BY cc.issued_on DESC";
					String exportQuery = "select c.id,c.mobile_status,c.email_status,c.subscription_type,c.cf_value,c.domain,c.categories,c.optin_medium,c.home_phone,c.discount,c.sms_status"+contactFieldsInDB+" from tempexportreport c where 1=2";
					
					exportQuery = exportQuery.replaceFirst("c.birth_day", "c.urls");
					exportQuery = exportQuery.replaceFirst("c.anniversary_day", "c.created_date");
					
					logger.info("query is :: "+query);
					logger.info("exportQuery is :: "+exportQuery);
					jdbcResultsetHandler = new JdbcResultsetHandler();
					jdbcResultsetHandler.executeStmt(query);
					
					exportJdbcResultsetHandler = new JdbcResultsetHandler();
					exportJdbcResultsetHandler.executeStmt(exportQuery, true);
					
					ResultSet exportResultSet, resultSet;
					resultSet = jdbcResultsetHandler.getResultSet();
					exportResultSet = exportJdbcResultsetHandler.getResultSet();
					DecimalFormat decimalFormat = new DecimalFormat("#0.00");
					double random = 0;
					contactFieldsInDB = contactFieldsInDB.substring(1);
					Calendar cal = Calendar.getInstance();
					while(resultSet.next()){
						random = Math.random();
						exportResultSet.moveToInsertRow();
						exportResultSet.updateString("id", users.getUserId()+""+random+""+System.currentTimeMillis());
						for (String custFldkey : contactFieldsInDB.split(",")) {
							custFldkey = custFldkey.replaceFirst("c.", "");
							if(custFldkey.equals("birth_day")){
								try{
									cal = Calendar.getInstance();
									cal.setTimeInMillis(resultSet.getTimestamp(custFldkey).getTime());
									}catch(NullPointerException e){
										cal =null;
									}
								exportResultSet.updateString("urls", resultSet.getTimestamp(custFldkey)!=null?MyCalendar.calendarToString(cal,MyCalendar.FORMAT_DATETIME_STDATE):null);
							}else if(custFldkey.equals("anniversary_day")){
								exportResultSet.updateTimestamp("created_date", resultSet.getTimestamp(custFldkey)!=null?resultSet.getTimestamp(custFldkey):null);
							}
						else{
							exportResultSet.updateString(custFldkey, resultSet.getString(custFldkey));
						}
						}
						/*String query = "select cc.coupon_code,cc.status,cc.issued_to,cc.redeemed_to,cc.campaign_name,cc.issued_on,cc.redeemed_on,cc.store_number,cc.tot_discount,cc.tot_revenue"+contactFieldsInDB+" from coupon_codes cc left join contacts c on cc.contact_id = c.cid where coupon_id="+coupId+" AND status NOT IN('"
								+ Constants.COUP_CODE_STATUS_INVENTORY + "') ORDER BY cc.issued_on DESC";
						String exportQuery = "select c.id,c.mobile_status,c.user_id,c.subscription_type,c.cf_value,c.domain,c.categories,c.optin_medium,,c.hp_id,c.email_status,home_phone"+contactFieldsInDB+" from tempexportreport c where 1=2";
						MyCalendar.calendarToString(
					coupCodesObj.getIssuedOn(),
					MyCalendar.FORMAT_DATETIME_STDATE , clientTimeZone)*/
						exportResultSet.updateString("mobile_status", resultSet.getString("coupon_code"));
						exportResultSet.updateString("email_status", resultSet.getString("status"));
						exportResultSet.updateString("subscription_type", resultSet.getString("issued_to"));
						exportResultSet.updateString("cf_value", resultSet.getString("redeemed_to"));
						exportResultSet.updateString("domain", resultSet.getString("campaign_name"));
						
						try{
							cal = Calendar.getInstance();
						cal.setTimeInMillis(resultSet.getTimestamp("issued_on").getTime());
						}catch(NullPointerException e){
							cal =null;
						}
						exportResultSet.updateString("categories", MyCalendar.calendarToString(cal ,MyCalendar.FORMAT_DATETIME_STDATE , clientTimeZone));
						try{
							cal = Calendar.getInstance();
							cal.setTimeInMillis(resultSet.getTimestamp("redeemed_on").getTime());
						}catch(NullPointerException e){
							cal =null;
						}
						exportResultSet.updateString("optin_medium", MyCalendar.calendarToString(cal ,MyCalendar.FORMAT_DATETIME_STDATE , clientTimeZone));
						exportResultSet.updateString("home_phone",resultSet.getString("store_number") !=null? fetchStoreName(resultSet.getString("store_number")):"");
						exportResultSet.updateDouble("discount", (Double)resultSet.getDouble("tot_discount")!=null?Double.parseDouble(decimalFormat.format((Double)resultSet.getDouble("tot_discount"))):null);
						exportResultSet.updateDouble("sms_status", (Double)resultSet.getDouble("tot_revenue")!=null?Double.parseDouble(decimalFormat.format((Double)resultSet.getDouble("tot_revenue"))):null);
						
						exportResultSet.insertRow();
						exportResultSet.moveToCurrentRow();
						}
						
					OCCSVWriter csvWriter = new OCCSVWriter(bw);
					try {
						csvWriter = new OCCSVWriter(bw);
						csvWriter.writeAll(exportResultSet,false, 1);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						logger.error("exception while initiating writer ",e);
						
					}finally{
						bw.flush();
						csvWriter.flush();
						bw.close();
						csvWriter.close();
						jdbcResultsetHandler.destroy();
						bw = null;
						jdbcResultsetHandler = null;
						//exportJdbcResultsetHandler = null;
					}
					
					
					Filedownload.save(file, "text/csv");
			}
		} catch (Exception e) {
			logger.error("exception while initiating writer ",e);
			
		} finally{
			
			if(exportJdbcResultsetHandler!=null){exportJdbcResultsetHandler.rollback(); exportJdbcResultsetHandler.destroy();exportJdbcResultsetHandler=null;}
			if(jdbcResultsetHandler!=null ) jdbcResultsetHandler.destroy();
			posMappingDao = null;type = null;userName = null;usersParentDirectory = null;exportDir = null;downloadDir = null;name = null;
			filePath = null;file = null;bw = null;posMappingsList = null;orderedMappingMap = null;udfFldsLabel = null;contactFieldsInDB = null;
			jdbcResultsetHandler = null;jdbcResultsetHandler = null;
			System.gc();
		}
		long endTime = System.currentTimeMillis();
		logger.fatal("Time taken to export coupons is :::::::::::::::::::::::: " + (endTime-startTime));
	} 
	public void onClick$exportBtnPromoDetailId() {
		
		long startTime = System.currentTimeMillis();
		String type = Constants.STRING_NILL;
		String userName = Constants.STRING_NILL;
		String usersParentDirectory = Constants.STRING_NILL;
		String exportDir = Constants.STRING_NILL;
		File downloadDir = null;
		String name = Constants.STRING_NILL;
		String filePath = Constants.STRING_NILL;
		File file = null;
		BufferedWriter bw = null;
		StringBuffer sb = null;
		JdbcResultsetHandler jdbcResultsetHandler = null;
	try {
		logger.debug("-- just entered --");
		
		if(promotionRedmDetailRowsId.getChildren().size() == 0) {
			MessageUtil.setMessage("No reports existed ","color:red","TOP");
			return;
		}
		
		type = exportFilterPromoDetailLbId.getSelectedItem().getLabel();
		userName = GetUser.getUserName();
		usersParentDirectory = (String)PropertyUtil.getPropertyValue("usersParentDirectory");
		exportDir = usersParentDirectory + "/" + userName + "/Coupon/" ;
		downloadDir = new File(exportDir);
		
		if(downloadDir.exists()){
			try {
				FileUtils.deleteDirectory(downloadDir);
				logger.debug(downloadDir.getName() + " is deleted");
			} catch (Exception e) {
				logger.error("Exception ::" , e);
				logger.debug(downloadDir.getName() + " is not deleted");
			}
		}
		if(!downloadDir.exists()){
			downloadDir.mkdirs();
		}
		
		if(type.contains("csv")){
			
			long coupId = coupObj.getCouponId();
			CouponCodes couponCodes = couponCodesDao.findById(coupId);
			name = couponCodes.getCouponCode();
			if(name.contains("/")) {
				
				name = name.replace("/", "_") ;
				
			}
				filePath = exportDir +  "Store_" + name + "_" +
				MyCalendar.calendarToString(coupObj.getCouponCreatedDate(), MyCalendar.FORMAT_YEARTOSEC, clientTimeZone);
			
				filePath = filePath + "_CouponCopdes.csv";
				logger.debug("Download File path : " + filePath);
				file = new File(filePath);
				bw = new BufferedWriter(new FileWriter(filePath));
								
				bw.write("\"Store\",\"Revenue\",\"No. Of Redemptions\""+" \r\n");
				
				
				String qry = "SELECT store_number, ROUND(SUM(tot_revenue),2) AS REVENUE, COUNT(coupon_code_id) as COUNT  " +
						"FROM coupon_codes WHERE orgId ="+GetUser.getUserObj().getUserOrganization().getUserOrgId()+" AND coupon_id ="+coupObj.getCouponId()+" " +
								"AND store_number IS NOT NULL AND coupon_code IS NOT NULL "+
								"GROUP BY store_number ORDER BY redeemed_on DESC";
				
				jdbcResultsetHandler = new JdbcResultsetHandler();
				jdbcResultsetHandler.executeStmt(qry);
				
				ResultSet resultSet = jdbcResultsetHandler.getResultSet();
				sb = new StringBuffer();
				if (resultSet != null && !resultSet.isAfterLast()) {
					while(resultSet.next()){
						sb.append(fetchStoreName(resultSet.getString(1))+",");
						sb.append(resultSet.getString(2)+",");
						sb.append(resultSet.getString(3));
						sb.append("\n");
					}
					
				}
				
				bw.write(sb.toString());
				bw.flush();
				bw.close();
				Filedownload.save(file, "text/csv");
		}
	} catch (Exception e) {
		logger.error("exception while initiating writer ",e);
		
	} finally{
		if(jdbcResultsetHandler!=null ) jdbcResultsetHandler.destroy();
		type = null;userName = null;usersParentDirectory = null;exportDir = null;downloadDir = null;name = null;
		filePath = null;file = null;bw = null;
		jdbcResultsetHandler = null;
		System.gc();
	}
	long endTime = System.currentTimeMillis();
	logger.fatal("Time taken to export coupons is :::::::::::::::::::::::: " + (endTime-startTime));
}
	 private static Map<String, String> genFieldContMap = new LinkedHashMap<String, String>();
		
		static{
			
			genFieldContMap.put("Email", "c.email_id");
			genFieldContMap.put("Mobile", "c.mobile_phone");
			genFieldContMap.put("First Name", "c.first_name");
			genFieldContMap.put("Last Name", "c.last_name");
			genFieldContMap.put("Street", "c.address_one");
			genFieldContMap.put("Address Two", "c.address_two");
			genFieldContMap.put("City", "c.city");
			genFieldContMap.put("State", "c.state");
			genFieldContMap.put("Country", "c.country");
			genFieldContMap.put("ZIP", "c.zip");
			genFieldContMap.put("Customer ID", "c.external_id" );
			genFieldContMap.put("Gender", "c.gender");
			genFieldContMap.put("BirthDay", "c.birth_day");
			genFieldContMap.put("Anniversary", "c.anniversary_day");
			genFieldContMap.put("Home Store", "c.home_store");
			genFieldContMap.put("UDF1", "c.udf1");
			genFieldContMap.put("UDF2", "c.udf2");
			genFieldContMap.put("UDF3", "c.udf3");
			genFieldContMap.put("UDF4", "c.udf4");
			genFieldContMap.put("UDF5", "c.udf5");
			genFieldContMap.put("UDF6", "c.udf6");
			genFieldContMap.put("UDF7", "c.udf7");
			genFieldContMap.put("UDF8", "c.udf8");
			genFieldContMap.put("UDF9", "c.udf9");
			genFieldContMap.put("UDF10", "c.udf10");
			genFieldContMap.put("UDF11", "c.udf11");
			genFieldContMap.put("UDF12", "c.udf12");
			genFieldContMap.put("UDF13", "c.udf13");
			genFieldContMap.put("UDF14", "c.udf14");
			genFieldContMap.put("UDF15", "c.udf15");
		}
	
	
	
public Map<String, POSMapping> getOrderedMappingSet(List<POSMapping> mappingList) {
		
		
		Map<String,	POSMapping> orderedMap = new LinkedHashMap<String, POSMapping>();
		for (String custFldkey : genFieldContMap.keySet()) {
			
			//logger.debug("keySet is::"+custFldkey);
			
			
			for (POSMapping posMapping : mappingList) {
				
				if(posMapping.getCustomFieldName().equals(custFldkey)) {
					
					orderedMap.put(custFldkey, posMapping);
					break;
				}
				
			}
			
		}
		
		return orderedMap;
		
		
	}

} // class
