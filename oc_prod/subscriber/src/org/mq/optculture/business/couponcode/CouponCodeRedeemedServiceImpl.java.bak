package org.mq.optculture.business.couponcode;

import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.mq.marketer.campaign.beans.Contacts;
import org.mq.marketer.campaign.beans.CouponCodes;
import org.mq.marketer.campaign.beans.Coupons;
import org.mq.marketer.campaign.beans.CustomTemplates;
import org.mq.marketer.campaign.beans.EmailQueue;
import org.mq.marketer.campaign.beans.Users;
import org.mq.marketer.campaign.custom.MyCalendar;
import org.mq.marketer.campaign.dao.ContactsDao;
import org.mq.marketer.campaign.dao.CouponCodesDao;
import org.mq.marketer.campaign.dao.CouponCodesDaoForDML;
import org.mq.marketer.campaign.dao.CouponsDao;
import org.mq.marketer.campaign.dao.CouponsDaoForDML;
import org.mq.marketer.campaign.dao.CustomTemplatesDao;
import org.mq.marketer.campaign.dao.EmailQueueDao;
import org.mq.marketer.campaign.dao.EmailQueueDaoForDML;
import org.mq.marketer.campaign.dao.POSMappingDao;
import org.mq.marketer.campaign.dao.UsersDao;
import org.mq.marketer.campaign.general.Constants;
import org.mq.marketer.campaign.general.PropertyUtil;
import org.mq.marketer.campaign.general.Utility;
import org.mq.optculture.business.helper.CouponCodeProcessHelper;
import org.mq.optculture.exception.BaseServiceException;
import org.mq.optculture.model.BaseRequestObject;
import org.mq.optculture.model.BaseResponseObject;
import org.mq.optculture.model.couponcodes.CouponCodeInfo;
import org.mq.optculture.model.couponcodes.CouponCodeRedeemReq;
import org.mq.optculture.model.couponcodes.CouponCodeRedeemResponse;
import org.mq.optculture.model.couponcodes.CouponCodeRedeemedObj;
import org.mq.optculture.model.couponcodes.CouponCodeRedeemedResponse;
import org.mq.optculture.model.couponcodes.HeaderInfo;
import org.mq.optculture.model.couponcodes.PurchaseCouponInfo;
import org.mq.optculture.model.couponcodes.StatusInfo;
import org.mq.optculture.model.couponcodes.UserDetails;
import org.mq.optculture.utils.OCConstants;
import org.mq.optculture.utils.ServiceLocator;

import com.google.gson.Gson;

public class CouponCodeRedeemedServiceImpl implements CouponCodeRedeemedService {
	private static final Logger logger = LogManager.getLogger(Constants.SUBSCRIBER_LOGGER);
	@Override
	public BaseResponseObject processRequest(BaseRequestObject baseRequestObject)
			throws BaseServiceException {
		BaseResponseObject baseResponseObject=new BaseResponseObject();
		CouponCodeRedeemedResponse couponCodeRedeemedResponse=null;
		try {
			logger.debug("-------entered processRequest---------");
			if(baseRequestObject.getAction().equals(OCConstants.COUPON_CODE_REDEEMED_REQUEST)) {

				//json to object
				Gson gson =new Gson();
				CouponCodeRedeemedObj couponCodeRedeemedObj;
				try {
					couponCodeRedeemedObj = gson.fromJson(baseRequestObject.getJsonValue(), CouponCodeRedeemedObj.class);
				} catch (Exception e) {
					logger.error("Exception e ::",e);
					StatusInfo statusInfo = new StatusInfo("100900",PropertyUtil.getErrorMessage(100900, OCConstants.ERROR_PROMO_FLAG),OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					couponCodeRedeemedResponse = finalResponse(new HeaderInfo(),new CouponCodeInfo(), new PurchaseCouponInfo(),new UserDetails(), statusInfo);
					String jsonString=gson.toJson(couponCodeRedeemedResponse);
					baseResponseObject.setJsonValue(jsonString);
					baseResponseObject.setAction(OCConstants.COUPON_CODE_REDEEMED_REQUEST);
					return baseResponseObject;
				}
				CouponCodeRedeemedService couponCodeRedeemedService=(CouponCodeRedeemedService) ServiceLocator.getInstance().getServiceByName(OCConstants.COUPON_CODE_REDEEMED_BUSINESS_SERVICE);
				couponCodeRedeemedResponse=(CouponCodeRedeemedResponse)couponCodeRedeemedService.processRedeemedRequest(couponCodeRedeemedObj);

				//object to json
				String json = gson.toJson(couponCodeRedeemedResponse);
				baseResponseObject.setJsonValue(json);
				baseResponseObject.setAction(OCConstants.COUPON_CODE_REDEEMED_REQUEST);
				return baseResponseObject;
			}
		}catch (Exception e) {
			logger.error("Exception ::" , e);
			throw new BaseServiceException("Exception occured while processing processRequest::::: ", e);
		}
		 logger.debug("-------exit  processRequest---------");
		return baseResponseObject;
	}

	@Override
	public CouponCodeRedeemedResponse processRedeemedRequest(
			CouponCodeRedeemedObj couponCodeRedeemedObj)
					throws BaseServiceException {
		CouponCodeRedeemedResponse couponCodeRedeemedResponse=null;
		StatusInfo statusInfo=null;
		HeaderInfo headerInfo=null;
		UserDetails userDetails=null;
		CouponCodeInfo couponCodeInfo=null;
		PurchaseCouponInfo purchaseCouponInfo=null;
		try {
			logger.debug("-------entered processRedeemedRequest---------");
			UsersDao usersDao=(UsersDao) ServiceLocator.getInstance().getDAOByName(OCConstants.USERS_DAO);
			CouponCodesDao couponCodesDao=(CouponCodesDao) ServiceLocator.getInstance().getDAOByName(OCConstants.COUPONCODES_DAO);
			statusInfo=validateRootObj(couponCodeRedeemedObj);
			if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
				return couponCodeRedeemedResponse;
			}
			headerInfo=couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getHEADERINFO();
			userDetails=couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getUSERDETAILS();
			couponCodeInfo=couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getCOUPONCODEINFO();
			purchaseCouponInfo=couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getPURCHASECOUPONINFO();
			//validate headerinfo requestId
			statusInfo=validateRequestId(couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getHEADERINFO().getREQUESTID());
			if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
				return couponCodeRedeemedResponse;
			}
			//validate userDetails 
			String token=couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getUSERDETAILS().getTOKEN();
			String userName=couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getUSERDETAILS().getUSERNAME();
			String userOrg=couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getUSERDETAILS().getORGID();
			statusInfo=validateUserDetails(token,userName,userOrg);
			if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
				return couponCodeRedeemedResponse;
			}
			Users user = usersDao.findByToken(userName+ Constants.USER_AND_ORG_SEPARATOR +userOrg, token );
			statusInfo=validateUser(user);
			if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
				return couponCodeRedeemedResponse;
			}
			
			Long orgId = user.getUserOrganization().getUserOrgId();
			//validate coupon code
			String reqCoupcode=couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getCOUPONCODEINFO().getCOUPONCODE();
			String redeemStr = null;
			redeemStr=getRedeemStr(couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getCOUPONCODEINFO().getCUSTOMERID(),couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getCOUPONCODEINFO().getEMAIL(),couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getCOUPONCODEINFO().getPHONE(),redeemStr);
			statusInfo=validateCouponCode(reqCoupcode);
			if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
				return couponCodeRedeemedResponse;
			}
			//validate purchasecouponinfo
			double totalAmount=0;
			double totalDiscount=0;
			try {
				totalAmount=Double.parseDouble( couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getPURCHASECOUPONINFO().getTOTALAMOUNT());
			} catch (NumberFormatException e) {
				statusInfo=validateTotAmount();
			}
			try{
				totalDiscount=Double.parseDouble(couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getPURCHASECOUPONINFO().getTOTALDISCOUNT());
			}catch(NumberFormatException e){
				statusInfo=validateTotDiscount();
			}
			statusInfo=validatePurchaseCouponInfoDetails(totalAmount,totalDiscount);
			if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
				return couponCodeRedeemedResponse;
			}
			CouponCodes couponCodes = couponCodesDao.testForCouponCodes(reqCoupcode, orgId);
			Coupons coupObj = getCouponObj(couponCodes, reqCoupcode, orgId);
			statusInfo = validateCoupObj(coupObj);
			if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
				return couponCodeRedeemedResponse;
			}

			if(couponCodes != null) {
            	if(coupObj.getCouponGeneratedType().equalsIgnoreCase(Constants.COUP_GENT_TYPE_SINGLE) && 
            			!couponCodes.getCouponCode().equalsIgnoreCase(reqCoupcode)) {
            		statusInfo=new StatusInfo("100918", PropertyUtil.getErrorMessage(100918,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
    				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
    				return couponCodeRedeemedResponse;
            	}
            	else if(coupObj.getCouponGeneratedType().equalsIgnoreCase(Constants.COUP_GENT_TYPE_MULTIPLE) && 
            			couponCodes.getCouponCode().length() == 8 && !couponCodes.getCouponCode().equalsIgnoreCase(reqCoupcode)) {
            		statusInfo=new StatusInfo("100918", PropertyUtil.getErrorMessage(100918,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
    				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
    				return couponCodeRedeemedResponse;
            	}
            	else if(coupObj.getCouponGeneratedType().equalsIgnoreCase(Constants.COUP_GENT_TYPE_MULTIPLE) && 
            			couponCodes.getCouponCode().length() != 8 && !couponCodes.getCouponCode().equals(reqCoupcode)) {
            		statusInfo=new StatusInfo("100918", PropertyUtil.getErrorMessage(100918,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
    				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
    				return couponCodeRedeemedResponse;
            	}
			}
			
			if(coupObj != null && coupObj.getCouponName() != null && !coupObj.getCouponName().isEmpty()) {
				
				couponCodeInfo.setCOUPONNAME(coupObj.getCouponName());
				
			}
			if(coupObj != null && coupObj.getCouponGeneratedType().equals(Constants.COUP_GENT_TYPE_SINGLE) && 
					!coupObj.getCouponCode().equalsIgnoreCase(reqCoupcode)) {
				statusInfo=new StatusInfo("100918", PropertyUtil.getErrorMessage(100918,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
				return couponCodeRedeemedResponse;
				
			}
			
			statusInfo=checkCouponStatus(couponCodes,coupObj);
			if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
				return couponCodeRedeemedResponse;
			}
			
			statusInfo = validateDynamicCoupon(coupObj,couponCodes);
			if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
				return couponCodeRedeemedResponse;
			}
		
			statusInfo=validateStore(coupObj,couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getCOUPONCODEINFO());
			if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
				return couponCodeRedeemedResponse;
			}
			statusInfo=saveCouponCodesObj(coupObj,couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ(),user,orgId,totalAmount,totalDiscount,redeemStr,couponCodes);
			if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
				couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
				return couponCodeRedeemedResponse;
			}
			couponCodeRedeemedResponse=finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
			 logger.debug("-------exit  processRedeemedRequest---------");
			return couponCodeRedeemedResponse;
		}catch (Exception e) {
			statusInfo = new StatusInfo("100901",PropertyUtil.getErrorMessage(100901,OCConstants.ERROR_PROMO_FLAG),OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			couponCodeRedeemedResponse = finalResponse(headerInfo,couponCodeInfo,purchaseCouponInfo,userDetails,statusInfo);
			logger.error("Exception ::" , e);
			return couponCodeRedeemedResponse;
			/*logger.error("Exception ::" , e);
			throw new BaseServiceException("Exception occured while processing processRedeemedRequest::::: ", e);*/
		}
		/*finally{
			couponCodeRedeemedResponse=finalResponse(couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getHEADERINFO(),couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getCOUPONCODEINFO(),
					couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getPURCHASECOUPONINFO(),couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getUSERDETAILS(),statusInfo);
			return couponCodeRedeemedResponse;
		}*/
	}//processRedeemedRequest

	
/*	private StatusInfo validateCouponByDocsid(String docSidStr, Coupons coupObj, String reqCoupcode) {
		logger.debug("-------entered validateCouponByDocsid---------");
		StatusInfo statusInfo = null;
		try {
			CouponCodesDao couponCodesDao=(CouponCodesDao) ServiceLocator.getInstance().getDAOByName(OCConstants.COUPONCODES_DAO);
			CouponCodes couponCode = null;
        	if(coupObj.getCouponGeneratedType().equalsIgnoreCase(Constants.COUP_GENT_TYPE_SINGLE)) {
        		couponCode = couponCodesDao.findByDocSid(docSidStr,Constants.COUP_GENT_TYPE_SINGLE, reqCoupcode);
        	}
        	else {
        		couponCode = couponCodesDao.findByDocSid(docSidStr,Constants.COUP_GENT_TYPE_MULTIPLE, reqCoupcode);
        	}
			if(couponCode != null) {
				statusInfo = new StatusInfo("100022", PropertyUtil.getErrorMessage(100022,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				return statusInfo;
			}
		}
		catch(Exception e) {
			logger.error("Exception ::",e);
		}
		 logger.debug("-------exit  validateCouponByDocsid---------");
		return statusInfo;
	}*/

	private CouponCodes setCouponCodes(CouponCodes couponCodes,Coupons coupObj,long orgId,String reqCoupcode,String redeemStr) throws BaseServiceException {
		logger.debug("-------entered setCouponCodes---------");
		couponCodes = new CouponCodes();
		couponCodes.setCouponId(coupObj);
		couponCodes.setOrgId(orgId);
		couponCodes.setCouponCode(reqCoupcode);
		 logger.debug("-------exit  setCouponCodes---------");
		return couponCodes;
	}//setCouponCodes

	private StatusInfo validatePromoListSize(Coupons coupObj,String customerIdStr,String emailStr,String mobileStr,String reqCoupcode,long orgId) throws BaseServiceException {
		StatusInfo statusInfo=null;
		try {
			logger.debug("-------entered validatePromoListSize---------");
			CouponCodesDao couponCodesDao=(CouponCodesDao) ServiceLocator.getInstance().getDAOByName(OCConstants.COUPONCODES_DAO);
			if(coupObj.getSingPromoContRedmptLimit() != null && 
					(customerIdStr != null && !customerIdStr.trim().isEmpty() ||
					emailStr != null && !emailStr.trim().isEmpty() || 
					mobileStr != null && !mobileStr.trim().isEmpty())) {
				List<CouponCodes> promoList = couponCodesDao.isPromoExistForRedeem(customerIdStr,emailStr,mobileStr,reqCoupcode,orgId);
				if(promoList != null && promoList.size() >= coupObj.getSingPromoContRedmptLimit()){
					statusInfo=new StatusInfo("100020", PropertyUtil.getErrorMessage(100020,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					return statusInfo;
				}
			}
		}catch (Exception e) {
			logger.error("Exception ::" , e);
			throw new BaseServiceException("Exception occured while processing validatePromoListSize::::: ", e);
		}
		 logger.debug("-------exit  validatePromoListSize---------");
		return statusInfo;
	}//validatePromoListSize

	private StatusInfo validatePromo(CouponCodes couponCodes,Coupons coupObj)
				throws BaseServiceException  {
			logger.debug("-------entered validatePromo---------");
			StatusInfo statusInfo=null;
				statusInfo=new StatusInfo("100930", PropertyUtil.getErrorMessage(100930,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				logger.debug("-------exit  validatePromo---------");
				return statusInfo;
				/*if(couponCodes == null && !coupObj.getRedemedAutoChk()) {
			}
			return statusInfo;*/
		}//validatePromo

	/*private boolean getNewCC(Contacts contObj,Users user,Coupons coupObj,long orgId,String reqCoupcode,CouponCodes couponCodes) throws BaseServiceException {
		boolean newCC=false;
		if(contObj!=null) {
			contObj.setUsers(user);
			List<Contacts> contactList = getAllContactsByOrg(orgId, contObj);
			newCC = validateContactList(contactList,coupObj);
			couponCodes  = getCouponCodes(contactList,orgId,reqCoupcode);
			newCC = validateCouponCodes(couponCodes,coupObj);
		}
		return newCC;
	}//getNewCC
*/
	private Coupons getCouponObj(
			CouponCodes couponCodes,String reqCoupcode,long orgId) throws BaseServiceException {
		Coupons coupObj =null;
		try {
			logger.debug("-------entered getCouponObj---------");
			CouponsDao couponsDao=(CouponsDao) ServiceLocator.getInstance().getDAOByName(OCConstants.COUPONS_DAO);
			if(couponCodes == null){
				coupObj = couponsDao.findCoupon(reqCoupcode,orgId);

			}else{
				coupObj =couponCodes.getCouponId();
			}
		}catch (Exception e) {
			logger.error("Exception ::" , e);
			throw new BaseServiceException("Exception occured while processing getCouponObj::::: ", e);
		}
		logger.debug("-------exit  getCouponObj---------");
		return coupObj;
	}//getCouponObj

	private CouponCodeRedeemedResponse finalResponse(HeaderInfo headerInfo,CouponCodeInfo couponCodeInfo,PurchaseCouponInfo purchaseCouponInfo,UserDetails userDetails,StatusInfo statusInfo) throws BaseServiceException {
		logger.debug("-------entered finalResponse---------");
		CouponCodeRedeemedResponse couponCodeRedeemedResponse=new CouponCodeRedeemedResponse();
		CouponCodeRedeemResponse couponCodeRedeemResponse=new CouponCodeRedeemResponse();
		couponCodeRedeemResponse.setCOUPONCODEINFO(couponCodeInfo);
		couponCodeRedeemResponse.setHEADERINFO(headerInfo);
		couponCodeRedeemResponse.setUSERDETAILS(userDetails);
		couponCodeRedeemResponse.setSTATUSINFO(statusInfo);
		couponCodeRedeemResponse.setPURCHASECOUPONINFO(purchaseCouponInfo);
		couponCodeRedeemedResponse.setCOUPONCODEREDEEMRESPONSE(couponCodeRedeemResponse);
		logger.debug("-------exit  finalResponse---------");
		return couponCodeRedeemedResponse;
	}//finalResponse

	private StatusInfo validateUsedLoyalty() throws BaseServiceException {
		logger.debug("Error :  Value for Used Loyalty Points  shoulb be a Number in JSON ****");
		StatusInfo statusInfo=new StatusInfo("100929", PropertyUtil.getErrorMessage(100929,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
		return statusInfo;
	}//validateUsedLoyalty

	private StatusInfo validateTotDiscount() throws BaseServiceException  {
		logger.debug("Error : Value for Total Discount  shoulb be a Number in JSON ****");
		StatusInfo statusInfo=new StatusInfo("100917",PropertyUtil.getErrorMessage(100917,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
		return statusInfo;
	}//validateTotDiscount

	private StatusInfo validateTotAmount() throws BaseServiceException  {
		logger.debug("Error :  Value for Total Ammount  shoulb be a Number in JSON ****");
		StatusInfo statusInfo=new StatusInfo("100916",PropertyUtil.getErrorMessage(100916,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
		return statusInfo;
	}//validateTotAmount

	private boolean validateCouponCodes(
			CouponCodes couponCodes, Coupons coupObj) throws BaseServiceException  {
		logger.debug("-------entered validateCouponCodes---------");
		boolean newCC=false;
		if(couponCodes == null ) {
			newCC = true;
		}
		logger.debug("-------exit  validateCouponCodes---------");
		return newCC;
	}//validateCouponCodes

	private CouponCodes getCouponCodes(List<Contacts> contactList, Long orgId,
			String reqCoupcode) throws BaseServiceException {
		CouponCodes couponCodes = null;
		try {
			logger.debug("-------entered getCouponCodes---------");
			CouponCodesDao couponCodesDao=(CouponCodesDao) ServiceLocator.getInstance().getDAOByName(OCConstants.COUPONCODES_DAO);
			String contactIdStr = "";
			for (Contacts contacts : contactList) {
				contactIdStr += contactIdStr.trim().length() == 0 ? ""+contacts.getContactId() :","+contacts.getContactId();
			}
			if(contactIdStr!=null && !contactIdStr.trim().isEmpty()) {
			couponCodes = couponCodesDao.findCoupCodeByContactId(contactIdStr , orgId ,reqCoupcode );
			}
			logger.debug("-------exit  getCouponCodes---------");
			return couponCodes;
		}catch (Exception e) {
		
			logger.error("Exception ::" , e);
			throw new BaseServiceException("Exception occured while processing getCouponCodes::::: ", e);
		}
	}//getCouponCodes

	private boolean validateContactList(
			List<Contacts> contactList, Coupons coupObj) throws BaseServiceException  {
		logger.debug("-------entered validateContactList---------");
		boolean newCC=false;
		if(contactList == null || contactList.size() == 0){
			newCC = true;
		}
		logger.debug("-------exit  validateContactList---------");
		return newCC;
	}//validateContactList

	private StatusInfo validateRedeemCount(Coupons coupObj,Long redeemdCount) throws BaseServiceException {
		logger.debug("-------entered validateRedeemCount---------");
		StatusInfo statusInfo=null;
		if(coupObj.getRedemedAutoChk()== false &&
				(coupObj.getRedeemdCount() != null &&  coupObj.getRedeemdCount() <= redeemdCount )) {
			statusInfo=new StatusInfo("100921", PropertyUtil.getErrorMessage(100921,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return statusInfo;
		}
		logger.debug("-------exit  validateRedeemCount---------");
		return statusInfo;
	}//validateRedeemCount

	private StatusInfo validateDynamicCoupon(Coupons coupObj,CouponCodes coupCodeObj){
		StatusInfo statusInfo=null;
		logger.debug("-------entered validateDynamicCoupon---------");
		if(coupObj == null){
			logger.debug("Error :Promo-code not exists in DB ****");
			statusInfo = new StatusInfo("100012",PropertyUtil.getErrorMessage(100012,OCConstants.ERROR_PROMO_FLAG),OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return statusInfo;
		}
		if(coupObj.getExpiryType().equals(Constants.COUP_VALIDITY_PERIOD_DYNAMIC)){
			if(coupCodeObj.getStatus().equals(Constants.COUP_STATUS_EXPIRED)){
				statusInfo = new StatusInfo("100015",PropertyUtil.getErrorMessage(100015,OCConstants.ERROR_PROMO_FLAG),OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				return statusInfo;
			}
		}
		
		return statusInfo;
	}
	private StatusInfo validateStore(Coupons coupObj,CouponCodeInfo couponCodeInfo) throws BaseServiceException  {
		logger.debug("-------entered validateStore---------");
		StatusInfo statusInfo=null;
		//Check with store number
		String strorNumberStr = "";
		if((coupObj.getAllStoreChk() != null && coupObj.getAllStoreChk() == false) ||
				(coupObj.getSelectedStores() != null && coupObj.getSelectedStores().trim().length() > 0)) {
			if(couponCodeInfo.getSTORENUMBER()!=null) {
				strorNumberStr = couponCodeInfo.getSTORENUMBER();
				if(strorNumberStr == null || strorNumberStr.length() == 0) {
					statusInfo=new StatusInfo("100017", PropertyUtil.getErrorMessage(100017,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					return statusInfo;
				}

			} else {
				statusInfo=new StatusInfo("100018",PropertyUtil.getErrorMessage(100018,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				return statusInfo;
			}
			//Check with Store
			String seledStoreStr =  coupObj.getSelectedStores();
			String[] storeListArr  = seledStoreStr.split(";=;");
			boolean storeExisted = false;

			Long jsonStoreLong = null;
			try {
				jsonStoreLong =	Long.parseLong(strorNumberStr);
			} catch (Exception e) {
				logger.error("Exception ::" , e);
				//throw new BaseServiceException("Exception occured while processing validateStore::::: ", e);
			}
			Long eachStoreLong = null;

			for (String eachStore : storeListArr) {

				try {
					eachStoreLong =	Long.parseLong(eachStore.trim());
					if(jsonStoreLong != null && eachStoreLong == jsonStoreLong) {
						storeExisted = true ;
						break;
					}
					
				} catch (Exception e) {
					logger.error("Exception ::" , e);
					//throw new BaseServiceException("Exception occured while processing validateStore::::: ", e);
				}

				if(eachStore.equals(strorNumberStr.trim())) {
					storeExisted = true ;
					break;
				}
			}
			if(!storeExisted) {
				statusInfo=new StatusInfo("100021",PropertyUtil.getErrorMessage(100021,OCConstants.ERROR_PROMO_FLAG),OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				return statusInfo;
			}
		}
		logger.debug("-------exit  validateStore---------");
		return statusInfo;
	}//validateStore

	private StatusInfo checkCouponStatus(CouponCodes couponCodes,Coupons coupObj) throws BaseServiceException  {
		logger.debug("-------entered checkCouponStatus---------");
		StatusInfo statusInfo=null;
		if(coupObj.getExpiryType().equals(Constants.COUP_VALIDITY_PERIOD_STATIC)){
		if(coupObj.getStatus().equals(Constants.COUP_STATUS_ACTIVE) ) {
			statusInfo=new StatusInfo("100931", PropertyUtil.getErrorMessage(100931,OCConstants.ERROR_PROMO_FLAG)+coupObj.getStatus()+")", OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return statusInfo;
        }
		}
		if(!coupObj.getStatus().equals(Constants.COUP_STATUS_RUNNING) ){
			logger.debug("Error : Promo-code Object cannot be redeemed ****");
			statusInfo=new StatusInfo("100919", PropertyUtil.getErrorMessage(100919,OCConstants.ERROR_PROMO_FLAG)+coupObj.getStatus()+")", OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return statusInfo;
		}
		logger.debug("-------exit  checkCouponStatus---------");
		return statusInfo;
	}//checkCouponStatus

	private StatusInfo validateCoupObj(Coupons coupObj) throws BaseServiceException  {
		logger.debug("-------entered validateCoupObj---------");
		StatusInfo statusInfo=null;
		if(coupObj == null){
			logger.debug("Error : Promo-code not exist in DB ****");
			statusInfo = new StatusInfo("100918", PropertyUtil.getErrorMessage(100918,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return statusInfo;
		}
		logger.debug("-------exit  validateCoupObj---------");
		return statusInfo;
	}//validateCoupObj

	private StatusInfo validatePurchaseCouponInfoDetails(double totalAmount,double totalDiscount) throws BaseServiceException  {
		logger.debug("-------entered validatePurchaseCouponInfoDetails---------");
		StatusInfo statusInfo=null;
		//commented to allow 100% for Zohaibzaman
		/*if(totalAmount == 0){
			logger.debug("Error : unable to find the  required total amount  details in JSON ****");
			statusInfo=new StatusInfo("100914",PropertyUtil.getErrorMessage(100914,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return statusInfo;
		}*/
		if(totalDiscount == 0) {
			logger.debug("Error : unable to find the  required total discount  details in JSON ****");
			statusInfo=new StatusInfo("100915", PropertyUtil.getErrorMessage(100915,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return statusInfo;
		}
		logger.debug("-------exit  validatePurchaseCouponInfoDetails---------");
		return statusInfo;
	}//validatePurchaseCouponInfoDetails

	private StatusInfo validateCouponCode(String reqCoupcode) throws BaseServiceException {
		logger.debug("-------entered validateCouponCode---------");
		StatusInfo statusInfo=null;
		if(reqCoupcode == null){
			logger.debug("Unable to find the Promo-code  ");
			statusInfo=new StatusInfo("100912", PropertyUtil.getErrorMessage(100912,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return statusInfo;
		}
		logger.debug("-------exit  validateCouponCode---------");
		return statusInfo;
	}//validateCouponCode

	private String getRedeemStr(String custId,String email,String phone,String redeemStr) throws BaseServiceException  {
		logger.debug("-------entered getRedeemStr---------");
		if(custId != null && custId.trim().length() >0){
			redeemStr = "Customer Id:"+custId;
		}
		if(email != null && email.trim().length() >0){
			if(redeemStr != null && redeemStr.trim().length() >0) redeemStr += ";Email:"+email;
			else redeemStr = "Email:"+email;
		}
		if(phone != null && phone.trim().length() >0){
			if(redeemStr != null && redeemStr.trim().length() >0) redeemStr += ";Phone:"+phone;
			else redeemStr = "Phone:"+phone;
		}
		logger.debug("-------exit  getRedeemStr---------");
		return redeemStr;
	}//getRedeemStr

	private StatusInfo validateUser(Users user) throws BaseServiceException  {
		logger.debug("-------entered validateUser---------");
		StatusInfo statusInfo=null;
		if(user == null){
			logger.debug("Unable to find the user Obj");
			statusInfo=new StatusInfo("100910", PropertyUtil.getErrorMessage(100910,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return statusInfo;
		}
		logger.debug("-------exit  validateUser---------");
		return statusInfo;
	}//validateUser

	private StatusInfo validateUserDetails(String token,String userName,String userOrg) throws BaseServiceException  {
		logger.debug("-------entered validateUserDetails---------");
		StatusInfo statusInfo=null;
	
		if(token == null || token.isEmpty()){
			logger.debug("Error : User Token cannot be empty.");
			statusInfo=new StatusInfo("100908", PropertyUtil.getErrorMessage(100908,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return statusInfo;
		}
		if(userName == null ||userName.isEmpty()|| userOrg.isEmpty() || userOrg == null){
			logger.debug("Error : Username or organisation cannot be empty.");
			statusInfo=new StatusInfo("100909", PropertyUtil.getErrorMessage(100909,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return statusInfo;
		}
		logger.debug("-------exit  validateUserDetails---------");
		return statusInfo;
	}//validateUserDetails

	private StatusInfo validateRequestId(String requestId) throws BaseServiceException {
		logger.debug("-------entered validateRequestId---------");
		StatusInfo statusInfo=null;
		if(requestId == null || requestId.trim().length() == 0){
			logger.debug("Error : Request ID of HearderInfo is empty in JSON ****");
			statusInfo=new StatusInfo( "100906", PropertyUtil.getErrorMessage(100906,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
			return statusInfo;
		}
		logger.debug("-------exit  validateRequestId---------");
		return statusInfo;
	}//validateRequestId

	private StatusInfo validateRootObj(
			CouponCodeRedeemedObj couponCodeRedeemedObj) throws BaseServiceException {
		StatusInfo statusInfo=null;
		try {
			logger.debug("-------entered validateRootObj---------");
			if(couponCodeRedeemedObj==null){
				logger.debug("Error : Unable to parse the json.. Returning. ****");
				statusInfo=new StatusInfo("100903",PropertyUtil.getErrorMessage(100903,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				return statusInfo;
			}
			if(couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ()==null){
				logger.debug("Error : unable to find the Promo-code redeemed info in JSON ****");
				statusInfo=new StatusInfo("100904", PropertyUtil.getErrorMessage(100904,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				return statusInfo;
			}
			if(couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getHEADERINFO()==null){
				logger.debug("Error : unable to find the HearderInfo in JSON ****");
				statusInfo=new StatusInfo("100905", PropertyUtil.getErrorMessage(100905,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				return statusInfo;
			}

			if(couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getUSERDETAILS()== null ){
				logger.debug("Error : unable to find the User Details in JSON ****");
				statusInfo=new StatusInfo("100907", PropertyUtil.getErrorMessage(100907,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				return statusInfo;
			}
			if(couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getCOUPONCODEINFO() == null){
				logger.debug("Unable to find the Promo-code Details ");
				statusInfo=new StatusInfo("100911", PropertyUtil.getErrorMessage(100911,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				return statusInfo;
			}
			if(couponCodeRedeemedObj.getCOUPONCODEREDEEMREQ().getPURCHASECOUPONINFO()== null){
				logger.debug("Error : unable to find the  required purchase details in JSON ****");
				statusInfo=new StatusInfo("100913",  PropertyUtil.getErrorMessage(100913,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
				return statusInfo;
			}
			
		} catch (Exception e) {
			logger.error("Exception ::" , e);
			throw new BaseServiceException("Exception occured while processing validateRootObj::::: ", e);
		}
		logger.debug("-------exit  validateRootObj---------");
		return statusInfo;
	}//validateRootObj
	
	private List<Contacts> getAllContactsByOrg(Long orgId, Contacts contObj) throws BaseServiceException {
		List<Contacts> contactList = null;
		try {
			logger.debug("-------entered getAllContactsByOrg---------");
			UsersDao usersDao =(UsersDao) ServiceLocator.getInstance().getDAOByName(OCConstants.USERS_DAO);
			POSMappingDao posMappingDao=(POSMappingDao) ServiceLocator.getInstance().getDAOByName(OCConstants.POSMAPPING_DAO);
			ContactsDao contactsDao=(ContactsDao) ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_DAO);
			//check the list of Contacts from Organization
			List<Users> orgUserList = usersDao.getUsersListByOrg(orgId);
			Map<Long, TreeMap<String, List<String>>> usersTreeMap = Utility.getPriorityMapByUsersList(orgUserList,Constants.POS_MAPPING_TYPE_CONTACTS, posMappingDao);
			logger.debug("-------exit  getAllContactsByOrg---------");
			return  contactList = contactsDao.findContactsByUserList(contObj, orgUserList, usersTreeMap);
		}catch(Exception e){
			logger.error("Exception ::" , e);
			throw new BaseServiceException("Exception occured while processing getAllContactsByOrg::::: ", e);
		}
	} // getAllContactsByOrg
	
	private StatusInfo saveCouponCodesObj(Coupons coupObj,CouponCodeRedeemReq couponCodeRedeemReq,Users user,
										long orgId,double totalAmount,double totalDiscount,String redeemStr,CouponCodes couponCodes)throws BaseServiceException  {
		StatusInfo statusInfo=null;
		//CouponCodes couponCodes=null;
		try {
			logger.debug("-------entered saveCouponCodesObj---------");
			CouponCodeProcessHelper couponCodeProcessHelper=new CouponCodeProcessHelper();
			CouponCodesDao couponCodesDao=(CouponCodesDao) ServiceLocator.getInstance().getDAOByName(OCConstants.COUPONCODES_DAO);
			CouponCodesDaoForDML couponCodesDaoForDML=(CouponCodesDaoForDML) ServiceLocator.getInstance().getDAOForDMLByName(OCConstants.COUPONCODES_DAOForDML);
			CouponsDao couponsDao=(CouponsDao) ServiceLocator.getInstance().getDAOByName(OCConstants.COUPONS_DAO);
			CouponsDaoForDML couponsDaoForDML=(CouponsDaoForDML) ServiceLocator.getInstance().getDAOForDMLByName(OCConstants.COUPONS_DAOForDML);
			String docSidStr = couponCodeRedeemReq.getCOUPONCODEINFO().getDOCSID();
			String custId = couponCodeRedeemReq.getCOUPONCODEINFO().getCUSTOMERID();
			String emailId = couponCodeRedeemReq.getCOUPONCODEINFO().getEMAIL();
			String phone = couponCodeRedeemReq.getCOUPONCODEINFO().getPHONE();
			double usedLoyalty = 0;
			Long contactId = null;
			if(coupObj.getCouponGeneratedType().equals(Constants.COUP_GENT_TYPE_SINGLE)) {
				couponCodes  =  null;
				if(coupObj.getLoyaltyPoints() != null && couponCodeRedeemReq.getPURCHASECOUPONINFO().getUSEDLOYALTYPOINTS().trim().length() > 0){
					try {
						usedLoyalty = Double.parseDouble(couponCodeRedeemReq.getPURCHASECOUPONINFO().getUSEDLOYALTYPOINTS());
					} catch (NumberFormatException e) {
						statusInfo=validateUsedLoyalty(); 
						if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
							return statusInfo;
						}
					}
				}
				
                //Check for same docsid
				boolean isStakableDiscount = false;
                if(docSidStr != null && !docSidStr.isEmpty()) {
                	couponCodes = couponCodesDao.findByDocSid(docSidStr, couponCodeRedeemReq.getCOUPONCODEINFO().getCOUPONCODE(), orgId);
                	if(couponCodes != null) {
                		if(coupObj.isStackable()) {
                			isStakableDiscount = true;
                			
                		}
                		
                		if(!isStakableDiscount){
                			coupObj.setTotRevenue(coupObj.getTotRevenue() != null ? coupObj.getTotRevenue().longValue()-couponCodes.getTotRevenue().doubleValue()+totalAmount : totalAmount);
                			couponCodes.setTotDiscount(totalDiscount);
                			couponCodes.setTotRevenue(totalAmount);
                			couponCodes.setUsedLoyaltyPoints(usedLoyalty);
                			if(docSidStr != null && docSidStr.trim().length() > 0) couponCodes.setDocSid(docSidStr); 

                			if(redeemStr != null && redeemStr.trim().length() > 0)
                				couponCodes.setRedeemedTo(redeemStr);
                			if(custId != null && custId.trim().length() > 0)
                				couponCodes.setRedeemCustId(custId);
                			if(emailId != null && emailId.trim().length() > 0)
                				couponCodes.setRedeemEmailId(emailId);
                			if(phone != null && phone.trim().length() > 0)
                				couponCodes.setRedeemPhnId(phone);

                			logger.debug("CouponCode  Obj is ::"+couponCodes);
                			//couponCodesDao.saveOrUpdate(couponCodes);
                			couponCodesDaoForDML.saveOrUpdate(couponCodes);
                			//couponsDao.saveOrUpdate(coupObj);
                			couponsDaoForDML.saveOrUpdate(coupObj);
                			statusInfo=new StatusInfo("0", "Promo updated successfully", OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE);
                			return statusInfo;
                		}
                	}
                }
				
				long redeemdCount = couponCodesDao.findRedeemdCoupCodeByCoup(coupObj.getCouponId(), orgId, Constants.COUP_CODE_STATUS_REDEEMED);
				statusInfo=validateRedeemCount(coupObj,redeemdCount);
				if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
					return statusInfo;
				}
				Contacts contObj = null;
				contObj=couponCodeProcessHelper.getContactObj(couponCodeRedeemReq.getCOUPONCODEINFO().getEMAIL(), couponCodeRedeemReq.getCOUPONCODEINFO().getPHONE(), couponCodeRedeemReq.getCOUPONCODEINFO().getCUSTOMERID(), contObj, user);
				//boolean newCC=getNewCC(contObj,user,coupObj,orgId,couponCodeRedeemReq.getCOUPONCODEINFO().getCOUPONCODE(),couponCodes);
				boolean newCC=false;
				if(contObj!=null) {
					contObj.setUsers(user);
					List<Contacts> contactList = getAllContactsByOrg(orgId, contObj);
					newCC = validateContactList(contactList,coupObj);
					couponCodes  = getCouponCodes(contactList,orgId,couponCodeRedeemReq.getCOUPONCODEINFO().getCOUPONCODE());
					newCC = validateCouponCodes(couponCodes,coupObj);
				}else if(couponCodes == null && !coupObj.getRedemedAutoChk()) {
                    //TODO send error message couponcode not avaialable
	            	if(coupObj.getRedeemdCount() != null &&  coupObj.getRedeemdCount() > redeemdCount){
	            		newCC = true; 
	            	}else {
	            		statusInfo=validatePromo(couponCodes,coupObj);
	    				if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
	    					return statusInfo;
	    				}
	            	}
	            	
	             }else if(couponCodes == null && coupObj.getRedemedAutoChk()){
                	 logger.info("newcc value true setting here  ... ");
                	 newCC = true; 
                 }
				logger.info("newCC--------------"+newCC);
				if(newCC || isStakableDiscount) {
					logger.info(">>>>>>>>>new couponcode>>>>>>>>>");
					statusInfo=validatePromoListSize(coupObj,custId,emailId,phone,couponCodeRedeemReq.getCOUPONCODEINFO().getCOUPONCODE(),orgId);
					if(statusInfo!=null && !OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE.equals(statusInfo.getSTATUS())){
						return statusInfo;
					}
					couponCodes=setCouponCodes(couponCodes,coupObj,orgId,couponCodeRedeemReq.getCOUPONCODEINFO().getCOUPONCODE(),redeemStr);	
					if(contactId != null && couponCodes.getContactId() == null) 
						couponCodes.setContactId(contactId);
				}
				couponCodes.setStoreNumber(couponCodeRedeemReq.getCOUPONCODEINFO().getSTORENUMBER()!=null ? couponCodeRedeemReq.getCOUPONCODEINFO().getSTORENUMBER().trim().isEmpty()?null:couponCodeRedeemReq.getCOUPONCODEINFO().getSTORENUMBER().trim():null);
				couponCodes.setSourceType(couponCodeRedeemReq.getHEADERINFO().getSOURCETYPE()!=null ? couponCodeRedeemReq.getHEADERINFO().getSOURCETYPE().trim().isEmpty()?null:couponCodeRedeemReq.getHEADERINFO().getSOURCETYPE().trim():null);
				couponCodes.setStatus(Constants.COUP_CODE_STATUS_REDEEMED);
				couponCodes.setRedeemedOn(Calendar.getInstance());
				if(custId!=null && custId.trim().length() > 0 ) {
					couponCodes.setRedeemCustId(custId);
				}
				if(emailId!=null && emailId.trim().length() > 0 ) {
					couponCodes.setRedeemEmailId(emailId);
				}
				if(phone!=null && phone.trim().length() > 0 ) {
					couponCodes.setRedeemPhnId(phone);
				}
				couponCodes.setTotDiscount(totalDiscount);
				couponCodes.setTotRevenue(totalAmount);
				Double totRevOnThisRecpt = 0.0;
				if(isStakableDiscount) {
					
					totRevOnThisRecpt = couponCodesDao.getTotRevOnThisRecpt(coupObj.getCouponId(), docSidStr);
					//couponCodesDao.updateRevenueOnStackableTrx(coupObj.getCouponId(), docSidStr);
					couponCodesDaoForDML.updateRevenueOnStackableTrx(coupObj.getCouponId(), docSidStr);
				}
				
				couponCodes.setUsedLoyaltyPoints(usedLoyalty);
				if(couponCodeRedeemReq.getCOUPONCODEINFO().getDOCSID() != null && couponCodeRedeemReq.getCOUPONCODEINFO().getDOCSID().trim().length() > 0) couponCodes.setDocSid(couponCodeRedeemReq.getCOUPONCODEINFO().getDOCSID()); 
				couponCodes.setRedeemedTo(redeemStr);
				//couponCodesDao.saveOrUpdate(couponCodes);
				couponCodesDaoForDML.saveOrUpdate(couponCodes);
				long allCount = couponCodesDao.findIssuedCoupCodeByCoup(coupObj.getCouponId());
				coupObj.setRedeemed(coupObj.getRedeemed()!= null ? coupObj.getRedeemed().longValue()+1 : 1);
				if(!isStakableDiscount){
					coupObj.setTotRevenue(coupObj.getTotRevenue() != null ? coupObj.getTotRevenue().longValue()+totalAmount : totalAmount);
				}else{
					
					coupObj.setTotRevenue(coupObj.getTotRevenue() != null ? coupObj.getTotRevenue().longValue()-totRevOnThisRecpt+totalAmount: totalAmount);
				}
				if(coupObj.getTotalQty() != null) {
					long availCount = coupObj.getTotalQty().longValue()-allCount;
					if(availCount < 0) availCount = 0;
					coupObj.setAvailable(availCount);
				}
			//	logger.info(">>>>>>discount & revenue>>>>>>"+coupObj.getTotDiscount()+"-----"+coupObj.getTotRevenue());
				//couponsDao.saveOrUpdate(coupObj);
				couponsDaoForDML.saveOrUpdate(coupObj);
				statusInfo=new StatusInfo("0","Promo redeem sucessfully", OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE);
				sendEmailForReferralProgram(couponCodes,user);
			}
			else {
				//Check for same docsid
                if(docSidStr != null && !docSidStr.isEmpty()) {
                	if(docSidStr.equalsIgnoreCase(couponCodes.getDocSid()) && 
                			couponCodes.getStatus().equalsIgnoreCase(Constants.COUP_CODE_STATUS_REDEEMED)) {
                		coupObj.setTotRevenue(coupObj.getTotRevenue() != null ? 
     	                		coupObj.getTotRevenue().longValue()-couponCodes.getTotRevenue().doubleValue()+totalAmount : totalAmount);
     	                couponCodes.setTotDiscount(totalDiscount);
     	                couponCodes.setTotRevenue(totalAmount);
     	                couponCodes.setUsedLoyaltyPoints(usedLoyalty);
     	                if(docSidStr != null && docSidStr.trim().length() > 0) couponCodes.setDocSid(docSidStr); 
     	                
     	                if(redeemStr != null && redeemStr.trim().length() > 0)
     	                		couponCodes.setRedeemedTo(redeemStr);
     	                if(custId != null && custId.trim().length() > 0)
     	                		couponCodes.setRedeemCustId(custId);
     	                if(emailId != null && emailId.trim().length() > 0)
     	                		couponCodes.setRedeemEmailId(emailId);
     	                if(phone != null && phone.trim().length() > 0)
     	                		couponCodes.setRedeemPhnId(phone);
     	                
     	                logger.debug("CouponCode  Obj is ::"+couponCodes);
     	                //couponCodesDao.saveOrUpdate(couponCodes);
     	                couponCodesDaoForDML.saveOrUpdate(couponCodes);
     	                //couponsDao.saveOrUpdate(coupObj);
     	                couponsDaoForDML.saveOrUpdate(coupObj);
     	                statusInfo=new StatusInfo("0", "Promo updated successfully", OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE);
     	                return statusInfo;
                	}
                }
				
				if(couponCodes != null && couponCodes.getStatus()!= null && 
						couponCodes.getStatus().equals(Constants.COUP_CODE_STATUS_REDEEMED) &&
						coupObj.getCouponGeneratedType().equals(Constants.COUP_GENT_TYPE_MULTIPLE)){
					logger.debug("Promo-code already redeemed in ");
					statusInfo=new StatusInfo("100920", PropertyUtil.getErrorMessage(100920,OCConstants.ERROR_PROMO_FLAG), OCConstants.JSON_RESPONSE_FAILURE_MESSAGE);
					return statusInfo;
				}
				couponCodes.setStoreNumber(couponCodeRedeemReq.getCOUPONCODEINFO().getSTORENUMBER()!=null ? couponCodeRedeemReq.getCOUPONCODEINFO().getSTORENUMBER().trim().isEmpty()?null:couponCodeRedeemReq.getCOUPONCODEINFO().getSTORENUMBER().trim():null);
				couponCodes.setSourceType(couponCodeRedeemReq.getHEADERINFO().getSOURCETYPE()!=null ? couponCodeRedeemReq.getHEADERINFO().getSOURCETYPE().trim().isEmpty()?null:couponCodeRedeemReq.getHEADERINFO().getSOURCETYPE().trim():null);
				couponCodes.setStatus(Constants.COUP_CODE_STATUS_REDEEMED);
				couponCodes.setRedeemedOn(Calendar.getInstance());
				if(custId!=null && custId.trim().length() > 0 ) {
					couponCodes.setRedeemCustId(custId);
				}
				if(emailId!=null && emailId.trim().length() > 0 ) {
					couponCodes.setRedeemEmailId(emailId);
				}
				if(phone!=null && phone.trim().length() > 0 ) {
					couponCodes.setRedeemPhnId(phone);
				}
				couponCodes.setTotDiscount(totalDiscount);
				couponCodes.setTotRevenue(totalAmount);
				couponCodes.setUsedLoyaltyPoints(usedLoyalty);
				if(couponCodeRedeemReq.getCOUPONCODEINFO().getDOCSID() != null && couponCodeRedeemReq.getCOUPONCODEINFO().getDOCSID().trim().length() > 0) couponCodes.setDocSid(couponCodeRedeemReq.getCOUPONCODEINFO().getDOCSID()); 
				couponCodes.setRedeemedTo(redeemStr);
				//couponCodesDao.saveOrUpdate(couponCodes);
				couponCodesDaoForDML.saveOrUpdate(couponCodes);
				long allCount = couponCodesDao.findIssuedCoupCodeByCoup(coupObj.getCouponId());
				coupObj.setRedeemed(coupObj.getRedeemed()!= null ? coupObj.getRedeemed().longValue()+1 : 1);
				coupObj.setTotRevenue(coupObj.getTotRevenue() != null ? coupObj.getTotRevenue().longValue()+totalAmount : totalAmount);
				if(coupObj.getTotalQty() != null) {
					long availCount = coupObj.getTotalQty().longValue()-allCount;
					if(availCount < 0) availCount = 0;
					coupObj.setAvailable(availCount);
				}
				//couponsDao.saveOrUpdate(coupObj);
				couponsDaoForDML.saveOrUpdate(coupObj);
				statusInfo=new StatusInfo("0","Promo redeem sucessfully", OCConstants.JSON_RESPONSE_SUCCESS_MESSAGE);
				sendEmailForReferralProgram(couponCodes,user);
			}
		}catch (Exception e) {
			logger.error("Exception ::" , e);
			throw new BaseServiceException("Exception occured while processing saveCouponCodesObj::::: ", e);
		}
		logger.debug("-------exit  saveCouponCodesObj---------");
		return statusInfo;
	}//saveCouponCodesObj

	private void sendEmailForReferralProgram(CouponCodes couponCodes,Users user) throws BaseServiceException {
		try {
			logger.debug("-------entered sendEmailForReferralProgram---------");
		ContactsDao contactsDao=(ContactsDao) ServiceLocator.getInstance().getDAOByName(OCConstants.CONTACTS_DAO);
		CustomTemplatesDao customTemplatesDao=(CustomTemplatesDao) ServiceLocator.getInstance().getDAOByName(OCConstants.CUSTOMTEMPLATES_DAO);
		EmailQueueDao emailQueueDao=(EmailQueueDao) ServiceLocator.getInstance().getDAOByName(OCConstants.EMAILQUEUE_DAO);
		EmailQueueDaoForDML emailQueueDaoForDML=(EmailQueueDaoForDML) ServiceLocator.getInstance().getDAOForDMLByName(OCConstants.EMAILQUEUE_DAO_ForDML);
		if(couponCodes.getContactId() != null) {
			Contacts contactObj = contactsDao.findById(couponCodes.getContactId());
			String refererEmailId = contactObj.getUdf12();
			if(refererEmailId != null 
					&& !refererEmailId.trim().isEmpty() 
					&& Utility.validateEmail(refererEmailId)) {
				
				CustomTemplates customTemplates = customTemplatesDao.findByUserRefereeEmail(user.getUserId());
				if(customTemplates != null) {
						String message=customTemplates.getHtmlText();
						message = message.replace("[OrganisationName]",
								user.getUserOrganization().getOrganizationName()).replace(
										"[senderReplyToEmailID]", user.getEmailId());
						
						EmailQueue testEmailQueue = new EmailQueue(customTemplates,
								Constants.EQ_TYPE_WELCOME_MAIL, message, "Active",
								refererEmailId, user, MyCalendar.getNewCalendar(),
								" Welcome Mail.", null, null, null,
								contactObj.getContactId());
						
						// testEmailQueue.setChildEmail(childEmail);
						//emailQueueDao.saveOrUpdate(testEmailQueue);
						emailQueueDaoForDML.saveOrUpdate(testEmailQueue);
				}//if
			}	
		}
		}catch (Exception e) {
			logger.error("Exception ::" , e);
			throw new BaseServiceException("Exception occured while processing sendEmailForReferralProgram::::: ", e);
		}
	}//sendEmailForReferralProgram
}
