package org.mq.captiway.scheduler.services;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.lang.StringEscapeUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.poi.hssf.record.formula.functions.Replace;
import org.mq.captiway.scheduler.beans.Coupons;
import org.mq.captiway.scheduler.beans.EmailQueue;
import org.mq.captiway.scheduler.beans.OCSMSGateway;
import org.mq.captiway.scheduler.beans.SMSSettings;
import org.mq.captiway.scheduler.dao.CouponsDao;
import org.mq.captiway.scheduler.dao.EmailQueueDao;
import org.mq.captiway.scheduler.utility.Constants;
import org.mq.captiway.scheduler.utility.PropertyUtil;
import org.mq.captiway.scheduler.utility.ReplacePlaceHolders;
import org.mq.captiway.scheduler.utility.SMSStatusCodes;
import org.mq.captiway.scheduler.utility.Utility;
import org.mq.optculture.exception.BaseServiceException;
import org.mq.optculture.utils.OCConstants;
import org.mq.optculture.utils.ServiceLocator;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;


public class OutreachPakistanGateway {
	
	private static final String SMS4CONNECT_STATUS_SUCCESS = "Successful";
	private static final String SMS4CONNECT_STATUS_UNSUCCESS = "UnSuccessful";
	private static final String SMS4CONNECT_STATUS_PENDING = "Message Sent to Telecom";
	
	private final String URL_PH_ID = "{USERID}";
	private final String URL_PH_PWD = "{PASSWORD}";
	private final String URL_PH_MASK = "{MASK}";
	private final String URL_PH_TO = "{TO}";
	private final String URL_PH_LANG = "{LANG}";
	private final String URL_PH_MSG = "{MSG}";
	private final String URL_PH_TYPE = "{TYPE}";
	private final String URL_PH_TID = "{TID}";
	//http://sms4connect.com/api/sendsms.php/balance/status?id={USERID}&pwd={PASSWORD}
	private final String BAL_URL_GETDATA = "id="+URL_PH_ID+"&pass="+URL_PH_PWD;//"http://www.sms4connect.com/api/sendsms.php/balance/status?id="+URL_PH_ID+"&pass="+URL_PH_PWD;//TODO need to configure at DB
	
	//private final String MSG_SUBMIT_GET_URL = "http://sms4connect.com/api/sendsms.php/sendsms/url";
	
	private final String MSG_SUBMIT_GET_URL = "http://outreach.pk/api/sendsms.php/sendsms/url";
	private final String POST_DATA = "id="+URL_PH_ID+"&pass="+URL_PH_PWD+"&mask="+URL_PH_MASK+"&to="+URL_PH_TO+"&lang="+URL_PH_LANG+"&msg="+URL_PH_MSG+"&type="+URL_PH_TYPE;
	
	//private final String REPORT_URL = "http://sms4connect.com/api/sendsms.php/delivery/status";
	private final String REPORT_URL = "http://outreach.pk/api/sendsms.php/delivery/status";
	
	private final String REPORT_POST_DATA = "id="+URL_PH_ID+"&pass="+URL_PH_PWD+"&transaction="+URL_PH_TID; //passed -rajeev

	private static final Logger logger = LogManager.getLogger(Constants.SCHEDULER_LOGGER);

	private OCSMSGateway ocSMSGateway;
	private volatile LinkedHashSet<String> mobilesSet;//to preserve the insertion order
	private boolean isPersonalized;
	private String msgContent;
	private AtomicInteger counter;
	private Map<String, String > statusMap ;
	
	private void setStatusMap() {
		if(statusMap == null){
			statusMap = new HashMap<String, String>();
			statusMap.put("Successful", SMSStatusCodes.CLICKATELL_STATUS_RECEIVED);
			statusMap.put("UnSuccessful", SMSStatusCodes.CLICKATELL_STATUS_BOUNCED);
			statusMap.put("Message Sent to Telecom", SMSStatusCodes.CLICKATELL_STATUS_RECEIVED);//TODO
		}
		
	}
	public OutreachPakistanGateway() {
		setStatusMap();
	}
	
	public OutreachPakistanGateway(OCSMSGateway ocSMSGateway) {
		this.ocSMSGateway = ocSMSGateway;
		mobilesSet = new LinkedHashSet<String>();
		counter = new AtomicInteger(0);
		setStatusMap();
		
	}
	
	private void updateCounter(boolean isIncrement){
		
		if(isIncrement) counter.incrementAndGet();
		else counter.set(0);
	}
	
	private int getCounter(){
		
		return counter.get();
	}
	private synchronized LinkedHashSet<String> getMobileSet(){
		
		return this.mobilesSet;
	}
	private synchronized void setMobileSet(String mobile){
		
		getMobileSet().add(mobile);
	}
	
	
	public boolean getBalence(int totalCount, OCSMSGateway gatewayObj) {
				
				
		try {
			String targetUrl = gatewayObj.getPostpaidBalURL()+"?"+(BAL_URL_GETDATA);
			
			URL url = new URL(targetUrl.replace(URL_PH_ID, gatewayObj.getUserId()).replace(URL_PH_PWD, gatewayObj.getPwd()));
					
			
			HttpURLConnection urlconnection = (HttpURLConnection) url.openConnection();
			
			
			urlconnection.setRequestMethod("GET");
			urlconnection.setRequestProperty("Content-Type","application/x-www-form-urlencoded");
			urlconnection.setDoOutput(true);

							
			BufferedReader in = new BufferedReader(	new InputStreamReader(urlconnection.getInputStream()));
			
			String decodedString;
			String response = "";
			while ((decodedString = in.readLine()) != null) {
				response += decodedString;
			}
			in.close();
			
			logger.debug("balence response from Outreach is======>"+response);
			
			if(response == null) {
				
				//logger.error("exception while fetching balence");
				return false;
				
			}//if
			
			String balResp = parseBalResponse(response);
			
			if(balResp == null) {
				
				//logger.error("exception while fetching balence");
				return false;
				
			}//if
			double balence = 0;
			try{
				 balence = Double.parseDouble(balResp);
			}
			catch (NumberFormatException e) {
				logger.error("Exception", e);
				return false;
			} 
			boolean canProceed = true;
			
			if(balence <= totalCount){
				
				canProceed = false;
				
				
			}//if
			
			if( !canProceed ) {
				
				
				try {
					
					String message = PropertyUtil.getPropertyValueFromDB(Constants.SMS_LOW_CREDITS_WARN_TEXT);
					String emailId = PropertyUtil.getPropertyValueFromDB("SupportEmailId");
					
				 	EmailQueue emailQueue = new EmailQueue("Ran out of SMS Credits-Outreach", message, 
				 			Constants.EQ_TYPE_LOW_SMS_CREDITS, "Active", emailId, new Date());
				 	EmailQueueDao emailQueueDao = null;
					try {
						emailQueueDao = (EmailQueueDao)ServiceLocator.getInstance().getDAOByName("emailQueueDao");
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						throw new BaseServiceException("Exception while getting emailQueueDao");
					}
				 		
				 	emailQueueDao.saveOrUpdate(emailQueue);
			 	} catch(Exception e) {
			 		logger.error("exception while saving email queue object");
			 		return canProceed;
			 	}
				
				
			}
			
			return canProceed;
			
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			logger.error("Exception", e);
		} catch (ProtocolException e) {
			// TODO Auto-generated catch block
			logger.error("Exception", e);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			logger.error("Exception", e);
		}
			
			
		return false;
		 
		 
		 
	 }
	
	
	public void sendMultipleMobileDoubleOptin(String userID, String pwd,
			Set<String> optinMobileSet, SMSSettings smsSettings) {

		PakistanGatewaySubmission multiSubMission = new PakistanGatewaySubmission(userID, pwd, optinMobileSet, smsSettings);
		multiSubMission.start();
	}
	
	public String[] submitFinalChunk(String senderID) throws Exception{
		try {
			String mobiles = Constants.STRING_NILL;
			synchronized (mobilesSet) {
				if(mobilesSet != null && mobilesSet.size() > 0) {
					for (String mobile : mobilesSet) {
						
						if(!mobiles.isEmpty()) mobiles += Constants.DELIMETER_COMMA;
						
						mobiles += mobile;
						
					}
					mobilesSet.clear();
					String[] responseArr = sendMsg(msgContent, false,mobiles, ocSMSGateway.getUserId(), ocSMSGateway.getPwd(), senderID);
					return responseArr;
				}
			}
		} catch (BaseServiceException e) {
			// TODO Auto-generated catch block
			logger.error("Exception ", e);
		}
		return null;
	}
	
	public String[] prepareData(boolean isPersonalized, String messageContent,  String toMobNum, String senderID) throws Exception {
		
		//if it is a personalized msg then submit it as a seperate request for each mobile.
		//if not then subimt the same msg for 100 mobiles at a time
		//identifying the instance when to submit is imp here.this will happen from the shared variable called ''
		
		String[] responseArr = null;
		this.isPersonalized = isPersonalized;
		if(msgContent == null)msgContent = messageContent;
	//	logger.debug(" Current Thread Name "+Thread.currentThread().getName()+"______ Inside prepareData ");
		if(!isPersonalized){
			
			updateCounter(true);
			setMobileSet(toMobNum);
			logger.debug(" Current Thread Name "+Thread.currentThread().getName()+"______ getCounter "+getCounter());
			if(getCounter() >= 100){
				synchronized (mobilesSet) {
					
					String mobiles = Constants.STRING_NILL;
					for (String mobile : mobilesSet) {
						
						if(!mobiles.isEmpty()) mobiles += Constants.DELIMETER_COMMA;
						
						mobiles += mobile;
						
						
					}
					mobilesSet.clear();
					responseArr = sendMsg(messageContent, false,mobiles, ocSMSGateway.getUserId(), ocSMSGateway.getPwd(), senderID);
				}
				
			}
		}else{
			
			responseArr = sendMsg(messageContent, true, toMobNum, ocSMSGateway.getUserId(), ocSMSGateway.getPwd(), senderID);
		}
		
		return responseArr;
	}
	
	public String[] sendMsg(String msg, boolean isSingle, String toMobile, String userId, String pwd, String senderID) throws BaseServiceException{
		
		
		//here no need to prepare a msg fro each mobile hence send it as a post request when multiple mobiles are there
		//assuming that usually from subscriber user will not enter more than 100 numbers at a time
		String submitResponse = isSingle ? sendGet(msg, toMobile, ocSMSGateway.getUserId(), ocSMSGateway.getPwd(), senderID) :
			sendPost(msg, toMobile, ocSMSGateway.getUserId(), ocSMSGateway.getPwd(), senderID);
		
		if(submitResponse == null){
			
			throw new BaseServiceException("Exception in submitting the msg, not received the response");
		}
		
		String[] responseArr = parseSubmitResponse(submitResponse);
		
		if(responseArr == null) {
			
			throw new BaseServiceException("not received the transactionId");
		}
		
		logger.debug("transactionId in case of Outreach provider = "+responseArr[1]);
		
		//TODO need to store the Tid against to this submission
		return responseArr;
		
	}
	
	private String sendGet(String msg, String toMobile, String userId, String pwd, String mask) {
		
		try {
			String targetUrl = MSG_SUBMIT_GET_URL+"?"+(POST_DATA.replace(URL_PH_ID, userId)
								.replace(URL_PH_PWD, pwd)
								.replace(URL_PH_TO, toMobile)
								.replace(URL_PH_LANG, "English")
								.replace(URL_PH_MASK, URLEncoder.encode(mask, "UTF-8"))
								.replace(URL_PH_MSG, URLEncoder.encode(msg, "UTF-8"))
								.replace(URL_PH_TYPE, "xml"));
		//	logger.debug(" Current Thread Name "+Thread.currentThread().getName()+"______ targetUrl ==>"+targetUrl);	
			
			/*if(true){
				logger.debug("______ Returning from Send GEt here .....................<<<<<<<<<<<<<<<<<<<<<<");	
				return null;
			}*/
			
			URL url = new URL(targetUrl);
			HttpURLConnection urlconnection = (HttpURLConnection) url.openConnection();
			
			
			urlconnection.setRequestMethod("GET");
			urlconnection.setRequestProperty("Content-Type","application/x-www-form-urlencoded");
			urlconnection.setDoOutput(true);

							
			BufferedReader in = new BufferedReader(	new InputStreamReader(urlconnection.getInputStream()));
			
			String decodedString;
			String response = Constants.STRING_NILL;
			
			while ((decodedString = in.readLine()) != null) {
				response += decodedString;
			}
			in.close();
			logger.debug("submit response Outreach, is======>"+response);
			
			return response;
			
		} catch (MalformedURLException e) {
			logger.error("Exception", e);
		} catch (ProtocolException e) {
			logger.error("Exception", e);
		} catch (IOException e) {
			logger.error("Exception", e);
		}catch (Exception e) {
			logger.error("Exception", e);
		}
						
		return null;		
		
	}
	
	private String sendPost(String msg, String toMobile, String userId, String pwd, String mask) {
		
		try {
			String response = Constants.STRING_NILL;
			String targetUrl = MSG_SUBMIT_GET_URL;
						
			URL url = new URL(targetUrl);
			
			String postData = (POST_DATA.replace(URL_PH_ID, userId)
					.replace(URL_PH_PWD, pwd)
					.replace(URL_PH_TO, toMobile)
					.replace(URL_PH_LANG, "English")
					.replace(URL_PH_MASK, URLEncoder.encode(mask, "UTF-8"))
					.replace(URL_PH_MSG, URLEncoder.encode(msg, "UTF-8")) // TODO check
					.replace(URL_PH_TYPE, "Xml"));
			
	//		logger.info( "Current Thread Name "+Thread.currentThread().getName()+"............Data to be sent is=====>"+postData);
			/*if(true){
				logger.debug("______ Returning from here .....................<<<<<<<<<<<<<<<<<<<<<<");	
				return null;
			}*/
			HttpURLConnection urlconnection = (HttpURLConnection) url.openConnection();
			
			urlconnection.setRequestMethod("POST");
			urlconnection.setRequestProperty("Content-Type","application/x-www-form-urlencoded");
			urlconnection.setDoOutput(true);

			OutputStreamWriter out = new OutputStreamWriter(urlconnection.getOutputStream());
			out.write(postData);
			out.flush();
			out.close();
			
			BufferedReader in = new BufferedReader(	new InputStreamReader(urlconnection.getInputStream()));
			
			String decodedString;
			while ((decodedString = in.readLine()) != null) {
				response += decodedString;
			}
			in.close();
			logger.info("response from Outreach is======>"+response);
	
		return response;
		
		} catch (MalformedURLException e) {
			logger.error("Exception", e);
		} catch (ProtocolException e) {
			logger.error("Exception", e);
		} catch (IOException e) {
			logger.error("Exception", e);
		}catch (Exception e) {
			logger.error("Exception", e);
		}
		
		return null;
	}
	
	public Map<String, String> fetchReports(String TIDStr) throws Exception{

		
		String targetUrl = ocSMSGateway.getPullReportsURL();
					
		URL url = new URL(targetUrl);
		
		String postData = (REPORT_POST_DATA.replace(URL_PH_ID, ocSMSGateway.getUserId())
				.replace(URL_PH_PWD, ocSMSGateway.getPwd())
				.replace(URL_PH_TID, TIDStr));
				
		/*String postData = (REPORT_POST_DATA.replace(URL_PH_ID, "92test11")
				.replace(URL_PH_PWD, "cloud2233")
				.replace(URL_PH_TID, TIDStr));*/
		
		logger.debug("Data to be sent to Outreach provider, is=====>"+postData);
		
		HttpURLConnection urlconnection = (HttpURLConnection) url.openConnection();
		
		urlconnection.setRequestMethod("POST");
		urlconnection.setRequestProperty("Content-Type","application/x-www-form-urlencoded");
		urlconnection.setDoOutput(true);

		OutputStreamWriter out = new OutputStreamWriter(urlconnection.getOutputStream());
		out.write(postData);
		out.flush();
		out.close();
		
		BufferedReader in = new BufferedReader(	new InputStreamReader(urlconnection.getInputStream()));
		
		String decodedString;
		StringBuilder response = new StringBuilder();
		while ((decodedString = in.readLine()) != null) {
			response.append(decodedString);
		}
		in.close();
		logger.debug("response from Outreach is======>"+response);

		if(response.length() == 0) return null;
		
		Map<String, String> statusMap = parseReportResponse(response);
	
		return statusMap;
		
		
	}
	
	
	
	private Map<String, String> parseReportResponse(StringBuilder response) throws Exception{
		
		/**
		 * <?xml version="1.0" encoding="UTF-8" ?>
			<corpsms>
			<transaction id="1">
			<status num="92300xxxxxxx" date="07-11-2012 13:25:02">Successful</status>
			</transaction>
			</corpsms>

		 */
		String responseStr = response.toString();
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
		DocumentBuilder db = dbf.newDocumentBuilder();
		Document doc = db.parse(new ByteArrayInputStream(responseStr.getBytes()));
		doc.getDocumentElement().normalize();
		
		
		
		NodeList nodeLst = doc.getElementsByTagName("transaction");
		if(nodeLst == null) return null;
		logger.info("status message is====>"+nodeLst.getLength());
		
		Map<String, String> retStatusMap = new LinkedHashMap<String, String>();
		
		for(int i=0; i<nodeLst.getLength(); i++) {
			Node node = nodeLst.item(i);
			Element element = (Element)node;
			String TID = element.getAttribute("id");
			NodeList childNodeLst = null;
			if(node.hasChildNodes()){
				
				childNodeLst = element.getElementsByTagName("status");
				for (int j=0; j<childNodeLst.getLength(); j++) {
					
					Node statusNode = childNodeLst.item(j);
					Element statusElement = (Element)statusNode;
					String mobileNumber = statusElement.getAttribute("num");
					String status = statusElement.getTextContent();
					
					//Set<String> mobileStatus = statusMap.get(TID);
					//if(mobileStatus == null) mobileStatus = new LinkedHashSet<String>();
					//mobileStatus.add(mobileNumber+Constants.ADDR_COL_DELIMETER+status);
					retStatusMap.put(mobileNumber, TID+Constants.ADDR_COL_DELIMETER+this.statusMap.get(status));
					
				}//for
				
			}//if
				
		}//for
		
		return retStatusMap;
	}
	
	public String parseBalResponse(String balenceResponse){
		
		
		try {
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder();
			Document doc = db.parse(new ByteArrayInputStream(balenceResponse.getBytes()));
			doc.getDocumentElement().normalize();
			
			
			//Element docElement = doc.getDocumentElement();
			
			NodeList nodeLst = doc.getElementsByTagName("response");
			if(nodeLst == null) return null;
			logger.info("status message is====>"+nodeLst.getLength());
			for(int i=0; i<nodeLst.getLength(); i++) {
				
				Node node = nodeLst.item(i);
				Element element = (Element)node;
				return element.getTextContent().trim();
					
			}
		} catch (ParserConfigurationException e) {
			logger.error("Exception ::" , e);
		} catch (SAXException e) {
			logger.error("Exception ::" , e);
		} catch (IOException e) {
			logger.error("Exception ::" , e);
		}
		
		return null;
	}
	
	public String[] parseSubmitResponse(String submitResponse) {
		
		String[] responseArr = new String[2];
		
		try {
			
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder();
			Document doc = db.parse(new ByteArrayInputStream(submitResponse.getBytes()));
			doc.getDocumentElement().normalize();
			
			Element docElement = doc.getDocumentElement();
			//<?xml version="1.0" encoding="UTF-8" ?>
			//<corpsms>	<code>206</code>	<type>Error</type>	<response>Invalid Destination Number, Please Check Format i-e 92345xxxxxxx</response>	<transactionID>321919605</transactionID></corpsms>
			//<type>Error</type>
			NodeList codeNodeLst = doc.getElementsByTagName("code");
			if(codeNodeLst == null) return null;
			logger.info("status message is====>"+codeNodeLst.getLength());
			String responseCode = null;
			boolean isSuccess = false;
			for(int i=0; i<codeNodeLst.getLength(); i++) {
				
				Node node = codeNodeLst.item(i);
				Element element = (Element)node;
				//Attr idAttr =  element.getAttributeNode("id");
				responseCode = element.getTextContent().trim();
				if(!responseCode.equals("300")){
					logger.debug("there is an error some where");
				}//if
			}//for
			if(!isSuccess){
				
				NodeList responseNodeLst = doc.getElementsByTagName("response");
				if(responseNodeLst == null) return null;
				logger.info("status message is====>"+responseNodeLst.getLength());
				String errorResponse = null;
				for(int i=0; i<responseNodeLst.getLength(); i++) {
					
					Node node = responseNodeLst.item(i);
					Element element = (Element)node;
					//Attr idAttr =  element.getAttributeNode("id");
					errorResponse = element.getTextContent().trim();
					logger.debug("errorResponse is====>"+errorResponse);
					//return null;
				}
			}
			
			NodeList TIDNodeLst = doc.getElementsByTagName("transactionID");
			if(TIDNodeLst == null) return null;
			String transactionId = null;
			logger.info("status message is====>"+TIDNodeLst.getLength());
			for(int i=0; i<TIDNodeLst.getLength(); i++) {
				
				Node node = TIDNodeLst.item(i);
				Element element = (Element)node;
				//Attr idAttr =  element.getAttributeNode("id");
				transactionId = element.getTextContent().trim();
				responseArr[0] = responseCode;
				responseArr[1] = transactionId;
				return responseArr;
				//return transactionId;
					
			}
			
			
		} catch (ParserConfigurationException e) {
			logger.error("Exception ::" , e);
		} catch (SAXException e) {
			logger.error("Exception ::" , e);
		} catch (IOException e) {
			logger.error("Exception ::" , e);
		}
		
		return null;
	
		
		
		
	}
	
	class PakistanGatewaySubmission extends Thread {
		
		
		private String userID;
		private String pwd;
		private Set<String> optinMobileSet;
		private SMSSettings smsSettings;
		
		public PakistanGatewaySubmission(String userID, String pwd, Set<String> optinMobileSet, SMSSettings smsSettings) {
			
			this.userID = userID;
			this.pwd = pwd;
			this.optinMobileSet = optinMobileSet;
			this.smsSettings = smsSettings;
			
		}
		
		
		@Override
		public void run() {
			
			try {
				sendMultipleMobileDoubleOptin( userID,  pwd, optinMobileSet,  smsSettings);
			}catch (BaseServiceException e) {
				logger.error("Exception while sending multiple double optin msgs", e);
			}catch (Exception e) {
				logger.error("Exception while sending multiple double optin msgs", e);
			}
		}
		
		
		public void sendMultipleMobileDoubleOptin(String userID, String pwd, Set<String> optinMobileSet, SMSSettings smsSettings) throws BaseServiceException {
			
		if(logger.isDebugEnabled()) logger.debug("performing mobile optin here....");
			String messageContent = smsSettings.getAutoResponse();
			
			String senderID = smsSettings.getSenderId();
			
			if(senderID == null) {
				if(logger.isErrorEnabled()) logger.error("NO senderID found to be send");
				return;
				
			}
			if(messageContent == null) {
				
				if(logger.isErrorEnabled()) logger.error("NO message found to be send");
				return;
				
			}
			
			if(SMSStatusCodes.optOutFooterMap.get(smsSettings.getUserId().getCountryType())){
				
				messageContent = smsSettings.getMessageHeader() != null ? (smsSettings.getMessageHeader()+" "+ messageContent) : (""  + messageContent);
			}
			
			//messageContent = StringEscapeUtils.escapeHtml(messageContent);
			
			long userId = smsSettings.getUserId().getUserId().longValue();
			
			messageContent = messageContent.replace("|^", "[").replace("^|", "]");
			
			Set<String> coupPhSet = Utility.findCoupPlaceholders(messageContent);
			
			boolean isFillCoup = false;
			ReplacePlaceHolders replacePlaceHolders = null;
			if(coupPhSet != null  && coupPhSet.size() > 0) {
				isFillCoup = true;
				replacePlaceHolders = new ReplacePlaceHolders();
			}
			String mobileStr = Constants.STRING_NILL;
			
			for (String toMobNum : optinMobileSet) {
				
				String text = messageContent;
				toMobNum = toMobNum.trim();
				
				//TODO need to think on country carrier
				
				if(isFillCoup) {
					
					try {
						text = text = replacePlaceHolders.replaceSMSAutoResponseContent(text, coupPhSet, toMobNum, null);
						
					} catch (BaseServiceException e) {
						logger.error("exception while getting the coupon placehlders", e);
					}
					text = StringEscapeUtils.escapeHtml(text);
				}
									
				if(!isFillCoup) {
					
					if(!mobileStr.isEmpty()) mobileStr += Constants.DELIMETER_COMMA;
					mobileStr += toMobNum;
					
				}else{
					//TODO store the Tid or not
					sendGet(text, toMobNum, userID, pwd, senderID);
				}
				
			}//for
			
			if(!isFillCoup) {
				
				String text = StringEscapeUtils.escapeHtml(messageContent);
				sendPost(text, mobileStr, userID, pwd, senderID);
				
			}
			
			if(logger.isDebugEnabled()) logger.debug("completed mobile optin here....");
			
		}//sendMultipleMobileDoubleOptin
			
	
	}
	public static void main(String[] args) throws Exception{
		
		
		String TID = "320101029";
		PakistanGateway obj = new PakistanGateway();
		obj.fetchReports(TID);
		
		/*String balResponse = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>"
				+ "<corpsms>"
				+ "<code>100</code>"
				+ "<type>Success</type>"
				+ "<response>5913</response>"
				+ "</corpsms>";*/
		
		/*String submitResponse = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>"
							+ "<corpsms>"
							+ "<transaction id=\"1\">"
							+ "<status num=\"92300xxxxxxx\" date=\"07-11-2012 13:25:02\">Successful</status>"
							+ "</transaction>"
							+ "</corpsms>";*/
		
		
		/*String submitResponse = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>"
								+ "<corpsms><code>300</code><type>Success</type>"
								+ "<response>Message Sent to Telecom.</response>"
								+ "<transactionID>1</transactionID>"
								+ "</corpsms>";
				
		
		String reportResp = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><corpsms>"
				+ "<transaction id=\"1\"><status num=\"92300xxxxxxx\" date=\"07-11-2012 13:25:02\">Successful</status></transaction></corpsms>";
		PakistanGateway obj = new PakistanGateway();
		
		//String retStr = obj.parseBalResponse(balResponse);
		//String retStr = obj.parseSubmitResponse(submitResponse);
		StringBuilder reportRespBlder = new StringBuilder(reportResp);
		Map<String, String> retStr;
		try {
			retStr = obj.parseReportResponse(reportRespBlder);
			for (String mobiles : retStr.keySet()) {
				
				logger.debug(mobiles +"  "+retStr.get(mobiles));
				
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		*/
		
		
	}
}
